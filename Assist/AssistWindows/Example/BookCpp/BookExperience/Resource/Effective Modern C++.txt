Effective Modern C++

oreilly网站：
http://www.oreilly.com、
http://facebook.com/oreilly （无法访问）、
http://twitter.com/oreillymedia （无法访问）、
http://www.youtube.com/oreillymedia （无法访问）。

官方网站：
http://www.aristeia.com/BookErrata/emc++-errata.html。

★★★★★
作者：Scott Meyers
其他书籍：《Effective C++》、《More Effective C++》、《Effective STL》

联系作者：
emc++@aristeia.com

知识点 
1.	C++ 11基础知识。 

引用网站：
http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0154r1.html （多核CPU流水线尺寸的细节）、 
http://www.cpp-summit.org （C++ Summit 大会官网）。

出版商的声明
	代码示例的使用
	Safari Books Online
	如何联系我们
致谢
绪论	 
	术语和惯例			 
	提交缺陷报告和改进建议
第1章 型别推导
	条款1 理解模板型别推导
		★	在模板型别推导过程中，具有引用型别的实参会被当成非引用型别来处理。换言之，其引用性会被忽略。
		★	对万能引用形参进行推导时，左值实参会进行特殊处理。
		★	对按值传递的形参进行推导时，若实参型别中带有const或volatile饰词，则它们还是会被当作不带const或volatile饰词的型别来处理。
		★	在模板型别推导过程中，数组或函数型别的实参会退化成对应的指针，除非它们被用来初始化引用。
	条款2 理解auto型别推导
		★	在一般情况下，auto型别推导和模板型别推导是一模一样的，但是auto型别推导会假定用大括号括起的初始化表达式代表一个std::initializer_list，但模板型别推导却不会。
		★	在函数返回值或lambda式的形参中使用auto，意思是使用模板型别推导而非auto型别推导。
	条款3 理解decltype
		★	C++11的返回值型别尾序语法，即该函数的返回值型别将在参数列表之后。
			template<typename Container,typename Index>
			auto authAndAccess(Container& c, Index i)->decltype(c[i]);
		★	使用decltype(auto)时需要极其小心翼翼。
		★	绝大多数情况下，decltype会得到变量或表达式的型别而不作任何修改。
		★	对于型别为T的左值表达式，除非该表达式仅有一个名字，decltype总是得出型别T&。
		★	C++14支持decltype(auto)，和auto一样，它会从其初始化表达式出发来推导型别，但是它的型别推导使用的是decltype的规则。
	条款4 掌握查看型别推导结果的方法
		★	复用IDE编辑器、编译器错误消息和Boost.TypeIndex库常常能够查看到推导而得的型别。
		★	有些工具产生的结果可能会无用，或者不准确。所以理解C++型别推导规则是必要的。
第2章 auto 
	条款5 优先选用auto，而非显式型别声明
	条款6 当auto推导的型别不符合要求时，使用带显式型别的初始化物惯用法
第3章 转向现代C++
	条款7 在创建对象时注意区分()和{}
	条款8 优先选用nullptr，面非0或NULL
	条款9 优先选用别名声明，而非typedef
	条款10 优先选用限定作用域的枚举型别，而非不限作用域的枚举型别
	条款11 优先选用删除函数，而非private未定义函数
	条款12 为意在改写的函数添加override声明 
	条款13 优先选用const_iterator，而非iterator
	条款14 只要函数不会发射异常，就为其加上noexcept声明 
	条款15 只要有可能使用constexpr，就使用它
	条款16 保证const成员函数的线程安全性
	条款17 理解特种成员函数的生成机制
第4章 智能指针
	条款18 使用std::unique_ptr管理具备专属所有权的资源
	条款19 使用std::shared_ptr管理具备共享所有权的资源
	条款20 对于类似std::shared_ptr但有可能空悬的指针使用std::weak_ptr
	条款21 优先选用std::make_unique和std::make_shared，而非直接使用new
	条款22 使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中
第5章 右值引用、移动语义和完美转发
	条款23 理解std::move和std::forward
	条款24 区别万能引用和右值引用 
	条款25 针对右值引用实施std::move，针对万能引用实施std::forward
	条款26 避免依万能引用型别进行重载
	条款27 熟悉万能引用型别进行重载的替代方案
	条款28 理解引用折叠
	条款29 假定移动操作不存在、成本高、未使用
	条款30 熟悉完美转发的失败情形
第6章 lambda表达式
	条款31 避免默认捕获模式
	条款32 使用初始化捕获将对象移入闭包
	条款33 对auto&&型别的形参使用decltype，以std::forward之
	条款34 优先选用lambda式，而非std::bind
第7章 并发API
	条款35 优先选用基于任务而非基于线程的程序设计
	条款36 如果异步是性要的，则指定std::launch::async
	条款37 使std::thread型别对象在所有路径皆不可联结
	条款38 对变化多端的线程句柄析构函数行为保持关注
	条款39 考虑针对一次性事件通信使用以void为模板型别实参的期望
	条款40 对并发使用std::atomic，对特种内存使用volatile
第8章 微调
	条款41 针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传入
	条款42 考虑置入而非插入