Applied C++
Practical Techniques for Building Better Software（构建更佳软件的实用技术）

官方网站：
http://www.appliedcpp.com/appliedcpp_sw （已失效）。

★★
作者：Philip Romanik、Amy Muntz

知识点 
1.	构建C++软件知识。
2.  构建一个缩略图生成器。

代码
1.  书籍代码。 

前言
	适用读者
	如何使用本书
	排版约定
	致谢
第1章  绪论
	★ 讨论以下问题：
		1. 设计该应用的最佳方式是采用继承还是模板？
		2. 是在静态的初始化时完成所有内容，还是使用一个单例对象？
		3. 显示的模板实例化是否会带来语法或功能上的好处？
		4. 是否在设计中加入引用对象和句柄的引用计数？
		5. 如何划分全局函数和对象的功能？
		6. 采用哪种框架更适合异常处理？
		7. 模板特殊化是否会有的帮助？
		8. 如何使例程运行得更快？
	★ 商业软件的特征：
		1. 群体开发。
		2. 可扩展。
		3. 可维护。
		4. 可理解。
		5. 稳定。
	1.1 图像基础
		★	图像处理应用是指所有以图像作为输入，然后对该图像进行一些处理，最后输出一个结果图像的程序，
			所输出的图像可能与输入的图像不同，也可能完全相同。
		★	机器视觉、X光，以及医学成像等工业应用都依赖灰度图像处理来提供信息。
		1.1.1 RGB图像
			★	由于人的眼睛对绿色比红色和蓝色敏感，所以通常采用更多的位来表示绿色，而用较少的位来表示红色和蓝色。
		1.1.2 HSI图像
			★ HSI：色调——饱和度——强度。
				1.	颜色的色调就是在可见电磁波图中的位置对应的颜色。
				2.	颜色的饱和度取决于这种颜色中混合了多少灰色和白色。
				3.  颜色的强度是指这种颜色的亮度。
	1.2 小结
第2章  一个测试应用
	2.1 图像类的设计
	2.2 缩略类
	2.3 类的实现
		2.3.1 图像类
			★ 尽可能创建正交函数。例如，如果类中包含一个open()函数，就应该有一个close函数。
			★ 构造函数应该把所有数据成员初始化为默认状态。
			★ 最好使用系统提供的memcpy()或std::copy()函数，一般自己很难编写一个更快的函数。
		2.3.2 缩略类
			★ 除特别小的对象外，不要在头文件中定义构造函数和析构函数。这些函数被频繁修改，在某些平台上，把它们定义为内联函数会增加内存需求。
			★ 不要在函数中掺杂或混淆坐标系，否则会显著增加bug的产生。
	2.4 小结
第3章  设计技术
	3.1 内存分配
		3.1.1 内存分配对象的必要性
		3.1.2 内存分配对象的需求
		3.1.3 模板入门
		3.1.4 类图中使用的记法
		3.1.5 内存分配对象的类层次
	3.2 原型
		3.2.1 为什么建立原型
		3.2.2 常见顾虑
		3.2.3 图像框架的原型建立策略
		3.2.4 原型1：简单图像对象
		3.2.5 原型2：模板图像对象
		3.2.6 原型3：从图像对象中分离存储
	3.3 小结
第4章  设计构思
	4.1 编码原则
		4.1.1 修改现有的软件
		4.1.2 命名约定
		4.1.3 格式缩进
		4.1.4 注释
		4.1.5 头文件问题
		4.1.6 限制
	4.2 可重用代码
	4.3 调试支持设计
		4.3.1 创建调用调试流
		4.3.2 创建汇点
		4.3.3 将汇点连接至流
		4.3.4 控制调试输出
		4.3.5 通过对象注册表间接访问对象
	4.4 小结
第5章  系统构思
	5.1 多线程和多进程设计
		5.1.1 线程
		5.1.2 线程同步
		5.1.3 进程
	5.2 异常处理
		5.2.1 设计自己的异常框架
		5.2.2 避免异常滥用
		5.2.3 使用断言 
	5.3 编译时与运行时问题
		5.3.1 编译器问题
		5.3.2 运行时问题
		5.3.3 模板特殊化
	5.4 国际化编码
		5.4.1 Unicode
		5.4.2 一个简单的字符串资源管理器
		5.4.3 在文件中存储字符串及从文件中恢复字符串
		5.4.4 另一种字符串处理方法
		5.4.5 本地化环境
	5.5 小结
第6章  实现构思
	6.1 图像组件的最终确定
		6.1.1 图像坐标
		6.1.2 图像存储
		6.1.3 像素类型
	6.2 图像类的最终确定
	6.3 增加全局图像函数
		6.3.1 复制一个图像
		6.3.2 处理单源图像
		6.3.3 双源图像处理
		6.3.4 使用领域操作符处理图像
		6.3.5 生成缩略图
	6.4 第三方软件接口的最终确定
	6.5 小结
第7章  测试与性能
	7.1 单元测试
		7.1.1 使用单元测试框架
		7.1.2 单元测试框架的设计
		7.1.3 扩展单元测试框架
	7.2 性能优化
		7.2.1 一般原则
		7.2.2 改进性能的13种方法
		7.2.3 特定于图像的改进
		7.2.4 代码计时的注意事项
	7.3 小结
第8章  高级主题
	8.1 内存问题
		8.1.1 写拷贝
		8.1.2 高速缓存问题
	8.2 语言构造问题
		8.2.1 关键字Explicit的使用
		8.2.2 const的使用
		8.2.3 传引用的使用
	8.3 扩展框架
		8.3.1 增加图像处理函数
		8.3.2 改善数字图像
	8.4 小结
附录A 有用的在线资源
	A.1 软件
	A.2 标准
附录B 光盘信息
	B.1 内容
	B.2 Framework
	B.3 Prototypes
	B.4 Utilities
		B.4.1 实用程序DebugView
		B.4.2 Intel C++ Compiler
	B.5 Delegates
		B.5.1 Intel集成性能原语
		B.5.2 JPEG
		B.5.3 TIFF