C++ 编程思想（Thinking in C++）
（第2版）

官方网站 
http://www.BruceEckel.com 、https://www.mindviewllc.com/ 。
http://www.MindView.net/ （已失效）。

第1卷 标准C++引导（Volume One:Introduction to Standard C++）
★★
作者：Bruce Eckel。

知识点
1. C++基础知识。
2. C++基础知识练习。
3. makefile文件的编写（3.11）。
4. 编程准则（附录B）。

代码
1.  书籍代码。
2.  练习代码。
3.  Thinking in C代码。

要点
1.  不能把默认参数作为一个标志去决定执行函数的哪一块。
    在这种情况下，就应该把函数成两个或多个重载的函数（7.6 小结）。
2.	头文件被包含的顺序是从“最特殊到最一般”。在本地目录中的任何头文件首先被包含，
	然后是我们自己的所有“工具”头文件，随后是第三方库头文件，接着是标准C++库头文件和C库头文件（附录A）。
3.	用数据成员表示值的变化，用虚函数表示行为的变化（附录B）。
4.	用值来抛出异常，用引用来捕获异常（附录B）。
5.	充分复用编译器的错误检查功能，用完全警告方式编译我们的全部代码，修改我们的代码，直到消除所有的警告为止（附录B）。
6.	宁可犯编译错误也不要犯运行错误（附录B）。
7.	建立一个用户定义的terminate()函数来记录引起异常的错误，然后释放系统资源，并退出程序（附录B）。
8.	如果一个析构函数调用了任何函数，这些函数都可能抛出异常。一个析构函数不能抛出异常。
	所以任何调用了其他函数的析构函数都应该捕获和管理它自己的异常（附录B）。
9.	不要重载全局new和delete，可以在类的基础上去重载它们（附录B）。

第2卷 实用编程技术（Volume Two:Practical Programming）
★★☆
作者：Bruce Eckel、Chuck Allison。
 
知识点
1.	C++标准库知识。
2.	C++练习。
3.	一个简单的单元测试框架（2.2）。
4.	设计模式（第10章）。
5.	并发（第11章）。
6.	依赖库ZThread。

代码
1.  书籍代码。

要点
1.	什么时候避免异常：（1）不要在异步事件中使用异常。（2）不要在处理简单错误的时候使用异常。
	（3）不要将异常用于程序的流程控制。（4）不要强迫自己使用异常。（5）新异常，老代码（1.9 在编译中使用异常）。
2.	只要能用，就做最简单的（10.15 小结）。