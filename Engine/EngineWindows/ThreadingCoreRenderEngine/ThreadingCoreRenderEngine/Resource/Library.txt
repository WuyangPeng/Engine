库

GSL（引擎直接关联）

1. 版本：3.1.0。
2. 官方网站：https://github.com/microsoft/GSL。
3. git地址：https://github.com/microsoft/GSL.git。

CppCoreGuidelines（引擎直接关联）

1. 官方网站：https://github.com/isocpp/CppCoreGuidelines。
2. git地址：https://github.com/isocpp/CppCoreGuidelines.git。

boost（引擎直接关联）

1. 版本：1.73.0。
2. 官方网站：http://www.boost.org/。
3. 编译指令：
  （1）运行bootstrap。
  （2）运行b2 --toolset=msvc-10.0（特定版本）
           b2（最新版本）	
  （3）由于链接context库需要，使用选项asmflags=\safeseh。

stlsoft（引擎直接关联）

1. 版本：1.10.1-beta16。
2. 官方网站：http://www.stlsoft.org/。
3. 文件stlsoft.h（在stlsoft下）
   在732行改成
   # elif (_MSC_VER < 2000)
   #  define STLSOFT_COMPILER_VERSION_STRING       "Visual C++ 14.1x"

ACE（引擎通过宏NETWORK_USE_ACE关联）

1. 版本：6.5.10。
2. 官方网站：http://download.dre.vanderbilt.edu/、 http://www.dre.vanderbilt.edu/~schmidt/ACE.html。
3. 在ace目录下增加文件config.h包含正确的config文件。
   #ifndef ACE_CONFIG_H
   #define ACE_CONFIG_H

       #include "config-win32.h"

   #endif /* ACE_CONFIG_H */
   可使用ACE下的批处理文件CopyACEConfig执行。
4. 编译好x64版本后，手动将ACE\ACE_wrappers\lib下文件复制到ACE\ACE_wrappers\lib\X64，
   然后再编译Win32版本，手动将ACE\ACE_wrappers\lib下文件复制到ACE\ACE_wrappers\lib\Win32。
   可使用ACE下的批处理文件CopyACEWin32和CopyACEX64执行。
5. 编译release的Win32版本和x64版本时，需要先执行另一个版本的工程清理。

openssl（引擎通过宏NETWORK_USE_OPENSSL关联）

1. 版本：1.1.1g。
2. 官方网站：https://www.openssl.org/。
3. 下载并安装 ActivePerl。下载地址：http://www.activestate.com/activeperl/downloads 
4. 打开命令提示符，定位到 ($Perl64)\eg 目录，执行 perl example.pl，
   若提示 Hello from ActivePerl! 则说明 Perl 安装成功。
5. 下载并安装 Nasm 汇编器，并将($NASM)\目录添加到系统环境变量 Path 中。
   下载地址：http://www.nasm.us/ 。
6. 通过管理员身份运行VS，并打开命令提示符，定位至 ($openssl)目录
7. 输入perl Configure VC-WIN32 --debug --prefix=($openssl)\Win32\Debug（编译debug版），
   perl Configure VC-WIN32 --prefix=($openssl)\Win32\Release（编译release版本），    
   会出现错误，可忽略。
8. 编译X64，转到目录Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build下运行vcvars64.bat，
   然后输入 perl Configure VC-WIN64A --debug --prefix=($openssl)\X64\Debug（编译debug版）。
   perl Configure VC-WIN64A --prefix=($openssl)\X64\Release（编译release版）。    
9. 编译四个版本中需要执行 nmake clean，再输入perl语句。然后
   执行 nmake、nmake test、nmake install。

mysql （引擎通过宏DATABASE_USE_MYSQL_C_API关联）
1.  版本：8.0.20。
2.  官方网站：https://www.mysql.com/。
3.  编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。
4.  Windows.cmake 66行FATAL_ERROR改成WARNING。
5.  定义正确的BOOST_INCLUDE_DIR到($boost)。
6.  boost.cmake 41行、300行、302行、310行改成当前使用的boost库版本。
7.  定义正确的OPENSSL_ROOT_DIR到($openssl)，需要链接对应版本的openssl。 
8.  Win32版本的mysqld.vcxproj工程文件x64改成x86。
9.  sql_locale.cc、test_string_service_charset.cc、sql_commands_help_data.h另存为ANSI编码。
10. 文件crc32.cc（在storage\innobase\ut下）
    第227行开始改成
	#if defined(_M_X64)  
		crc_64bit = _mm_crc32_u64(crc_64bit, data);   
	#else // !_M_X64 
		ulint len = 8;  
		const byte* buf = reinterpret_cast<byte*>(&data);
		while (len > 0 && (reinterpret_cast<uintptr_t>(buf) & 7) != 0) {   
			ut_crc32_8_hw(&crc_64bit, &buf, &len); 
		}
	#endif /* defined (_M_X64) */
11. 文件tables_contained_in.h（在include下）
    第67行开始改成
    #if defined(_M_X64)  
		_BitScanForward64(&idx, m_bits_left);  
	#else // !_M_X64 
		_BitScanForward(&idx, m_bits_left);
	#endif /* defined (_M_X64) */
11. 将目录include\boost_1_V_0中的V改成目前的boost库版本。
12. 由于boost库版本不一致，导致编译不过时，使用mysql指定的boost版本，
	需要旧版本的boost头文件复制到include\boost_1_V_0下，然后用include\boost_1_V_0原来的文件进行覆盖。
 
mysql connector c++（引擎通过宏DATABASE_USE_MYSQL_CPP_CONNECTOR关联）
1. 版本：8.0.20。
2. 官方网站：https://www.mysql.com/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。
4. 设置正确的WITH_SSL（原为system）指向对应版本的($openssl)，如编译的是x64版本，需要指向x64的openssl。
   
protobuf（引擎通过宏NETWORK_USE_PROTOBUF关联）
1. 版本：3.12.3。
2. 官方网站：https://github.com/protocolbuffers/protobuf。
3. git地址：https://github.com/protocolbuffers/protobuf.git。
4. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

freeglut（引擎通过宏SYSTEM_USE_GLUT关联）

1. 版本：3.2.1。
2. 官方网站：http://freeglut.sourceforge.net/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

wxWidgets（引擎通过宏USER_INTERFACE_USE_WX_WIDGETS关联）

1. 版本：3.1.3。
2. 官方网站：http://www.wxwidgets.org/。

opencv（引擎通过宏IMAGICS_USE_OPENCV关联）

1. 版本：4.3.0。
2. 官方网站：https://opencv.org/
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

Visual Leak Detector（引擎Debug版本直接关联）

1. 版本：2.5.1。
2. 官方网站：https://archive.codeplex.com/?p=vld。
3. git地址：https://github.com/KindDragon/vld.git。
4. vld.cpp，976行去掉对高版本的VS的编译限制。
5. Allocs.cpp第35行，testsuite.cpp第74行增加 
   #elif _MSC_VER > 1900	// VS 2017
   #define CRTDLLNAME   _T("ucrtbased.dll")
6. Allocs.cpp第60行，testsuite.cpp第98行增加 
   #elif _MSC_VER > 1900	// VS 2017
   #define CRTDLLNAME   _T("ucrtbase.dll") 
7. 工程vld_main_test增加宏_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING。
8. src\tests下Common.props第18行改成v142。

OpenAL Soft（引擎通过宏SOUND_EFFECT_USE_OPENAL关联）
1. 版本：1.20.1。
2. 官方网站：https://www.openal-soft.org/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

zlib（引擎直接关联）
1. 版本：1.2.11。
2. 官方网站：http://www.zlib.net/
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

freetype（引擎直接关联）
1. 版本：2.10.2。
2. 官方网站：https://www.freetype.org/
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

lua（引擎通过宏SCRIPT_USE_LUA关联）
1. 版本：5.4.0。
2. 官方网站：http://www.lua.org/
3. 在build下建立VS工程，lua，静态库。包含以下文件：lapi.c lcode.c lctype.c ldebug.c ldo.c ldump.c 
   lfunc.c lgc.c llex.c lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c ltm.c 
   lundump.c lvm.c lzio.c lauxlib.c lbaselib.c lbitlib.c lcorolib.c ldblib.c liolib.c lmathlib.c 
   loslib.c lstrlib.c ltablib.c lutf8lib.c loadlib.c linit.c。（除去luac.c和lua.c的所有文件）。
   输出目录改成：$(SolutionDir)$(Platform)\$(Configuration)\。
4. 建立VS工程，程序interpreter（包含lua.c）和compiler（包含luac.c）。
   输出目录改成：$(SolutionDir)$(Platform)\$(Configuration)\。
   增加附加库目录：$(SolutionDir)$(Platform)\$(Configuration)\。附加依赖项增加：lua.lib。

perl（引擎通过宏SCRIPT_USE_PERL关联）
1. 版本：5.32.0。
2. 官方网站：https://www.perl.org/
3. 修改win32下的Makefile文件，134行去除注释。
4. 修改win32下的Makefile文件，23行的INST_DRV设置成($perl)。
5. 运行VS，并打开命令提示符，定位至 ($perl)/Win32目录
6. 编译Win32的debug版，修改win32下的Makefile文件，30行、163行去除注释，24行设置成$(INST_DRV)\BuildWin32\Debug。
7. 编译Win32的release版，修改win32下的Makefile文件，30行去除注释，163行注释，24行设置成$(INST_DRV)\BuildWin32\Release。
8. 编译X64，转到目录Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build下运行vcvars64.bat。
9. 编译X64的debug版，修改win32下的Makefile文件，163行去除注释，30行注释，24行设置成$(INST_DRV)\BuildX64\Debug。
10.编译X64的release版，修改win32下的Makefile文件，30行、163行注释，24行设置成$(INST_DRV)\BuildX64\Release。
11.在Win32目录层级下执行命令nmake。
12.编译四个版本中需要执行nmake clean，然后再执行nmake、nmake install。
13.编译Win32和X64版本中需要重新使用原版的perl编译。

Pantheios（引擎通过宏CORE_TOOLS_USE_PANTHEIOS关联）
1. 版本：1.0.1。
2. 官方网站：http://www.pantheios.org/
3. 修改build\vc16.x64和build\vc16下makefile文件，
   第77行改成PROJ_LIB_DIR =	$(PROJ_BASE_DIR)\X64\lib和PROJ_LIB_DIR = $(PROJ_BASE_DIR)\Win32\lib。
   注释掉第687行和700行（-WX警告视为错误）。
   23行下增加
   STLSOFT = ($stlsoft)
   ACE = ($ACE)
4. 注释pantheios.h第196行，因为无法下载到1.10.1 beta 20版本的stlsoft。
5. test\component\test.component.bec.fprintf下的文件test.component.bec.fprintf.cpp注释掉第182行。
6. 运行VS，并打开命令提示符，定位至build\vc16.x64和build\vc16目录，执行nmake。
7. 编译X64，转到目录Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build下运行vcvars64.bat。
8. 不要执行nmake clean。
 
Openrj（引擎通过宏CORE_TOOLS_USE_OPENRJ关联）
1. 版本：1.6.4。
2. 官方网站：http://www.openrj.org/
3. 修改build\vc8下makefile文件，
   第26行改成COMP_TAG = vc16。
   第44行改成PROJ_LIB_DIR = $(PROJ_BASE_DIR)\Win32\lib和PROJ_LIB_DIR = $(PROJ_BASE_DIR)\X64\lib。
   注释掉第110行和115行（-WX警告视为错误）。
   25行增加STLSOFT = ($stlsoft)。
   编译X64，27行下增加
   LD_ARGS = -machine:x64
   ARCH_TAG = .x64。
4. 运行VS，并打开命令提示符，定位至build\vc8目录，执行nmake。
5. 不要执行nmake clean。

ogg（引擎通过宏SOUND_EFFECT_USE_OGG关联）
1. 版本：1.3.4。
2. 官方网站：https://www.xiph.org/downloads/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。

vorbis（引擎通过宏SOUND_EFFECT_USE_VORBIS关联）
1. 版本：1.3.7。
2. 官方网站：https://www.xiph.org/downloads/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。
4. 定义正确的OGG_INCLUDE_DIR到($ogg)/include。 
5. 定义正确的OGG_LIBRARY到($ogg)/BuildX64/Release/ogg.lib和($ogg)/BuildWin32/Release/ogg.lib。  

FLTK（引擎通过宏USER_INTERFACE_USE_FLTK关联）
1. 版本：1.3.5
2. 官方网站：https://www.fltk.org/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。
4. 文件Fl_Device.cxx：
   第84行改成
   static
   #if defined(__APPLE__)
		Fl_Quartz_Graphics_Driver
   #elif defined(WIN32)
		Fl_GDI_Graphics_Driver
   #else
		Fl_Xlib_Graphics_Driver
   #endif
		driver;
   static Fl_Display_Device display(&driver);
   return &display;
   以消除內存泄露。 
   
chipmunk2D physics（引擎通过宏PHYSICS_USE_CHIPMUNK2D关联）
1. 版本：7.0.3。
2. 官方网站：http://chipmunk-physics.net/。
3. 编译方式：CMake。Win32版本建立在BuildWin32下，x64版本建立在BuildX64下。
4. chipmunk_demos的C++语言标准改成：std:c++latest。
5. ChipmunkDebugDraw.c
   第44行的(RGBA8)改成RGBA8。
   注释第63行到150行。 
   第170行到175行，第183行到186行，206行到213行，267行到270行的(Vertex)改成Vertex。
   第171行和182行改成
   Index index[] = { 0, 1, 2, 0, 2, 3 };
   Vertex *vertexes = push_vertexes(4, index, 6);
6. ChipmunkDemo.c   
   第353行到第355行改成
   sg_pass_action action{};
   action.colors[0] = {.action = SG_ACTION_CLEAR, .val = {0x07/255.0f, 0x36/255.0f, 0x42/255.0f}};
   第629行到第638行改成
   return sapp_desc{
			.init_cb = Init,
			.frame_cb = Display,
			.cleanup_cb = Cleanup,
			.event_cb = Event,			
			.width = 1024,
			.height = 768,
			.high_dpi = true,
			.window_title = "Chipmunk2D",
		};
7. ChipmunkDemoTextSupport.c
   注释第69行到165行。
   第206行到209行的(Vertex)改成Vertex。