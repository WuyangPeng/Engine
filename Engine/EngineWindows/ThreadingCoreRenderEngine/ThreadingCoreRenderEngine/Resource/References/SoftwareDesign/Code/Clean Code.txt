代码整洁之道 （Clean Code）

实用程序员网站：
https://pragprog.com/

开源测试工具：
http://www.fitnesse.org/ 、https://junit.org/junit5/。

★★★☆
作者：Robert C.Martin 
其他书籍：《程序设计的模式语言·卷三》、《敏捷软件开发：原则、模式与实践》、《代码整洁之道：程序员的职业素养》、
《敏捷整洁之道：回归本源》、《架构整洁之道》

知识点 
1.	整洁代码操作实践。

要点
1.	细节之中自有天地，整洁成就卓越代码。（封面）
2.	代码质量与其整洁度成正比。（内容提要）
3.	稍后等于永不。（1.2 糟糕的代码）
4.	让营地比你来时更干净。（1.6 童子军军规）
5.	废话都是冗余。Variable一词永远不就当出现在变量名中。
	Table一词永远不应当出现在表名中。（2.4 做有意义的区分）
6.	if语句、else语句、while语句等，其中的代码块应该只有一行。
	该行大抵应该是一个函数调用语句。（3.1 短小）

第1章 整洁代码
	★	将需求明确到机器可以执行的程度，就是编程要做的事。而这种规约正是代码。
	★	归置良好的需求就像代码一样正式，也能作为代码的可执行测试来使用。
	★	花点时间保持代码整洁不但有关效率，还有关生存。
	★	制造混乱无助于赶上期限。
	★	整洁的代码只做好一件事。
	★	整洁的代码便于其他人加以增补。
	★	简单代码，依其重要顺序：
		1.	能通过所有测试。
		2.	没有重复代码。
		3.	体现系统中的全部设计理念。
		4.	包括尽量少的实体，比如类、方法、函数等。
	★	如果每个例程都让你感到深合已意，那就是整洁代码。
	★	漂亮的代码让编程语言像是专为解决那个问题而存在。
第2章 有意义的命名
	★	取个好名字的几条简单规则：
		1.	名副其实。
		2.	避免误导。
		3.	做有意义的区分。
		4.	使用读得出来的名称。
		5.	使用可搜索的名称。
		6.	避免使用编码。
		7.	避免思维映射。
		8.	别扮可爱。
		9.	每个概念对应一个词。
		10.	别用双关语。
		11.	使用解决方案领域名称。
		12.	使用源自所涉问题领域的名称。
		13.	添加有意义的语境。
		14.	不要添加没用的语境。
	★	Info和Data就像a、an和the个样，是意义含混的废话。
	★	名称长短应与其作用域大小相对应。
	★	专业程序员了解，明确是王道。
	★	言到意到。意到言到。
第3章 函数
	★	函数的第一规则是要短小。第二条规则是还要更短小。
	★	函数应该做一件事。做好这件事。只做一件事。
	★	长而具有描述性的名称，要比短而令人费解的名称好。
		长而具有描述性的名称，要比描述性的长注释好。
	★	标识参数丑陋不堪。向函数传入布尔值简直就是骇人听闻的作法。
	★	普遍而言，应避免使用输出参数。如果函数必须要修改某种状态，就修改所属对象的状态吧。
	★	分隔指令与询问。
	★	最好把try和catch代码块的主体部分抽离出来，另外形成函数。
第4章 注释