$Copyright$

#include "$NameSpaceName$Container.h"

$ContainerInclude$#include "CoreTools/CharacterString/StringConversion.h"
#include "CoreTools/Helper/ClassInvariant/UserClassInvariantMacro.h"
#include "CoreTools/Helper/ExceptionMacro.h"
#include "CoreTools/TextParsing/CSV/CSVContent.h"

using namespace std::literals;

$NameSpaceName$::$NameSpaceName$Container::$NameSpaceName$Container(const String& directory)
    : $ContainerMember${
    Parsing(directory);
    Verify();

    USER_SELF_CLASS_IS_VALID_1;
}

void $NameSpaceName$::$NameSpaceName$Container::Parsing(const String& directory)
{
    for (const std::filesystem::path path{ directory };
         const auto& inputPath : std::filesystem::directory_iterator(path))
    {
        Parsing(inputPath);
    }
}

void $NameSpaceName$::$NameSpaceName$Container::Parsing(const std::filesystem::directory_entry& inputPath)
{
    const auto fileName = CoreTools::StringConversion::FileSystemConversionStandard(inputPath.path().native());

    if (fileName.find(SYSTEM_TEXT(".csv"s)) != (fileName.size() - 4))
    {
        return;
    }

    const CoreTools::CSVContent csvContent{ fileName };

    const auto csvClassName = csvContent.GetCSVClassName();

$SetContainer$}

void $NameSpaceName$::$NameSpaceName$Container::Verify() const
{
$VerifyContainer$    LOG_SINGLETON_ENGINE_APPENDER(Info, User, SYSTEM_TEXT("$NameSpaceName$Ω· ¯‘ÿ»Î°≠°≠"));
}

#ifdef OPEN_CLASS_INVARIANT

bool $NameSpaceName$::$NameSpaceName$Container::IsValid() const noexcept
{
    if ($ContainerNotEqualNullptr$)
    {
        return true;
    }
    else
    {
        return false;
    }
}

#endif  // OPEN_CLASS_INVARIANT

$GetContainerDefine$