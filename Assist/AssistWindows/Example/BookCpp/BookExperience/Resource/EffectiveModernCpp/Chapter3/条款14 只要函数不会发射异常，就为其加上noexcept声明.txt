条款14 只要函数不会发射异常，就为其加上noexcept声明
	★	C++98中的异常规格还是不要招惹为妙。
	★	关于函数发射异常这件事，真正重要的信息是它到底会不会发射。
	★	函数是否带有noexcept声明，就和成员函数是否带有const声明是同等重要的信息。
	★	对不会发射异常的函数应用noexcept声明还有一个动机，那就是它可以让编译器生成更好的目标代码。
	★	开解调用栈，和可能开解调用栈，这一点点区别对于代码生成造成的影响之大可能出乎人们的意料。
		在带有noexcept声明的函数中，优化器不需要在异常传出函数的前提下，将执行期栈保持在可开解状态；
		也不需要在异常溢出函数的前提下，保证所有其中的对象以其析构顺序的逆序完成析构。
	★	能移动则移动，必须复制才复制。但是一个函数怎么能知道移动操作不会产生异常呢？看看这个操作是否带有noexcept声明即可。
	★	优化诚可贵，正确价更高。
	★	大多数函数都是异常中立的。此类函数自身不抛出异常，但它们调用的函数则可能会发射异常。
	★	默认地，内存释放函数和所有析构函数都隐式地具备noexcept性质。
	★	析构函数未隐式地具备noexcept性质的唯一场合，就是所在类中有数据成员的型别显式地将其析构函数声明为可能发射异常。（即为其加上noexcept(false)声明）
	★	库的设计师们才会区分宽松的和狭隘的契约，并且把noexcept声明保留给那些带有宽松契约的函数。
	★	noexcept的声明是函数接口的组成部分，这意味着调用方可能会对它有依赖。
	★	相对于不带noexcept声明的函数，带有noexcept声明的函数有更多机会得到优化。
	★	noexcept性质对于移动操作、swap、函数释放函数和析构函数最有价值。
	★	大多数函数都是异常中立的，不具备noexcept性质。