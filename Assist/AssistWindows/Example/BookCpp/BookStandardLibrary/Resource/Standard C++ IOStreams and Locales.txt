标准C++ 输入输出流与本地化（Standard C++ IOStreams and Locales）

☆
作者：Angelika Langer、Klaus Kreft

知识点 
1.	C++标准库基础知识。 

前言
原书序
	适合本书的读者
	关于标准
	致谢
读者指南
	本书的结构
	用户指南和组织结构
	参考指南的组织结构
	类示意图
	代码示例
第一部分 输入和输出流
	第1章 IO流基础
		1.1 输入与输出
			1.1.1 什么是输入输出流
			1.1.2 用IO流进行文本流IO的步骤
			1.1.3 IO流的层次
			1.1.4 IO流类中流的概念
			1.1.5 IO流类中的类
			1.1.6 IO流作为框架
		1.2 格式化输入/输出
			1.2.1 预定义的全局流
			1.2.2 输入输出运算符
			1.2.3 流的格式参数
			1.2.4 操纵符
			1.2.5 流的本地化
			1.2.6 有格式的输入与输出的比较
			1.2.7 格式输入的特性
		1.3 流状态
			1.3.1 流状态标志 
			1.3.2 测试流状态
			1.3.3 捕获流异常情况
			1.3.4 复位流状态
		1.4 文件输入与输出
			1.4.1 创建、打开、关闭和析构文件流对象
			1.4.2 打开方式
			1.4.3 双向文件流
		1.5 内存内部的输入/输出
			1.5.1 串流内容的获取和替换
			1.5.2 打开方式
		1.6 非格式化的输入/输出
			1.6.1 非格式化输入
			1.6.2 非格式化输出
		1.7 流的位置指针定位
			1.7.1 获取当前流位置指针
			1.7.2 改变流位置指针
		1.8 流的同步
			1.8.1 同步的方法
			1.8.2 预定义标准流的同步
	第2章 IO流的结构
		2.1 流 类
			2.1.1 类的继承关系
			2.1.2 流怎样管理流缓冲区
			2.1.3 流的拷贝和赋值
			2.1.4 流怎样管理locale
			2.1.5 流、流缓冲和locales间的合作
		2.2 流缓冲类
			2.2.1 类继承关系
			2.2.2 流缓冲区的概念
			2.2.3 串流缓冲 
			2.2.4 文件流缓冲
		2.3 字符类型和字符特性
			2.3.1 字符表示
			2.3.2 字符特性
			2.3.3 字符类型
		2.4 流的iterators和流缓冲的iterators
			2.4.1 标准库中iterator的概念
			2.4.2 流iterator
			2.4.3 流缓冲iterator
		2.5 增加的流存储空间和流回调函数
			2.5.1 增加的流存储空间
			2.5.2 流回调函数
	第3章 输入/输出流的高级用法 
		3.1 用户定义类型的输入输出
			3.1.1 插入函数和提取函数的定义
			3.1.2 第一种插入函数和提取函数
			3.1.3 改进
			3.1.4 改进后的插入函数和提取函数
			3.1.5 通用的插入函数和提取函数
			3.1.6 简单型设计与改进型设计的对比
		3.2 用户定义的操纵符
			3.2.1 不带参数的操纵符
			3.2.2 带参数的操纵符
		3.3 流的扩展功能	
			3.3.1 流保存私有操作：iword、pword和xalloc的使用
			3.3.2 通过派生建立新的流类
			3.3.3 两种解决方案——iword/pword与派生的比较
		3.4 增加流缓冲功能
			3.4.1 从流缓冲基类派生
			3.4.2 从具体流缓冲类派生
第二部分 国际化
	第4章 国际化和本地化
		4.1 国际化和本地化
		4.2 文化习俗
			4.2.1 语言
			4.2.2 数值
			4.2.3 货币
			4.2.4 时间和日期
			4.2.5 字、词的排序
			4.2.6 消息
			4.2.7 字符编码
	第5章 locale
		5.1 locale对象的建立
			5.1.1 命名locale对象
			5.1.2 组合式locale
			5.1.3 全局locale对象
		5.2 从locale对象获得facet
			5.2.1 has_facet()函数
			5.2.2 use_facet()函数
	第6章 标准facet
		6.1 与字母表和语言相关的facet
			6.1.1 字符分类
			6.1.2 串整理
			6.1.3 代码转换
			6.1.4 消息目录
		6.2 facet的格式化和解析
			6.2.1 数值和布尔值
			6.2.2 货币数值
			6.2.3 日期和时间值
		6.3 locale中标准facet的分组
			6.3.1 标准facet族
			6.3.2 locale分类
			6.3.3 图示：facet和分类
		6.4 标准facet的高级用法 
			6.4.1 通过流间接使用facet
			6.4.2 通过locale使用facet
			6.4.3 独立于locale对象的facet的直接使用
	第7章 locale的框架体系结构
		7.1 类的层次结构
		7.2 在locale中识别与查找facet
			7.2.1 facet的识别
			7.2.2 facet的查找
		7.3 locale中facet的内存管理
			7.3.1 facet引用计数器
			7.3.2 locale中facet的不变性
	第8章 用户用定义facet
		8.1 将用户自定义的facet加入已有的facet族
		8.2 定义新的facet族
第三部分 参考指南
	1. LOCALE
		header file<locale>
		全局函数
		codecvt<internT,externT,stateT>
		codecvt_base
		codecvt_byname<internT,externT,stateT>
		collate
		collate<charT>
		collate_byname<charT>
		ctype<charT>
		ctype<char>
		ctype_base
		ctype_byname<charT>
		locale
		messages<charT>
		message_base
		message_byname<charT>
		money_base
		money_get<charT,InputIterator>
		moneypunct<charT,Inter>
		moneypunct_byname<charT,Inter>
		money_put<charT,outputIterator>
		num_get<charT,InputIterator>
		numpunct<charT>
		numpunct_byname<charT>
		num_put<charT,OutputIterator>
		time_base
		time_get<charT,InputIterator>
		time_get_byname<charT,InputIterator>
		time_put<charT,OutputIterator>
		time_put_byname<charT,OutputIterator>
		time_base
		tm
	2. CHARACTER TRAITS
		header file<string>
		char_traits<charT>
		char_traits<char>
		char_traits<wchar_t>
	3. IOSTREAMS
		header file<iosfwd>
		header file<iostream>
		header file<ios>
		header file<streambuf>
		header file<istream>
		header file<ostream>
		header file<iomanip>
		header file<sstream>
		header file<fstream>
		global type definitions
		global objects
		basic_filebuf<charT,traits>
		basic_fstream<charT,traits>
		basic_ifstream<charT,traits>
		basic_ios<charT,traits>
		basic_iostream<charT,traits>
		basic_istream<charT,traits>
		basic_istringstream<charT,traits,Allocator>
		basic_ofstream<charT,traits>
		basic_ostream<charT,traits>
		basic_ostringstream<charT,traits,Allocator>
		basic_streambuf<charT,traits>
		basic_stringbuf<charT,traits,Allocator>
		basic_stringstream<charT,traits,Allocator>
		fpos<stateT>
		ios_base
		manipulators
	4. STREAM ITERATORS
		header file<iterator>
		istreambuf_iterator<charT,traits>
		istream_iterator<T,charT,traits,Distance>
		iterator<Category,Distance,Pointer,Reference>
		iterator category tags
		ostreambuf_iterator<charT,traits>
		ostream_iterator<T,charT,traits,Distace>
	5. OTHER I/O OPERATIONS
		biset<N>
		complex<T>
		basic_string<charT,traits,Allocator>
附录
	附录A 数字量与bool值的解析与抽取
		A.1 解析数字量
		A.2 解析bool值
		A.3 转换说明符与长度变量修饰符
	附录B 数字量与BOOL值的格式化
		B.1 数字量的格式化
		B.2 bool值的格式化
		B.3 转换说明符、限制符与长度变量修饰符
	附录C Strftime()转换说明符
	附录D C stdio与C++输入输出流的对应关系
		D.1 文件打开模式
		D.2 流状态
	附录E 经典IO流和标准IO流之间的差异
		E.1 IO流类的模板化
		E.2 分区基本类ios
		E.3 指示错误
		E.4 国际化IO流
		E.5 消除_withassign类
		E.6 消除文件描述符
		E.7 串流：用stringstream替换strstream
		E.8 对流缓冲器类的改变
		E.9 次要的变换
	附录F C与C++ Locales的关系
		F.1 C与C++ Locales的类型
		F.2 C和C++的全球Locales
	附录G 新C++的特性与习惯用语
		G.1 位掩码类型
		G.2 POD——简单的旧数据
		G.3 显式构造
		G.4 模板说明
		G.5 默认的模板自变量
		G.6 显式模板自变量说明
		G.7 typename关键词
		G.8 动态的引用 
		G.9 函数try块
		G.10 标准的异常情况
		G.11 数的限制
		G.12 C++串