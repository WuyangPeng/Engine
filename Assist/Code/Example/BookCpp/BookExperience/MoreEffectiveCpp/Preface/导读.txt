导读

对C++ 程式员而言，日子似乎有点过於急促。虽然只商业化不到10 年，C++ 却俨然成为几乎所有主要计算环境的系统程式语言霸主。面临程式设计方面极具挑战性问题的公司和个人，不断投入C++ 的怀抱。而那些尚未使用C++ 的人，最常被询问的一个问题则是：你打算什么时候开始用C++。C++ 标准化已经完成，其所附带之标准程式库幅员广大，不仅涵盖C 函式库，也使之相形见绌。这么一个大型程式库使我们有可能在不必牺牲移植性的情况下，或是在不必从头撰写常用演算法和资料结构的情况下，完成琳琅满目的各种复杂程式。C++ 编译器的数量不断增加，它们所供应的语言性质不断扩充，它们所产生的码品质也不断改善。C++ 开发工具和开发环境愈来愈丰富，威力愈来愈强大，稳健强固（robust）的程度愈来愈高。商业化程式库几乎能够满足各个应用领域中的写码需求。

一旦语言进入成熟期，而我们对它的使用经验也愈来愈多，我们所需要的资讯也就随之改变。1990 年人们想知道C++ 是什么东西。到了1992 年，他们想知道如何运用它。如今C++ 程式员问的问题更高级：我如何能够设计出适应未来需求的软体？我如何能够改善程式码的效率而不折损正确性和易用性？我如何能够实作出语言未能直接支援的精巧机能？

这本书中我要回答这些问题，以及其他许多类似问题。

本书告诉你如何更具实效地设计并实作C++ 软体：让它行为更正确；面对异常情况时更稳健强固；更有效率；更具移植性；将语言特性发挥得更好；更优雅地调整适应；在「混合语言」开发环境中运作更好；更容易被正确运用；更不容易被误用。简单地说就是如何让软体更好。

本书内容分为35 个条款。每个条款都在特定主题上精简摘要出C++ 程式设计社群所累积的智慧。大部份条款以准则的型式呈现，附随的说明则阐述这条准则为什么存在，如果不遵循会发生什么後果，以及什么情况下可以合理违反该准则。所有条款被我分为数大类。某些条款关心特定的语言性质，特别是你可能罕有使用经验的一些新性质。例如条款9~15 专注於exceptions（就像Tom Cargill, Jack Reeves, Herb Sutter 所发表的那些杂志文章一样）。其他条款解释如何结合语言的不同特性以达成更高阶目标。例如条款25~31 描述如何限制物件的个数或诞生地点，如何根据一个以上的物件型别产生出类似虚拟函式的东西，如何产生smart pointers 等等。其他条款解决更广泛的题目。条款16~24 专注於效率上的议题。不论哪一条款，提供的都是与其主题相关且意义重大的作法。在More Effective C++一书中你将学习到如何更实效更精锐地使用C++。大部份C++ 教科书中对语言性质的大量描述，只能算是本书的一个背景资讯而已。

这种处理方式意味，你应该在阅读本书之前便熟悉C++。我假设你已了解类别（classes）、保护层级（protection levels）、虚拟函式、非虚拟函式，我也假设你已通晓templates 和exceptions 背後的概念。我并不期望你是一位语言专家，所以涉及较罕见的C++ 特性时，我会进一步做解释。