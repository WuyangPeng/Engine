///	Copyright (c) 2010-2021
///	Threading Core Render Engine
///
///	作者：彭武阳，彭晔恩，彭晔泽
///	联系作者：94458936@qq.com
///
///	标准：std:c++17
///	引擎版本：0.8.0.0 (2021/12/20 22:11)

#include "CoreTools/CoreToolsExport.h"

#include "DocumentImpl.h"
#include "CoreTools/CharacterString/StringConversion.h"
#include "CoreTools/Contract/Flags/DisableNotThrowFlags.h"
#include "CoreTools/FileManager/WriteFileManager.h"
#include "CoreTools/Helper/ClassInvariant/CoreToolsClassInvariantMacro.h"
#include "CoreTools/Helper/MemberFunctionMacro.h"
#include "CoreTools/TextParsing/SimpleCSV/AppProperties.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandAddSharedStrings.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandAddWorksheet.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandCloneSheet.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandDeleteSheet.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandResetCalcChain.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandSetSheetIndex.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/CommandSetSheetName.h"
#include "CoreTools/TextParsing/SimpleCSV/CommandQuery/QuerySheetName.h"
#include "CoreTools/TextParsing/SimpleCSV/ContentItem.h"
#include "CoreTools/TextParsing/SimpleCSV/ContentTypes.h"
#include "CoreTools/TextParsing/SimpleCSV/Flags/CSVExceptionFlags.h"
#include "CoreTools/TextParsing/SimpleCSV/Flags/PropertyFlags.h"
#include "CoreTools/TextParsing/SimpleCSV/Flags/RelationshipFlags.h"
#include "CoreTools/TextParsing/SimpleCSV/Properties.h"
#include "CoreTools/TextParsing/SimpleCSV/Relationships.h"
#include "CoreTools/TextParsing/SimpleCSV/SharedStrings.h"
#include "CoreTools/TextParsing/SimpleCSV/SimpleCSVException.h"
#include "CoreTools/TextParsing/SimpleCSV/XmlData.h"

#include <array>

using std::array;
using std::string;
using namespace std::literals;

namespace
{
    constexpr auto templateSize = 7714;
    constexpr std::array<uint8_t, templateSize> templateData{
        0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XB5, 0X55, 0X30, 0X23, 0XF4, 0X00, 0X00, 0X00,
        0X4C, 0X02, 0X00, 0X00, 0X0B, 0X00, 0X08, 0X02, 0X5F, 0X72, 0X65, 0X6C, 0X73, 0X2F, 0X2E, 0X72, 0X65, 0X6C, 0X73, 0X20, 0XA2, 0X04,
        0X02, 0X28, 0XA0, 0X00, 0X02, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XAC, 0X92, 0X4D, 0X4F, 0XC3, 0X30, 0X0C, 0X86, 0XEF, 0X48, 0XFC,
        0X87, 0XC8, 0XF7, 0XD5, 0XDD, 0X90, 0X10, 0X42, 0X4B, 0X77, 0X41, 0X48, 0XBB, 0X21, 0X54, 0X7E, 0X80, 0X49, 0XDC, 0X0F, 0XB5, 0X8D,
        0XA3, 0X24, 0X1B, 0XDD, 0XBF, 0X27, 0X1C, 0X10, 0X54, 0X1A, 0X83, 0X03, 0X47, 0X7F, 0XBD, 0X7E, 0XFC, 0XCA, 0XDB, 0XDD, 0X3C, 0X8D,
        0XEA, 0XC8, 0X21, 0XF6, 0XE2, 0X34, 0XAC, 0X8B, 0X12, 0X14, 0X3B, 0X23, 0XB6, 0X77, 0XAD, 0X86, 0X97, 0XFA, 0X71, 0X75, 0X07, 0X2A,
        0X26, 0X72, 0X96, 0X46, 0X71, 0XAC, 0XE1, 0XC4, 0X11, 0X76, 0XD5, 0XF5, 0XD5, 0XF6, 0X99, 0X47, 0X4A, 0X79, 0X28, 0X76, 0XBD, 0X8F,
        0X2A, 0XAB, 0XB8, 0XA8, 0XA1, 0X4B, 0XC9, 0XDF, 0X23, 0X46, 0XD3, 0XF1, 0X44, 0XB1, 0X10, 0XCF, 0X2E, 0X57, 0X1A, 0X09, 0X13, 0XA5,
        0X1C, 0X86, 0X16, 0X3D, 0X99, 0X81, 0X5A, 0XC6, 0X4D, 0X59, 0XDE, 0X62, 0XF8, 0XAE, 0X01, 0XD5, 0X42, 0X53, 0XED, 0XAD, 0X86, 0XB0,
        0XB7, 0X37, 0XA0, 0XEA, 0X93, 0XCF, 0X9B, 0X7F, 0XD7, 0X96, 0XA6, 0XE9, 0X0D, 0X3F, 0X88, 0X39, 0X4C, 0XEC, 0XD2, 0X99, 0X15, 0XC8,
        0X73, 0X62, 0X67, 0XD9, 0XAE, 0X7C, 0XC8, 0X6C, 0X21, 0XF5, 0XF9, 0X1A, 0X55, 0X53, 0X68, 0X39, 0X69, 0XB0, 0X62, 0X9E, 0X72, 0X3A,
        0X22, 0X79, 0X5F, 0X64, 0X6C, 0XC0, 0XF3, 0X44, 0X9B, 0XBF, 0X13, 0XFD, 0X7C, 0X2D, 0X4E, 0X9C, 0XC8, 0X52, 0X22, 0X34, 0X12, 0XF8,
        0X32, 0XCF, 0X47, 0XC7, 0X25, 0XA0, 0XF5, 0X7F, 0X5A, 0XB4, 0X34, 0XF1, 0XCB, 0X9D, 0X79, 0XC4, 0X37, 0X09, 0XC3, 0XAB, 0XC8, 0XF0,
        0XC9, 0X82, 0X8B, 0X1F, 0XA8, 0XDE, 0X01, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X06, 0X00, 0X08,
        0X00, 0X00, 0X00, 0X21, 0X00, 0X47, 0X88, 0XBC, 0XE2, 0X5D, 0X03, 0X00, 0X00, 0X35, 0X08, 0X00, 0X00, 0X0F, 0X00, 0X00, 0X00, 0X78,
        0X6C, 0X2F, 0X77, 0X6F, 0X72, 0X6B, 0X62, 0X6F, 0X6F, 0X6B, 0X2E, 0X78, 0X6D, 0X6C, 0XAC, 0X55, 0X6D, 0X6F, 0XA3, 0X38, 0X10, 0XFE,
        0X7E, 0XD2, 0XFD, 0X07, 0XC4, 0X77, 0X8A, 0X4D, 0XCC, 0X4B, 0X50, 0XE9, 0X2A, 0X90, 0XA0, 0XAB, 0XB4, 0X5D, 0X55, 0X6D, 0XB6, 0XFB,
        0XF1, 0XE4, 0X80, 0X29, 0X56, 0X01, 0X73, 0XC6, 0X34, 0XA9, 0XAA, 0XFD, 0XEF, 0X3B, 0X76, 0X42, 0XDA, 0X6E, 0X57, 0XA7, 0X5C, 0XF7,
        0XAA, 0XD4, 0XC6, 0X9E, 0XE1, 0XF1, 0X33, 0X33, 0XCF, 0X98, 0XF3, 0X4F, 0XBB, 0XB6, 0XB1, 0X1E, 0X99, 0X1C, 0XB8, 0XE8, 0X12, 0X1B,
        0X9F, 0X21, 0XDB, 0X62, 0X5D, 0X21, 0X4A, 0XDE, 0XDD, 0X27, 0XF6, 0XD7, 0X75, 0XEE, 0X44, 0XB6, 0X35, 0X28, 0XDA, 0X95, 0XB4, 0X11,
        0X1D, 0X4B, 0XEC, 0X27, 0X36, 0XD8, 0X9F, 0X2E, 0XFE, 0XFC, 0XE3, 0X7C, 0X2B, 0XE4, 0XC3, 0X46, 0X88, 0X07, 0X0B, 0X00, 0XBA, 0X21,
        0XB1, 0X6B, 0XA5, 0XFA, 0XD8, 0X75, 0X87, 0XA2, 0X66, 0X2D, 0X1D, 0XCE, 0X44, 0XCF, 0X3A, 0XB0, 0X54, 0X42, 0XB6, 0X54, 0XC1, 0X52,
        0XDE, 0XBB, 0X43, 0X2F, 0X19, 0X2D, 0X87, 0X9A, 0X31, 0XD5, 0X36, 0XAE, 0X87, 0X50, 0XE0, 0XB6, 0X94, 0X77, 0XF6, 0X1E, 0X21, 0X96,
        0XA7, 0X60, 0X88, 0XAA, 0XE2, 0X05, 0X5B, 0X8A, 0X62, 0X6C, 0X59, 0XA7, 0XF6, 0X20, 0X92, 0X35, 0X54, 0X01, 0XFD, 0XA1, 0XE6, 0XFD,
        0X30, 0XA1, 0XB5, 0XC5, 0X29, 0X70, 0X2D, 0X95, 0X0F, 0X63, 0XEF, 0X14, 0XA2, 0XED, 0X01, 0X62, 0XC3, 0X1B, 0XAE, 0X9E, 0X0C, 0XA8,
        0X6D, 0XB5, 0X45, 0X7C, 0X79, 0XDF, 0X09, 0X49, 0X37, 0X0D, 0X84, 0XBD, 0XC3, 0XBE, 0XB5, 0X93, 0XF0, 0X0B, 0XE0, 0X1F, 0X23, 0X18,
        0XBC, 0XE9, 0X24, 0X30, 0XBD, 0X3B, 0XAA, 0XE5, 0X85, 0X14, 0X83, 0XA8, 0XD4, 0X19, 0X40, 0XBB, 0X7B, 0XD2, 0XEF, 0XE2, 0XC7, 0XC8,
        0XC5, 0XF8, 0X4D, 0X0A, 0X76, 0XEF, 0X73, 0X70, 0X1A, 0X12, 0X71, 0X25, 0X7B, 0XE4, 0XBA, 0X86, 0X47, 0X56, 0X32, 0XF8, 0X20, 0XAB,
        0XE0, 0X88, 0X15, 0XBC, 0X80, 0X61, 0XF4, 0XDB, 0X68, 0X18, 0XA4, 0X65, 0XB4, 0X12, 0X43, 0XF2, 0X3E, 0X88, 0XE6, 0X1F, 0XB9, 0X79,
        0XF6, 0XC5, 0X79, 0XC5, 0X1B, 0X76, 0XB7, 0X97, 0XAE, 0X45, 0XFB, 0XFE, 0X0B, 0X6D, 0X75, 0XA5, 0X1A, 0XDB, 0X6A, 0XE8, 0XA0, 0X56,
        0X25, 0X57, 0XAC, 0X4C, 0XEC, 0X10, 0X96, 0X62, 0XCB, 0XDE, 0X6C, 0XC8, 0XB1, 0X4F, 0X47, 0XDE, 0X80, 0X15, 0XA3, 0X08, 0X7B, 0XB6,
        0X7B, 0X71, 0X94, 0XF3, 0XB5, 0XB4, 0X4A, 0X56, 0XD1, 0XB1, 0X51, 0X6B, 0X10, 0XF2, 0X04, 0X0F, 0X8E, 0X41, 0X30, 0XF7, 0X7C, 0XED,
        0X09, 0XC2, 0X58, 0X34, 0X8A, 0XC9, 0X8E, 0X2A, 0X96, 0X89, 0X4E, 0X81, 0X0E, 0X0F, 0X71, 0XFD, 0XAE, 0XE6, 0X0C, 0X76, 0X56, 0X0B,
        0X50, 0XB8, 0X75, 0XC3, 0XFE, 0X19, 0XB9, 0X64, 0XD0, 0X58, 0XA0, 0X2F, 0X88, 0X15, 0X46, 0X5A, 0XC4, 0X74, 0X33, 0X5C, 0X53, 0X55,
        0X5B, 0XA3, 0X6C, 0X12, 0XDB, 0XFD, 0X3A, 0X40, 0XF0, 0XEE, 0X5A, 0X8A, 0X06, 0XBA, 0XD3, 0X5D, 0XB2, 0X47, 0XD6, 0X88, 0XDE, 0XF4,
        0XC5, 0X86, 0X77, 0X5E, 0XE1, 0XBE, 0X52, 0X28, 0X7D, 0XDF, 0X0E, 0XFF, 0X41, 0XA3, 0XB4, 0XD0, 0X81, 0XBB, 0X10, 0XF9, 0X9E, 0XDD,
        0XFE, 0XF9, 0XE7, 0X2C, 0X00, 0X49, 0X19, 0X4F, 0X3A, 0XBC, 0X56, 0XD2, 0X82, 0XE7, 0XCB, 0XE5, 0X67, 0XA8, 0XC5, 0X2D, 0X7D, 0X84,
        0XCA, 0X40, 0XFD, 0XCB, 0X43, 0XE3, 0X5E, 0X42, 0XEA, 0XA3, 0XBF, 0X9F, 0X17, 0XD9, 0X6C, 0XB6, 0X08, 0XF2, 0XD4, 0XC1, 0X01, 0X9A,
        0X39, 0X5E, 0X40, 0XB0, 0XB3, 0X20, 0X28, 0X77, 0XD2, 0X30, 0X0B, 0X73, 0X2F, 0X45, 0XAB, 0X60, 0X1E, 0X7D, 0X87, 0X28, 0X64, 0X10,
        0X17, 0X82, 0X8E, 0XAA, 0X3E, 0X54, 0X5B, 0X63, 0X26, 0X36, 0X21, 0XBF, 0X30, 0X5D, 0XD1, 0XDD, 0X64, 0XC1, 0X28, 0X1E, 0X79, 0XF9,
        0X72, 0XFE, 0X33, 0X3A, 0XFC, 0X39, 0X7A, 0XFE, 0X69, 0X98, 0X6C, 0XDF, 0X75, 0XA4, 0XFA, 0X5E, 0XBB, 0XE3, 0X6C, 0X3B, 0XBC, 0XE8,
        0X42, 0X2F, 0XAD, 0XDD, 0X37, 0XDE, 0X95, 0X62, 0X9B, 0XD8, 0X5E, 0X18, 0X41, 0X34, 0X4F, 0XD3, 0X12, 0XFB, 0X01, 0X2C, 0XB7, 0XC6,
        0XF8, 0X8D, 0X97, 0XAA, 0X06, 0X8F, 0X08, 0X91, 0XE3, 0XDE, 0X5F, 0X8C, 0XDF, 0XD7, 0XC0, 0X18, 0X87, 0X44, 0X6F, 0X82, 0XFE, 0X35,
        0XB3, 0XC4, 0X7E, 0XCE, 0X73, 0X32, 0X4F, 0X23, 0XBC, 0X70, 0XB0, 0X17, 0X2E, 0X9C, 0X94, 0X90, 0X0C, 0X12, 0X40, 0X52, 0X27, 0XCF,
        0X51, 0X3E, 0X5B, 0XE5, 0X51, 0X9E, 0XE5, 0X73, 0XC3, 0XC8, 0X7D, 0X45, 0XC9, 0XDC, 0XA0, 0X40, 0XCD, 0XCC, 0X56, 0X67, 0X54, 0X7F,
        0XAB, 0X6F, 0X55, 0X0C, 0X57, 0XB5, 0X9E, 0X75, 0X76, 0XE1, 0X59, 0XC6, 0XFA, 0X0C, 0X79, 0X59, 0X62, 0X53, 0XBD, 0XE9, 0XB5, 0X82,
        0X36, 0X05, 0XA8, 0X5C, 0X4F, 0XC6, 0X31, 0XC2, 0XC8, 0X9B, 0X6B, 0X0F, 0XB6, 0X53, 0X9F, 0X07, 0X65, 0X66, 0X10, 0X18, 0X07, 0X7A,
        0X98, 0XA0, 0X45, 0X88, 0XE6, 0XC4, 0X41, 0XAB, 0X99, 0XEF, 0X90, 0X68, 0XEE, 0X39, 0X11, 0X99, 0X79, 0X4E, 0X46, 0X96, 0XDE, 0XCA,
        0X0F, 0X57, 0XCB, 0X55, 0XEA, 0XEB, 0XFA, 0XE8, 0X2F, 0X40, 0XFC, 0X7F, 0XDC, 0X83, 0X46, 0XE7, 0XF1, 0XF4, 0X69, 0XD1, 0X2C, 0X6B,
        0X2A, 0XD5, 0X5A, 0XD2, 0XE2, 0X01, 0X3E, 0X48, 0X37, 0XAC, 0X4A, 0XE9, 0X00, 0X4A, 0XDA, 0X07, 0X04, 0X7C, 0X5F, 0X93, 0X4D, 0XFD,
        0X28, 0X45, 0X33, 0XA0, 0X48, 0X72, 0X9C, 0X3B, 0X04, 0XCF, 0X91, 0X93, 0XA6, 0X01, 0X71, 0XFC, 0X65, 0X3E, 0XF3, 0X43, 0XBC, 0XCC,
        0X56, 0X7E, 0XFE, 0X42, 0X56, 0X87, 0X5F, 0X7D, 0XF0, 0X16, 0X8A, 0X5C, 0XF3, 0X36, 0XA3, 0X6A, 0X84, 0X0E, 0XD5, 0XCD, 0X69, 0XD6,
        0XB1, 0X1E, 0XF3, 0XC3, 0XEE, 0X71, 0XB3, 0XDA, 0X6F, 0X1C, 0XEA, 0XF4, 0XA6, 0XE9, 0XE2, 0X9B, 0XA5, 0XCE, 0XFB, 0XE1, 0XED, 0X7F,
        0X73, 0XBC, 0X85, 0XE8, 0X1B, 0X76, 0XA2, 0X73, 0X7E, 0X77, 0XA2, 0X63, 0XF6, 0XE5, 0X6A, 0X7D, 0X65, 0XB4, 0XF1, 0XCB, 0X00, 0X5C,
        0X93, 0X60, 0X3D, 0X1A, 0X59, 0XB8, 0X53, 0X59, 0X2E, 0X7E, 0X00, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14,
        0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XF0, 0X08, 0X58, 0XF4, 0XA5, 0X02, 0X00, 0X00, 0X52, 0X06, 0X00, 0X00, 0X0D,
        0X00, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X73, 0X74, 0X79, 0X6C, 0X65, 0X73, 0X2E, 0X78, 0X6D, 0X6C, 0XA4, 0X55, 0X6D, 0X6B, 0XDB, 0X30,
        0X10, 0XFE, 0X3E, 0XD8, 0X7F, 0X10, 0XFA, 0XEE, 0XCA, 0X76, 0XE3, 0X2C, 0X09, 0XB6, 0XCB, 0XD2, 0XD4, 0X50, 0XE8, 0XC6, 0XA0, 0X1D,
        0XEC, 0XAB, 0X62, 0XCB, 0X89, 0XA8, 0X5E, 0X8C, 0X24, 0X67, 0XCE, 0XC6, 0XFE, 0XFB, 0X4E, 0X76, 0X5E, 0X1C, 0X3A, 0XB6, 0XD1, 0X7E,
        0X89, 0X4E, 0XE7, 0XD3, 0X73, 0XCF, 0XDD, 0X73, 0X52, 0XD2, 0X9B, 0X4E, 0X0A, 0XB4, 0X63, 0XC6, 0X72, 0XAD, 0X32, 0X1C, 0X5D, 0X85,
        0X18, 0X31, 0X55, 0XEA, 0X8A, 0XAB, 0X4D, 0X86, 0XBF, 0X3E, 0X15, 0XC1, 0X0C, 0X23, 0XEB, 0XA8, 0XAA, 0XA8, 0XD0, 0X8A, 0X65, 0X78,
        0XCF, 0X2C, 0XBE, 0XC9, 0XDF, 0XBF, 0X4B, 0XAD, 0XDB, 0X0B, 0XF6, 0XB8, 0X65, 0XCC, 0X21, 0X80, 0X50, 0X36, 0XC3, 0X5B, 0XE7, 0X9A,
        0X05, 0X21, 0XB6, 0XDC, 0X32, 0X49, 0XED, 0X95, 0X6E, 0X98, 0X82, 0X2F, 0XB5, 0X36, 0X92, 0X3A, 0XD8, 0X9A, 0X0D, 0XB1, 0X8D, 0X61,
        0XB4, 0XB2, 0XFE, 0X90, 0X14, 0X24, 0X0E, 0XC3, 0X29, 0X91, 0X94, 0X2B, 0X3C, 0X20, 0X2C, 0X64, 0XF9, 0X3F, 0X20, 0X92, 0X9A, 0XE7,
        0XB6, 0X09, 0X4A, 0X2D, 0X1B, 0XEA, 0XF8, 0X9A, 0X0B, 0XEE, 0XF6, 0X3D, 0X16, 0X46, 0XB2, 0X5C, 0XDC, 0X6F, 0X94, 0X36, 0X74, 0X2D,
        0X80, 0X6A, 0X17, 0X4D, 0X68, 0X89, 0XBA, 0X68, 0X6A, 0X62, 0XD4, 0X99, 0X63, 0X92, 0XDE, 0XFB, 0X22, 0X8F, 0XE4, 0XA5, 0XD1, 0X56,
        0XD7, 0XEE, 0X0A, 0X70, 0X89, 0XAE, 0X6B, 0X5E, 0XB2, 0X97, 0X74, 0XE7, 0X64, 0X4E, 0X68, 0X79, 0X46, 0X02, 0XE4, 0XD7, 0X21, 0X45,
        0X09, 0X09, 0XE3, 0X8B, 0XDA, 0X3B, 0XF3, 0X4A, 0XA4, 0X09, 0X31, 0X6C, 0XC7, 0XBD, 0X7C, 0X38, 0X4F, 0X6B, 0XAD, 0X9C, 0X45, 0XA5,
        0X6E, 0X95, 0X03, 0X31, 0X81, 0XA8, 0X6F, 0XC1, 0XE2, 0X59, 0XE9, 0XEF, 0XAA, 0XF0, 0X9F, 0XBC, 0X73, 0X88, 0XCA, 0X53, 0XFB, 0X03,
        0XED, 0XA8, 0X00, 0X4F, 0X8C, 0X49, 0X9E, 0X96, 0X5A, 0X68, 0X83, 0X1C, 0X48, 0X07, 0X9D, 0X8B, 0XBC, 0X47, 0X51, 0XC9, 0X86, 0X88,
        0X5B, 0X2A, 0XF8, 0XDA, 0X70, 0XEF, 0XAC, 0XA9, 0XE4, 0X62, 0X3F, 0XB8, 0XFB, 0X73, 0XBD, 0XDA, 0X87, 0X38, 0XC9, 0XA1, 0XF7, 0X3E,
        0X8A, 0X78, 0X1E, 0X87, 0XC5, 0XC2, 0X21, 0X2E, 0XC4, 0X89, 0X55, 0XEC, 0X09, 0X80, 0X23, 0X4F, 0X41, 0X3E, 0XC7, 0X8C, 0X2A, 0X60,
        0X83, 0X0E, 0XF6, 0XD3, 0XBE, 0X81, 0XF4, 0X0A, 0X26, 0X6D, 0X80, 0XE9, 0XE3, 0XFE, 0X11, 0XBD, 0X31, 0X74, 0X1F, 0XC5, 0XC9, 0XE8,
        0X00, 0XE9, 0X13, 0XE6, 0XE9, 0X5A, 0X9B, 0X0A, 0X26, 0XFB, 0XDC, 0X8F, 0XA3, 0X2B, 0X4F, 0X05, 0XAB, 0X1D, 0X10, 0X35, 0X7C, 0XB3,
        0XF5, 0XAB, 0XD3, 0X0D, 0XFC, 0XAE, 0XB5, 0X73, 0XA0, 0X7E, 0X9E, 0X56, 0X9C, 0X6E, 0XB4, 0XA2, 0XC2, 0X97, 0X32, 0X80, 0X9C, 0X0C,
        0X28, 0XA7, 0X64, 0X42, 0X3C, 0XFA, 0XE9, 0XFF, 0X56, 0X5F, 0X60, 0X77, 0X35, 0X52, 0XAD, 0X2C, 0XA4, 0XBB, 0XAF, 0X32, 0X0C, 0XF7,
        0XC8, 0X37, 0XE1, 0X68, 0X42, 0X21, 0X07, 0X73, 0XC0, 0X1B, 0X36, 0X1E, 0X7F, 0X8C, 0X36, 0X60, 0XBF, 0X19, 0X16, 0X75, 0XF5, 0X25,
        0X3E, 0X20, 0X8E, 0X68, 0X5F, 0X90, 0X3E, 0XA5, 0X47, 0X5E, 0XEF, 0X0C, 0X7F, 0XF6, 0XD7, 0X55, 0XC0, 0XE4, 0X1C, 0X20, 0XD0, 0XBA,
        0XE5, 0XC2, 0X71, 0XF5, 0X07, 0XC2, 0X80, 0X59, 0X75, 0XE7, 0X16, 0X84, 0X5E, 0X01, 0XE7, 0XAF, 0X5E, 0XDF, 0X9C, 0X53, 0X16, 0XE8,
        0X44, 0XC5, 0X6A, 0XDA, 0X0A, 0XF7, 0X74, 0XFA, 0X98, 0XE1, 0XB3, 0XFD, 0X89, 0X55, 0XBC, 0X95, 0XF1, 0X29, 0XEA, 0X0B, 0XDF, 0X69,
        0XD7, 0X43, 0X64, 0XF8, 0X6C, 0X3F, 0X78, 0XA5, 0XA2, 0XA9, 0XCF, 0XC1, 0X3A, 0XF7, 0X60, 0X61, 0XBC, 0X60, 0X45, 0XAD, 0XE1, 0X19,
        0XFE, 0X79, 0XB7, 0XFC, 0X30, 0X5F, 0XDD, 0X15, 0X71, 0X30, 0X0B, 0X97, 0XB3, 0X60, 0X72, 0XCD, 0X92, 0X60, 0X9E, 0X2C, 0X57, 0X41,
        0X32, 0XB9, 0X5D, 0XAE, 0X56, 0XC5, 0X3C, 0X8C, 0XC3, 0XDB, 0X5F, 0XA3, 0X07, 0XE0, 0X0D, 0XD7, 0XBF, 0X7F, 0XAF, 0XF2, 0X14, 0X2E,
        0XD6, 0XC2, 0X0A, 0X78, 0X24, 0XCC, 0XA1, 0XD8, 0X43, 0X89, 0X8F, 0X67, 0X5F, 0X86, 0X47, 0X9B, 0X81, 0X7E, 0X3F, 0XA3, 0X40, 0X7B,
        0XCC, 0X7D, 0X1E, 0X4F, 0XC3, 0X8F, 0X49, 0X14, 0X06, 0XC5, 0X75, 0X18, 0X05, 0X93, 0X29, 0X9D, 0X05, 0XB3, 0XE9, 0X75, 0X12, 0X14,
        0X49, 0X14, 0XAF, 0XA6, 0X93, 0XE5, 0X5D, 0X52, 0X24, 0X23, 0XEE, 0XC9, 0X2B, 0X9F, 0X89, 0X90, 0X44, 0XD1, 0XF0, 0XE0, 0X78, 0XF2,
        0XC9, 0XC2, 0X71, 0XC9, 0X04, 0X57, 0X47, 0XAD, 0X8E, 0X0A, 0X8D, 0XBD, 0X20, 0X12, 0X6C, 0XFF, 0X52, 0X04, 0X39, 0X2A, 0X41, 0XCE,
        0X7F, 0X06, 0XF9, 0X6F, 0X00, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00,
        0X00, 0X21, 0X00, 0XC1, 0X17, 0X10, 0XBE, 0X4E, 0X07, 0X00, 0X00, 0XC6, 0X20, 0X00, 0X00, 0X13, 0X00, 0X00, 0X00, 0X78, 0X6C, 0X2F,
        0X74, 0X68, 0X65, 0X6D, 0X65, 0X2F, 0X74, 0X68, 0X65, 0X6D, 0X65, 0X31, 0X2E, 0X78, 0X6D, 0X6C, 0XEC, 0X59, 0XCD, 0X8B, 0X1B, 0X37,
        0X14, 0XBF, 0X17, 0XFA, 0X3F, 0X0C, 0X73, 0X77, 0XFC, 0X35, 0XE3, 0X8F, 0X25, 0XDE, 0XE0, 0XCF, 0X6C, 0X93, 0XDD, 0X24, 0X64, 0X9D,
        0X94, 0X1C, 0XB5, 0XB6, 0XEC, 0X51, 0X56, 0X33, 0X32, 0X92, 0XBC, 0X1B, 0X13, 0X02, 0X25, 0X39, 0XF5, 0X52, 0X28, 0XA4, 0XA5, 0X97,
        0X42, 0X6F, 0X3D, 0X94, 0XD2, 0X40, 0X03, 0X0D, 0XBD, 0XF4, 0X8F, 0X09, 0X24, 0XB4, 0XE9, 0X1F, 0XD1, 0X27, 0XCD, 0XD8, 0X23, 0XAD,
        0XE5, 0X24, 0X9B, 0X6C, 0X4A, 0X5A, 0X76, 0X0D, 0X8B, 0X47, 0XFE, 0XBD, 0XA7, 0XA7, 0XF7, 0X9E, 0X7E, 0X7A, 0XF3, 0X74, 0XF1, 0XD2,
        0XBD, 0X98, 0X7A, 0X47, 0X98, 0X0B, 0XC2, 0X92, 0X96, 0X5F, 0XBE, 0X50, 0XF2, 0X3D, 0X9C, 0X8C, 0XD8, 0X98, 0X24, 0XD3, 0X96, 0X7F,
        0X6B, 0X38, 0X28, 0X34, 0X7C, 0X4F, 0X48, 0X94, 0X8C, 0X11, 0X65, 0X09, 0X6E, 0XF9, 0X0B, 0X2C, 0XFC, 0X4B, 0XDB, 0X9F, 0X7E, 0X72,
        0X11, 0X6D, 0XC9, 0X08, 0XC7, 0XD8, 0X03, 0XF9, 0X44, 0X6C, 0XA1, 0X96, 0X1F, 0X49, 0X39, 0XDB, 0X2A, 0X16, 0XC5, 0X08, 0X86, 0X91,
        0XB8, 0XC0, 0X66, 0X38, 0X81, 0XDF, 0X26, 0X8C, 0XC7, 0X48, 0XC2, 0X23, 0X9F, 0X16, 0XC7, 0X1C, 0X1D, 0X83, 0XDE, 0X98, 0X16, 0X2B,
        0XA5, 0X52, 0XAD, 0X18, 0X23, 0X92, 0XF8, 0X5E, 0X82, 0X62, 0X50, 0X7B, 0X7D, 0X32, 0X21, 0X23, 0XEC, 0X0D, 0X95, 0X4A, 0X7F, 0X7B,
        0XA9, 0XBC, 0X4F, 0XE1, 0X31, 0X91, 0X42, 0X0D, 0X8C, 0X28, 0XDF, 0X57, 0XAA, 0XB1, 0X25, 0XA1, 0XB1, 0XE3, 0XC3, 0XB2, 0X42, 0X88,
        0X85, 0XE8, 0X52, 0XEE, 0X1D, 0X21, 0XDA, 0XF2, 0X61, 0X9E, 0X31, 0X3B, 0X1E, 0XE2, 0X7B, 0XD2, 0XF7, 0X28, 0X12, 0X12, 0X7E, 0X68,
        0XF9, 0X25, 0XFD, 0XE7, 0X17, 0XB7, 0X2F, 0X16, 0XD1, 0X56, 0X26, 0X44, 0XE5, 0X06, 0X59, 0X43, 0X6E, 0XA0, 0XFF, 0X32, 0XB9, 0X4C,
        0X60, 0X7C, 0X58, 0XD1, 0X73, 0XF2, 0XE9, 0XC1, 0X6A, 0XD2, 0X20, 0X08, 0X83, 0X5A, 0X7B, 0XA5, 0X5F, 0X03, 0XA8, 0X5C, 0XC7, 0XF5,
        0XEB, 0XFD, 0X5A, 0XBF, 0XB6, 0XD2, 0XA7, 0X01, 0X68, 0X34, 0X82, 0X95, 0XA6, 0XB6, 0XD8, 0X3A, 0XEB, 0X95, 0X6E, 0X90, 0X61, 0X0D,
        0X50, 0XFA, 0XD5, 0XA1, 0XBB, 0X57, 0XEF, 0X55, 0XCB, 0X16, 0XDE, 0XD0, 0X5F, 0X5D, 0XB3, 0XB9, 0X1D, 0XAA, 0X8F, 0X85, 0XD7, 0XA0,
        0X54, 0X7F, 0XB0, 0X86, 0X1F, 0X0C, 0XBA, 0XE0, 0X45, 0X0B, 0XAF, 0X41, 0X29, 0X3E, 0X5C, 0XC3, 0X87, 0X9D, 0X66, 0XA7, 0X67, 0XEB,
        0XD7, 0XA0, 0X14, 0X5F, 0X5B, 0XC3, 0XD7, 0X4B, 0XED, 0X5E, 0X50, 0XB7, 0XF4, 0X6B, 0X50, 0X44, 0X49, 0X72, 0XB8, 0X86, 0X2E, 0X85,
        0XB5, 0X6A, 0X77, 0XB9, 0XDA, 0X15, 0X64, 0XC2, 0XE8, 0X8E, 0X13, 0XDE, 0X0C, 0X83, 0X41, 0XBD, 0X92, 0X29, 0XCF, 0X51, 0X90, 0X0D,
        0XAB, 0XEC, 0X52, 0X53, 0X4C, 0X58, 0X22, 0X37, 0XE5, 0X5A, 0X8C, 0XEE, 0X32, 0X3E, 0X00, 0X80, 0X02, 0X52, 0X24, 0X49, 0XE2, 0XC9,
        0XC5, 0X0C, 0X4F, 0XD0, 0X08, 0XB2, 0XB8, 0X8B, 0X28, 0X39, 0XE0, 0XC4, 0XDB, 0X25, 0XD3, 0X08, 0X12, 0X6F, 0X86, 0X12, 0X26, 0X60,
        0XB8, 0X54, 0X29, 0X0D, 0X4A, 0X55, 0XF8, 0XAF, 0X3E, 0X81, 0XFE, 0XA6, 0X23, 0X8A, 0XB6, 0X30, 0X32, 0XA4, 0X95, 0X5D, 0X60, 0X89,
        0X58, 0X1B, 0X52, 0XF6, 0X78, 0X62, 0XC4, 0XC9, 0X4C, 0XB6, 0XFC, 0X2B, 0XA0, 0XD5, 0X37, 0X20, 0X2F, 0X9E, 0X3D, 0X7B, 0XFE, 0XF0,
        0XE9, 0XF3, 0X87, 0XBF, 0X3D, 0X7F, 0XF4, 0XE8, 0XF9, 0XC3, 0X5F, 0XB2, 0XB9, 0XB5, 0X2A, 0X4B, 0X6E, 0X07, 0X25, 0X53, 0X53, 0XEE,
        0XD5, 0X8F, 0X5F, 0XFF, 0XFD, 0XFD, 0X17, 0XDE, 0X5F, 0XBF, 0XFE, 0XF0, 0XEA, 0XF1, 0X37, 0XE9, 0XD4, 0X27, 0XF1, 0XC2, 0XC4, 0XBF,
        0XFC, 0XF9, 0XCB, 0X97, 0XBF, 0XFF, 0XF1, 0X3A, 0XF5, 0XB0, 0XE2, 0XDC, 0X15, 0X2F, 0XBE, 0X7D, 0XF2, 0XF2, 0XE9, 0X93, 0X17, 0XDF,
        0X7D, 0XF5, 0XE7, 0X4F, 0X8F, 0X1D, 0XDA, 0XDB, 0X1C, 0X1D, 0X98, 0XF0, 0X21, 0X89, 0XB1, 0XF0, 0XAE, 0XE1, 0X63, 0XEF, 0X26, 0X8B,
        0X61, 0X81, 0X0E, 0XFB, 0XF1, 0X01, 0X3F, 0X9D, 0XC4, 0X30, 0X42, 0XC4, 0X92, 0X40, 0X11, 0XE8, 0X76, 0XA8, 0XEE, 0XCB, 0XC8, 0X02,
        0X5E, 0X5B, 0X20, 0XEA, 0XC2, 0X75, 0XB0, 0XED, 0XC2, 0XDB, 0X1C, 0X58, 0XC6, 0X05, 0XBC, 0X3C, 0XBF, 0X6B, 0XD9, 0XBA, 0X1F, 0XF1,
        0XB9, 0X24, 0X8E, 0X99, 0XAF, 0X46, 0XB1, 0X05, 0XDC, 0X63, 0X8C, 0X76, 0X18, 0X77, 0X3A, 0XE0, 0XAA, 0X9A, 0XCB, 0XF0, 0XF0, 0X70,
        0X9E, 0X4C, 0XDD, 0X93, 0XF3, 0XB9, 0X89, 0XBB, 0X89, 0XD0, 0X91, 0X6B, 0XEE, 0X2E, 0X4A, 0XAC, 0X00, 0XF7, 0XE7, 0X33, 0XA0, 0X57,
        0XE2, 0X52, 0XD9, 0X8D, 0XB0, 0X65, 0XE6, 0X0D, 0X8A, 0X12, 0X89, 0XA6, 0X38, 0XC1, 0XD2, 0X53, 0XBF, 0XB1, 0X43, 0X8C, 0X1D, 0XAB,
        0XBB, 0X43, 0X88, 0XE5, 0XD7, 0X3D, 0X32, 0XE2, 0X4C, 0XB0, 0X89, 0XF4, 0XEE, 0X10, 0XAF, 0X83, 0X88, 0XD3, 0X25, 0X43, 0X72, 0X60,
        0X25, 0X52, 0X2E, 0XB4, 0X43, 0X62, 0X88, 0XCB, 0XC2, 0X65, 0X20, 0X84, 0XDA, 0XF2, 0XCD, 0XDE, 0X6D, 0XAF, 0XC3, 0XA8, 0X6B, 0XD5,
        0X3D, 0X7C, 0X64, 0X23, 0X61, 0X5B, 0X20, 0XEA, 0X30, 0X7E, 0X88, 0XA9, 0XE5, 0XC6, 0XCB, 0X68, 0X2E, 0X51, 0XEC, 0X52, 0X39, 0X44,
        0X31, 0X35, 0X1D, 0XBE, 0X8B, 0X64, 0XE4, 0X32, 0X72, 0X7F, 0XC1, 0X47, 0X26, 0XAE, 0X2F, 0X24, 0X44, 0X7A, 0X8A, 0X29, 0XF3, 0XFA,
        0X63, 0X2C, 0X84, 0X4B, 0XE6, 0X3A, 0X87, 0XF5, 0X1A, 0X41, 0XBF, 0X0A, 0X0C, 0XE3, 0X0E, 0XFB, 0X1E, 0X5D, 0XC4, 0X36, 0X92, 0X4B,
        0X72, 0XE8, 0XD2, 0XB9, 0X8B, 0X18, 0X33, 0X91, 0X3D, 0X76, 0XD8, 0X8D, 0X50, 0X3C, 0X73, 0XDA, 0X4C, 0X92, 0XC8, 0XC4, 0X7E, 0X26,
        0X0E, 0X21, 0X45, 0X91, 0X77, 0X83, 0X49, 0X17, 0X7C, 0X8F, 0XD9, 0X3B, 0X44, 0X3D, 0X43, 0X1C, 0X50, 0XB2, 0X31, 0XDC, 0XB7, 0X09,
        0XB6, 0XC2, 0XFD, 0X66, 0X22, 0XB8, 0X05, 0XE4, 0X6A, 0X9A, 0X94, 0X27, 0X88, 0XFA, 0X65, 0XCE, 0X1D, 0XB1, 0XBC, 0X8C, 0X99, 0XBD,
        0X1F, 0X17, 0X74, 0X82, 0XB0, 0X8B, 0X65, 0XDA, 0X3C, 0XB6, 0XD8, 0XB5, 0XCD, 0X89, 0X33, 0X3B, 0X3A, 0XF3, 0XA9, 0X95, 0XDA, 0XBB,
        0X18, 0X53, 0X74, 0X8C, 0XC6, 0X18, 0X7B, 0XB7, 0X3E, 0X73, 0X58, 0XD0, 0X61, 0X33, 0XCB, 0XE7, 0XB9, 0XD1, 0X57, 0X22, 0X60, 0X95,
        0X1D, 0XEC, 0X4A, 0XAC, 0X2B, 0XC8, 0XCE, 0X55, 0XF5, 0X9C, 0X60, 0X01, 0X65, 0X92, 0XAA, 0X6B, 0XD6, 0X29, 0X72, 0X97, 0X08, 0X2B,
        0X65, 0XF7, 0XF1, 0X94, 0X6D, 0XB0, 0X67, 0X6F, 0X71, 0X82, 0X78, 0X16, 0X28, 0X89, 0X11, 0XDF, 0XA4, 0XF9, 0X1A, 0X44, 0XDD, 0X4A,
        0X5D, 0X38, 0XE5, 0X9C, 0X54, 0X7A, 0X9D, 0X8E, 0X0E, 0X4D, 0XE0, 0X35, 0X02, 0XE5, 0X1F, 0XE4, 0X8B, 0XD3, 0X29, 0XD7, 0X05, 0XE8,
        0X30, 0X92, 0XBB, 0XBF, 0X49, 0XEB, 0X8D, 0X08, 0X59, 0X67, 0X97, 0X7A, 0X16, 0XEE, 0X7C, 0X5D, 0X70, 0X2B, 0X7E, 0X6F, 0XB3, 0XC7,
        0X60, 0X5F, 0XDE, 0X3D, 0XED, 0XBE, 0X04, 0X19, 0X7C, 0X6A, 0X19, 0X20, 0XF6, 0XB7, 0XF6, 0XCD, 0X10, 0X51, 0X6B, 0X82, 0X3C, 0X61,
        0X86, 0X08, 0X0A, 0X0C, 0X17, 0XDD, 0X82, 0X88, 0X15, 0XFE, 0X5C, 0X44, 0X9D, 0XAB, 0X5A, 0X6C, 0XEE, 0X94, 0X9B, 0XD8, 0X9B, 0X36,
        0X0F, 0X03, 0X14, 0X46, 0X56, 0XBD, 0X13, 0X93, 0XE4, 0X8D, 0XC5, 0XCF, 0X89, 0XB2, 0X27, 0XFC, 0X77, 0XCA, 0X1E, 0X77, 0X01, 0X73,
        0X06, 0X05, 0X8F, 0X5B, 0XF1, 0XFB, 0X94, 0X3A, 0X9B, 0X28, 0X65, 0XE7, 0X44, 0X81, 0XB3, 0X09, 0XF7, 0X1F, 0X2C, 0X6B, 0X7A, 0X68,
        0X9E, 0XDC, 0XC0, 0X70, 0X92, 0XAC, 0X73, 0XD6, 0X79, 0X55, 0X73, 0X5E, 0XD5, 0XF8, 0XFF, 0XFB, 0XAA, 0X66, 0XD3, 0X5E, 0X3E, 0XAF,
        0X65, 0XCE, 0X6B, 0X99, 0XF3, 0X5A, 0XC6, 0XF5, 0XF6, 0XF5, 0X41, 0X6A, 0X99, 0XBC, 0X7C, 0X81, 0XCA, 0X26, 0XEF, 0XF2, 0XE8, 0X9E,
        0X4F, 0XBC, 0XB1, 0XE5, 0X33, 0X21, 0X94, 0XEE, 0XCB, 0X05, 0XC5, 0XBB, 0X42, 0X77, 0X7D, 0X04, 0XBC, 0XD1, 0X8C, 0X07, 0X30, 0XA8,
        0XDB, 0X51, 0XBA, 0X27, 0XB9, 0X6A, 0X01, 0XCE, 0X22, 0XF8, 0X9A, 0X35, 0X98, 0X2C, 0XDC, 0X94, 0X23, 0X2D, 0XE3, 0X71, 0X26, 0X3F,
        0X27, 0X32, 0XDA, 0X8F, 0XD0, 0X0C, 0X5A, 0X43, 0X65, 0XDD, 0XC0, 0X9C, 0X8A, 0X4C, 0XF5, 0X54, 0X78, 0X33, 0X26, 0XA0, 0X63, 0XA4,
        0X87, 0X75, 0X2B, 0X15, 0X9F, 0XD0, 0XAD, 0XFB, 0X4E, 0XF3, 0X78, 0X8F, 0X8D, 0XD3, 0X4E, 0X67, 0XB9, 0XAC, 0XBA, 0X9A, 0XA9, 0X0B,
        0X05, 0X92, 0XF9, 0X78, 0X29, 0X5C, 0X8D, 0X43, 0X97, 0X4A, 0XA6, 0XE8, 0X5A, 0X3D, 0XEF, 0XDE, 0XAD, 0XD4, 0XEB, 0X7E, 0XE8, 0X54,
        0X77, 0X59, 0X97, 0X06, 0X28, 0XD9, 0XD3, 0X18, 0X61, 0X4C, 0X66, 0X1B, 0X51, 0X75, 0X18, 0X51, 0X5F, 0X0E, 0X42, 0X14, 0X5E, 0X67,
        0X84, 0X5E, 0XD9, 0X99, 0X58, 0XD1, 0X74, 0X58, 0XD1, 0X50, 0XEA, 0X97, 0XA1, 0X5A, 0X46, 0X71, 0XE5, 0X0A, 0X30, 0X6D, 0X15, 0X15,
        0X78, 0XE5, 0XF6, 0XE0, 0X45, 0XBD, 0XE5, 0X87, 0X41, 0XDA, 0X41, 0X86, 0X66, 0X1C, 0X94, 0XE7, 0X63, 0X15, 0XA7, 0XB4, 0X99, 0XBC,
        0X8C, 0XAE, 0X0A, 0XCE, 0X99, 0X46, 0X7A, 0X93, 0X33, 0XA9, 0X99, 0X01, 0X50, 0X62, 0X2F, 0X33, 0X20, 0X8F, 0X74, 0X53, 0XD9, 0XBA,
        0X71, 0X79, 0X6A, 0X75, 0X69, 0XAA, 0XBD, 0X45, 0XA4, 0X2D, 0X23, 0X8C, 0X74, 0XB3, 0X8D, 0X30, 0XD2, 0X30, 0X82, 0X17, 0XE1, 0X2C,
        0X3B, 0XCD, 0X96, 0XFB, 0X59, 0XC6, 0XBA, 0X99, 0X87, 0XD4, 0X32, 0X4F, 0XB9, 0X62, 0XB9, 0X1B, 0X72, 0X33, 0XEA, 0X8D, 0X0F, 0X11,
        0X6B, 0X45, 0X22, 0X27, 0XB8, 0X81, 0X26, 0X26, 0X53, 0XD0, 0XC4, 0X3B, 0X6E, 0XF9, 0XB5, 0X6A, 0X08, 0XB7, 0X2A, 0X23, 0X34, 0X6B,
        0XF9, 0X13, 0XE8, 0X18, 0XC3, 0XD7, 0X78, 0X06, 0XB9, 0X23, 0XD4, 0X5B, 0X17, 0XA2, 0X53, 0XB8, 0X76, 0X19, 0X49, 0X9E, 0X6E, 0XF8,
        0X77, 0X61, 0X96, 0X19, 0X17, 0XB2, 0X87, 0X44, 0X94, 0X3A, 0X5C, 0X93, 0X4E, 0XCA, 0X06, 0X31, 0X91, 0X98, 0X7B, 0X94, 0XC4, 0X2D,
        0X5F, 0X2D, 0X7F, 0X95, 0X0D, 0X34, 0XD1, 0X1C, 0XA2, 0X6D, 0X2B, 0X57, 0X80, 0X10, 0X3E, 0X5A, 0XE3, 0X9A, 0X40, 0X2B, 0X1F, 0X9B,
        0X71, 0X10, 0X74, 0X3B, 0XC8, 0X78, 0X32, 0XC1, 0X23, 0X69, 0X86, 0XDD, 0X18, 0X51, 0X9E, 0X4E, 0X1F, 0X81, 0XE1, 0X53, 0XAE, 0X70,
        0XFE, 0XAA, 0XC5, 0XDF, 0X1D, 0XAC, 0X24, 0XD9, 0X1C, 0XC2, 0XBD, 0X1F, 0X8D, 0X8F, 0XBD, 0X03, 0X3A, 0XE7, 0X37, 0X11, 0XA4, 0X58,
        0X58, 0X2F, 0X2B, 0X07, 0X8E, 0X89, 0X80, 0X8B, 0X83, 0X72, 0XEA, 0XCD, 0X31, 0X81, 0X9B, 0XB0, 0X15, 0X91, 0XE5, 0XF9, 0X77, 0XE2,
        0X60, 0XCA, 0X68, 0XD7, 0XBC, 0X8A, 0XD2, 0X39, 0X94, 0X8E, 0X23, 0X3A, 0X8B, 0X50, 0X76, 0XA2, 0X98, 0X64, 0X9E, 0XC2, 0X35, 0X89,
        0XAE, 0XCC, 0XD1, 0X4F, 0X2B, 0X1F, 0X18, 0X4F, 0XD9, 0X9A, 0XC1, 0XA1, 0XEB, 0X2E, 0X3C, 0X98, 0XAA, 0X03, 0XF6, 0XBD, 0X4F, 0XDD,
        0X37, 0X1F, 0XD5, 0XCA, 0X73, 0X06, 0X69, 0XE6, 0X67, 0XA6, 0XC5, 0X2A, 0XEA, 0XD4, 0X74, 0X93, 0XE9, 0X87, 0X3B, 0XE4, 0X0D, 0XAB,
        0XF2, 0X43, 0XD4, 0XB2, 0X2A, 0XA5, 0X6E, 0XFD, 0X4E, 0X2D, 0X72, 0XAE, 0X6B, 0X2E, 0XB9, 0X0E, 0X12, 0XD5, 0X79, 0X4A, 0XBC, 0XE1,
        0XD4, 0X7D, 0X8B, 0X03, 0XC1, 0X30, 0X2D, 0X9F, 0XCC, 0X32, 0X4D, 0X59, 0XBC, 0X4E, 0XC3, 0X8A, 0XB3, 0XB3, 0X51, 0XDB, 0XB4, 0X33,
        0X2C, 0X08, 0X0C, 0X4F, 0XD4, 0X36, 0XF8, 0X6D, 0X75, 0X46, 0X38, 0X3D, 0XF1, 0XAE, 0X27, 0X3F, 0XC8, 0X9D, 0XCC, 0X5A, 0X75, 0X40,
        0X2C, 0XEB, 0X4A, 0X9D, 0XF8, 0XFA, 0XCA, 0XDC, 0XBC, 0XD5, 0X66, 0X07, 0X77, 0X81, 0X3C, 0X7A, 0X70, 0X7F, 0X38, 0XA7, 0X52, 0XE8,
        0X50, 0X42, 0X6F, 0X97, 0X23, 0X28, 0XFA, 0XD2, 0X1B, 0XC8, 0X94, 0X36, 0X60, 0X8B, 0XDC, 0X93, 0X59, 0X8D, 0X08, 0XDF, 0XBC, 0X39,
        0X27, 0X2D, 0XFF, 0X7E, 0X29, 0X6C, 0X07, 0XDD, 0X4A, 0XD8, 0X2D, 0X94, 0X1A, 0X61, 0XBF, 0X10, 0X54, 0X83, 0X52, 0XA1, 0X11, 0XB6,
        0XAB, 0X85, 0X76, 0X18, 0X56, 0XCB, 0XFD, 0XB0, 0X5C, 0XEA, 0X75, 0X2A, 0X0F, 0XE0, 0X60, 0X91, 0X51, 0X5C, 0X0E, 0XD3, 0XEB, 0XFA,
        0X01, 0X5C, 0X61, 0XD0, 0X45, 0X76, 0X69, 0XAF, 0XC7, 0XD7, 0X2E, 0XEE, 0XE3, 0XE5, 0X2D, 0XCD, 0X85, 0X11, 0X8B, 0X8B, 0X4C, 0X5F,
        0XCC, 0X17, 0XB5, 0XE1, 0XFA, 0XE2, 0XBE, 0X5C, 0XD9, 0X7C, 0X71, 0XEF, 0X11, 0X20, 0X9D, 0XFB, 0XB5, 0XCA, 0XA0, 0X59, 0X6D, 0X76,
        0X6A, 0X85, 0X66, 0XB5, 0X3D, 0X28, 0X04, 0XBD, 0X4E, 0XA3, 0XD0, 0XEC, 0XD6, 0X3A, 0X85, 0X5E, 0XAD, 0X5B, 0XEF, 0X0D, 0X7A, 0XDD,
        0XB0, 0XD1, 0X1C, 0X3C, 0XF0, 0XBD, 0X23, 0X0D, 0X0E, 0XDA, 0XD5, 0X6E, 0X50, 0XEB, 0X37, 0X0A, 0XB5, 0X72, 0XB7, 0X5B, 0X08, 0X6A,
        0X25, 0X65, 0X7E, 0XA3, 0X59, 0XA8, 0X07, 0X95, 0X4A, 0X3B, 0XA8, 0XB7, 0X1B, 0XFD, 0XA0, 0XFD, 0X20, 0X2B, 0X63, 0X60, 0XE5, 0X29,
        0X7D, 0X64, 0XBE, 0X00, 0XF7, 0X6A, 0XBB, 0XB6, 0XFF, 0X01, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00,
        0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XFF, 0X6B, 0X0C, 0XE9, 0XCD, 0X01, 0X00, 0X00, 0XB5, 0X03, 0X00, 0X00, 0X18, 0X00,
        0X00, 0X00, 0X78, 0X6C, 0X2F, 0X77, 0X6F, 0X72, 0X6B, 0X73, 0X68, 0X65, 0X65, 0X74, 0X73, 0X2F, 0X73, 0X68, 0X65, 0X65, 0X74, 0X31,
        0X2E, 0X78, 0X6D, 0X6C, 0X9C, 0X93, 0X4D, 0X8B, 0XDB, 0X30, 0X10, 0X86, 0XEF, 0X85, 0XFE, 0X07, 0XA1, 0XBB, 0X2D, 0XDB, 0XF1, 0X3A,
        0X89, 0X89, 0XB3, 0X6C, 0X36, 0X0D, 0XDD, 0X43, 0XA1, 0XF4, 0XF3, 0X2C, 0XCB, 0X63, 0X5B, 0XC4, 0X92, 0X8C, 0XA4, 0X6C, 0X12, 0X4A,
        0XFF, 0X7B, 0XC7, 0X0E, 0XF1, 0X16, 0X72, 0X09, 0X0B, 0X16, 0X68, 0XC6, 0X9A, 0X67, 0X66, 0XA4, 0X77, 0X56, 0X8F, 0X27, 0XD5, 0X91,
        0X57, 0XB0, 0X4E, 0X1A, 0X5D, 0XD0, 0X38, 0X8C, 0X28, 0X01, 0X2D, 0X4C, 0X25, 0X75, 0X53, 0XD0, 0X9F, 0X3F, 0X76, 0XC1, 0X82, 0X12,
        0XE7, 0XB9, 0XAE, 0X78, 0X67, 0X34, 0X14, 0XF4, 0X0C, 0X8E, 0X3E, 0XAE, 0X3F, 0X7E, 0X58, 0X1D, 0X8D, 0XDD, 0XBB, 0X16, 0XC0, 0X13,
        0X24, 0X68, 0X57, 0XD0, 0XD6, 0XFB, 0X3E, 0X67, 0XCC, 0X89, 0X16, 0X14, 0X77, 0XA1, 0XE9, 0X41, 0XE3, 0X9F, 0XDA, 0X58, 0XC5, 0X3D,
        0X9A, 0XB6, 0X61, 0XAE, 0XB7, 0XC0, 0XAB, 0X31, 0X48, 0X75, 0X2C, 0X89, 0XA2, 0X8C, 0X29, 0X2E, 0X35, 0XBD, 0X10, 0X72, 0X7B, 0X0F,
        0XC3, 0XD4, 0XB5, 0X14, 0XB0, 0X35, 0XE2, 0XA0, 0X40, 0XFB, 0X0B, 0XC4, 0X42, 0XC7, 0X3D, 0XD6, 0XEF, 0X5A, 0XD9, 0XBB, 0X2B, 0X4D,
        0X89, 0X7B, 0X70, 0X8A, 0XDB, 0XFD, 0XA1, 0X0F, 0X84, 0X51, 0X3D, 0X22, 0X4A, 0XD9, 0X49, 0X7F, 0X1E, 0XA1, 0X94, 0X28, 0X91, 0XBF,
        0X34, 0XDA, 0X58, 0X5E, 0X76, 0XD8, 0XF7, 0X29, 0X4E, 0XB9, 0X20, 0X27, 0X8B, 0X5F, 0X82, 0X6B, 0X76, 0X4D, 0X33, 0XFA, 0X6F, 0X32,
        0X29, 0X29, 0XAC, 0X71, 0XA6, 0XF6, 0X21, 0X92, 0XD9, 0XA5, 0XE6, 0XDB, 0XF6, 0X97, 0X6C, 0XC9, 0XB8, 0X98, 0X48, 0XB7, 0XFD, 0XDF,
        0X85, 0X89, 0X53, 0X66, 0XE1, 0X55, 0X0E, 0X0F, 0XF8, 0X86, 0X4A, 0XDE, 0X57, 0X52, 0XFC, 0X30, 0XB1, 0X92, 0X37, 0XD8, 0XEC, 0X9D,
        0XB0, 0X6C, 0X82, 0X0D, 0XD7, 0X65, 0XF3, 0X83, 0XAC, 0X0A, 0XFA, 0X27, 0X4A, 0X97, 0XBB, 0X4D, 0XBC, 0X49, 0X83, 0XE4, 0X29, 0X8B,
        0X83, 0X34, 0X4B, 0X67, 0XC1, 0X62, 0X11, 0X67, 0XC1, 0X62, 0X33, 0XCF, 0X3E, 0X3D, 0XCF, 0XB2, 0XDD, 0X36, 0XDD, 0XFC, 0XA5, 0XEB,
        0X55, 0X25, 0XF1, 0X85, 0X87, 0XAE, 0X88, 0X85, 0XBA, 0XA0, 0X4F, 0X31, 0X65, 0XEB, 0XD5, 0X28, 0X9E, 0X5F, 0X12, 0X8E, 0XEE, 0XBF,
        0X3D, 0XF1, 0XBC, 0XFC, 0X0E, 0X1D, 0X08, 0X0F, 0X98, 0X20, 0XA6, 0X64, 0XD0, 0X66, 0X69, 0XCC, 0X7E, 0X38, 0XF8, 0X82, 0XAE, 0X68,
        0X08, 0X65, 0X37, 0XB1, 0XBB, 0X51, 0X9B, 0X5F, 0X2D, 0X29, 0XB9, 0X83, 0X67, 0XD3, 0XFD, 0X96, 0X95, 0X6F, 0X11, 0X80, 0X33, 0X50,
        0X41, 0XCD, 0X0F, 0X9D, 0XFF, 0X66, 0X8E, 0X9F, 0X41, 0X36, 0XAD, 0X47, 0X6F, 0X86, 0X3D, 0X0C, 0X22, 0XC8, 0XAB, 0XF3, 0X16, 0X9C,
        0X40, 0XF5, 0X21, 0X38, 0X4C, 0XA6, 0XAA, 0XB6, 0XDC, 0X73, 0X4C, 0XD3, 0XF3, 0X06, 0XBE, 0X70, 0XDB, 0X48, 0XED, 0X48, 0X07, 0XF5,
        0X78, 0X68, 0X4E, 0X89, 0XBD, 0X50, 0XA2, 0X10, 0XF7, 0XDE, 0XF4, 0X43, 0XE8, 0XFC, 0X81, 0X92, 0XD2, 0X78, 0X6F, 0XD4, 0XD5, 0X6A,
        0X71, 0X3C, 0X00, 0X65, 0X10, 0X85, 0X78, 0X61, 0XB5, 0X31, 0XFE, 0X6A, 0X0C, 0XE5, 0X4F, 0X03, 0XB7, 0XFE, 0X07, 0X00, 0X00, 0XFF,
        0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XC2, 0X5E, 0X59, 0X08, 0X90,
        0X01, 0X00, 0X00, 0X1B, 0X03, 0X00, 0X00, 0X10, 0X00, 0X08, 0X01, 0X64, 0X6F, 0X63, 0X50, 0X72, 0X6F, 0X70, 0X73, 0X2F, 0X61, 0X70,
        0X70, 0X2E, 0X78, 0X6D, 0X6C, 0X20, 0XA2, 0X04, 0X01, 0X28, 0XA0, 0X00, 0X01, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X9C, 0X92, 0X4D, 0X6F, 0XDB, 0X30, 0X0C, 0X86, 0XEF, 0X03, 0XFA, 0X1F, 0X0C, 0XDD, 0X1B, 0X39, 0X6D,
        0X51, 0X0C, 0X81, 0XAC, 0X62, 0X48, 0X57, 0XF4, 0XB0, 0X62, 0X01, 0X92, 0X76, 0X67, 0X4E, 0XA6, 0X63, 0XA1, 0XB2, 0X24, 0X88, 0XAC,
        0X91, 0XEC, 0XD7, 0X4F, 0XB6, 0XD1, 0XD4, 0XD9, 0X76, 0XDA, 0X8D, 0X1F, 0X2F, 0X5E, 0X3E, 0XA2, 0XA8, 0XEE, 0X0E, 0X9D, 0X2B, 0X7A,
        0X4C, 0X64, 0X83, 0XAF, 0XC4, 0X72, 0X51, 0X8A, 0X02, 0XBD, 0X09, 0XB5, 0XF5, 0XFB, 0X4A, 0X3C, 0XEF, 0X1E, 0X2E, 0X3F, 0X8B, 0X82,
        0X18, 0X7C, 0X0D, 0X2E, 0X78, 0XAC, 0XC4, 0X11, 0X49, 0XDC, 0XE9, 0X8B, 0X4F, 0X6A, 0X93, 0X42, 0XC4, 0XC4, 0X16, 0XA9, 0XC8, 0X16,
        0X9E, 0X2A, 0XD1, 0X32, 0XC7, 0X95, 0X94, 0X64, 0X5A, 0XEC, 0X80, 0X16, 0XB9, 0XED, 0X73, 0XA7, 0X09, 0XA9, 0X03, 0XCE, 0X69, 0XDA,
        0XCB, 0XD0, 0X34, 0XD6, 0XE0, 0X7D, 0X30, 0X6F, 0X1D, 0X7A, 0X96, 0X57, 0X65, 0X79, 0X2B, 0XF1, 0XC0, 0XE8, 0X6B, 0XAC, 0X2F, 0XE3,
        0XC9, 0X50, 0X4C, 0X8E, 0XAB, 0X9E, 0XFF, 0XD7, 0XB4, 0X0E, 0X66, 0XE0, 0XA3, 0X97, 0XDD, 0X31, 0X66, 0X60, 0XAD, 0XBE, 0XC4, 0XE8,
        0XAC, 0X01, 0XCE, 0XAF, 0XD4, 0X4F, 0XD6, 0XA4, 0X40, 0XA1, 0XE1, 0XE2, 0X09, 0X8C, 0XF5, 0X1C, 0XA8, 0X2D, 0XBE, 0X1E, 0X0C, 0X3A,
        0X25, 0XE7, 0X32, 0X95, 0X39, 0XB7, 0X68, 0XDE, 0X92, 0XE5, 0XA3, 0X2E, 0X95, 0X9C, 0XA7, 0X6A, 0X6B, 0XC0, 0XE1, 0X3A, 0X8F, 0XD0,
        0X0D, 0X38, 0X42, 0X25, 0X3F, 0X0A, 0XEA, 0X11, 0X61, 0X58, 0XDF, 0X06, 0X6C, 0X22, 0XAD, 0X7A, 0X5E, 0XF5, 0X68, 0X38, 0XA4, 0X82,
        0XEC, 0XAF, 0XBC, 0XC0, 0X2B, 0X51, 0XFC, 0X04, 0XC2, 0X01, 0XAC, 0X12, 0X3D, 0X24, 0X0B, 0X9E, 0X33, 0XE0, 0X20, 0X9B, 0X92, 0X31,
        0X76, 0X91, 0X38, 0XE9, 0X1F, 0X21, 0XBD, 0X52, 0X8B, 0XC8, 0XA4, 0X64, 0X16, 0X4C, 0XC5, 0X31, 0X9C, 0X6B, 0XE7, 0XB1, 0XBD, 0XD1,
        0XCB, 0X51, 0X90, 0X83, 0X73, 0XE1, 0X60, 0X30, 0X81, 0XE4, 0XC6, 0X39, 0XE2, 0XCE, 0XB2, 0X43, 0XFA, 0XDE, 0X6C, 0X20, 0XF1, 0X3F,
        0X88, 0X97, 0X73, 0XE2, 0X91, 0X61, 0XE2, 0X9D, 0X70, 0XB6, 0X03, 0XDF, 0X34, 0X73, 0XCE, 0X37, 0X3E, 0X39, 0X4F, 0XFA, 0XC3, 0X7B,
        0X1D, 0XBA, 0X08, 0XFE, 0X98, 0X1B, 0XA7, 0XE8, 0X9B, 0XF5, 0XAF, 0XF4, 0X1C, 0X77, 0XE1, 0X1E, 0X18, 0XDF, 0XD7, 0X79, 0X5E, 0X54,
        0XDB, 0X16, 0X12, 0XD6, 0XF9, 0X07, 0X4E, 0XEB, 0X3E, 0X15, 0XD4, 0X63, 0XDE, 0X64, 0X72, 0X83, 0XC9, 0XBA, 0X05, 0XBF, 0XC7, 0XFA,
        0X5D, 0XF3, 0X77, 0X63, 0X38, 0X83, 0X97, 0XE9, 0XD6, 0XF5, 0XF2, 0X76, 0X51, 0X5E, 0X97, 0XF9, 0X5F, 0X67, 0X35, 0X25, 0X3F, 0XAE,
        0X5A, 0XFF, 0X06, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21,
        0X00, 0XBD, 0XDE, 0XAC, 0XB8, 0X45, 0X01, 0X00, 0X00, 0X6F, 0X02, 0X00, 0X00, 0X11, 0X00, 0X08, 0X01, 0X64, 0X6F, 0X63, 0X50, 0X72,
        0X6F, 0X70, 0X73, 0X2F, 0X63, 0X6F, 0X72, 0X65, 0X2E, 0X78, 0X6D, 0X6C, 0X20, 0XA2, 0X04, 0X01, 0X28, 0XA0, 0X00, 0X01, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X94, 0X92, 0X5F, 0X4B, 0XC3, 0X30, 0X14, 0XC5, 0XDF, 0X05,
        0XBF, 0X43, 0XC9, 0X7B, 0X9B, 0X66, 0X1B, 0X63, 0X96, 0XB6, 0X83, 0X29, 0X7B, 0XD1, 0X81, 0XE0, 0X44, 0XF1, 0X2D, 0X24, 0X77, 0X5B,
        0XB0, 0XF9, 0X43, 0X12, 0XD7, 0XED, 0XDB, 0X9B, 0XB6, 0X5B, 0XAD, 0XD4, 0X17, 0X1F, 0X93, 0X73, 0XEE, 0X2F, 0XE7, 0X5C, 0X92, 0X2F,
        0X4F, 0XB2, 0X8A, 0X8E, 0X60, 0X9D, 0XD0, 0XAA, 0X40, 0X24, 0X49, 0X51, 0X04, 0X8A, 0X69, 0X2E, 0XD4, 0XBE, 0X40, 0XAF, 0XDB, 0X75,
        0XBC, 0X40, 0X91, 0XF3, 0X54, 0X71, 0X5A, 0X69, 0X05, 0X05, 0X3A, 0X83, 0X43, 0XCB, 0XF2, 0XF6, 0X26, 0X67, 0X26, 0X63, 0XDA, 0XC2,
        0XB3, 0XD5, 0X06, 0XAC, 0X17, 0XE0, 0XA2, 0X40, 0X52, 0X2E, 0X63, 0XA6, 0X40, 0X07, 0XEF, 0X4D, 0X86, 0XB1, 0X63, 0X07, 0X90, 0XD4,
        0X25, 0XC1, 0XA1, 0X82, 0XB8, 0XD3, 0X56, 0X52, 0X1F, 0X8E, 0X76, 0X8F, 0X0D, 0X65, 0X9F, 0X74, 0X0F, 0X78, 0X92, 0XA6, 0X73, 0X2C,
        0XC1, 0X53, 0X4E, 0X3D, 0XC5, 0X0D, 0X30, 0X36, 0X3D, 0X11, 0X5D, 0X90, 0X9C, 0XF5, 0X48, 0XF3, 0X65, 0XAB, 0X16, 0XC0, 0X19, 0X86,
        0X0A, 0X24, 0X28, 0XEF, 0X30, 0X49, 0X08, 0XFE, 0XF1, 0X7A, 0XB0, 0XD2, 0XFD, 0X39, 0XD0, 0X2A, 0X03, 0XA7, 0X14, 0XFE, 0X6C, 0X42,
        0XA7, 0X4B, 0XDC, 0X21, 0X9B, 0XB3, 0X4E, 0XEC, 0XDD, 0X27, 0X27, 0X7A, 0X63, 0X5D, 0XD7, 0X49, 0X3D, 0X6D, 0X63, 0X84, 0XFC, 0X04,
        0XBF, 0X6F, 0X9E, 0X5E, 0XDA, 0XAA, 0XB1, 0X50, 0XCD, 0XAE, 0X18, 0XA0, 0X32, 0XE7, 0X2C, 0X63, 0X16, 0XA8, 0XD7, 0XB6, 0X7C, 0X04,
        0XA5, 0XC0, 0X1F, 0XA2, 0X15, 0XAD, 0X5C, 0X05, 0XC7, 0X1C, 0X0F, 0XB4, 0X66, 0X8F, 0X15, 0X75, 0X7E, 0X13, 0X56, 0XBE, 0X13, 0XC0,
        0X57, 0XE7, 0XB1, 0X7D, 0X6C, 0X09, 0XF4, 0XB6, 0X4C, 0XF7, 0X04, 0XF0, 0X28, 0XC4, 0XCB, 0XBA, 0X32, 0X57, 0XE5, 0X6D, 0X7A, 0XFF,
        0XB0, 0X5D, 0XA3, 0X72, 0X92, 0X92, 0XBB, 0X38, 0X5D, 0XC4, 0X64, 0XBE, 0X4D, 0XD3, 0X6C, 0X3A, 0XCB, 0XC8, 0XEC, 0XA3, 0X49, 0XF0,
        0X6B, 0XBE, 0X89, 0XDB, 0X5D, 0XC8, 0X4B, 0X8E, 0XFF, 0X10, 0X27, 0XF3, 0X01, 0XF1, 0X0A, 0X28, 0X73, 0X3C, 0XFA, 0X22, 0XE5, 0X37,
        0X00, 0X00, 0X00, 0XFF, 0XFF, 0X03, 0X00, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0X9A, 0XAB, 0X0F, 0X4F, 0X5E,
        0XFF, 0XEC, 0XAA, 0X93, 0X00, 0X00, 0X00, 0XB2, 0X00, 0X00, 0X00, 0X14, 0X00, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X73, 0X68, 0X61, 0X72,
        0X65, 0X64, 0X53, 0X74, 0X72, 0X69, 0X6E, 0X67, 0X73, 0X2E, 0X78, 0X6D, 0X6C, 0X35, 0X8D, 0X41, 0X0A, 0XC2, 0X30, 0X10, 0X45, 0XF7,
        0X82, 0X77, 0X08, 0XB3, 0XD7, 0XA9, 0X2E, 0X44, 0X24, 0X49, 0X17, 0X82, 0X27, 0XD0, 0X03, 0X84, 0X76, 0X6C, 0X03, 0XCD, 0XA4, 0X66,
        0XA6, 0XA2, 0XB7, 0X37, 0X5D, 0XB8, 0XF8, 0XF0, 0X1F, 0X9F, 0XCF, 0XB3, 0XED, 0X27, 0X4D, 0XE6, 0X4D, 0X45, 0X62, 0X66, 0X07, 0X87,
        0X7D, 0X03, 0X86, 0XB8, 0XCB, 0X7D, 0XE4, 0XC1, 0XC1, 0XE3, 0X7E, 0XDB, 0X9D, 0XC1, 0X88, 0X06, 0XEE, 0XC3, 0X94, 0X99, 0X1C, 0X7C,
        0X49, 0XA0, 0XF5, 0XDB, 0X8D, 0X15, 0X51, 0X53, 0XBF, 0X2C, 0X0E, 0X46, 0XD5, 0XF9, 0X82, 0X28, 0XDD, 0X48, 0X29, 0XC8, 0X3E, 0XCF,
        0XC4, 0X75, 0X79, 0XE6, 0X92, 0X82, 0X56, 0X2C, 0X03, 0XCA, 0X5C, 0X28, 0XF4, 0X32, 0X12, 0X69, 0X9A, 0XF0, 0XD8, 0X34, 0X27, 0X4C,
        0X21, 0X32, 0X98, 0X2E, 0X2F, 0XAC, 0XD5, 0X0B, 0X66, 0XE1, 0XF8, 0X5A, 0XE8, 0XFA, 0X67, 0X6F, 0X25, 0X7A, 0XAB, 0XDE, 0XE2, 0X9A,
        0XB5, 0X63, 0X35, 0X56, 0XF1, 0X0F, 0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0X99, 0X64, 0XEF, 0X50, 0XD9, 0X19,
        0XD7, 0X73, 0X3F, 0X01, 0X00, 0X00, 0X7E, 0X04, 0X00, 0X00, 0X13, 0X00, 0X00, 0X00, 0X5B, 0X43, 0X6F, 0X6E, 0X74, 0X65, 0X6E, 0X74,
        0X5F, 0X54, 0X79, 0X70, 0X65, 0X73, 0X5D, 0X2E, 0X78, 0X6D, 0X6C, 0XAD, 0X93, 0XCD, 0X4E, 0XC3, 0X30, 0X10, 0X84, 0XEF, 0X3C, 0X45,
        0XE4, 0X2B, 0X4A, 0XDC, 0X72, 0X40, 0X08, 0X35, 0XED, 0X81, 0X9F, 0X23, 0X54, 0XA2, 0X3C, 0X80, 0XB1, 0X37, 0X8D, 0XD5, 0XF8, 0X47,
        0XBB, 0X6E, 0X69, 0XDF, 0X9E, 0X4D, 0X52, 0X21, 0X40, 0X55, 0X03, 0XB4, 0X97, 0X58, 0XF1, 0XCE, 0XCC, 0X37, 0X3E, 0XEC, 0X64, 0XB6,
        0X75, 0X4D, 0XB6, 0X01, 0X24, 0X1B, 0X7C, 0X29, 0XC6, 0XC5, 0X48, 0X64, 0XE0, 0X75, 0X30, 0XD6, 0X2F, 0X4B, 0XF1, 0XBA, 0X78, 0XCC,
        0X6F, 0XC4, 0X6C, 0X3A, 0X59, 0XEC, 0X22, 0X50, 0XC6, 0X52, 0X4F, 0XA5, 0XA8, 0X53, 0X8A, 0XB7, 0X52, 0X92, 0XAE, 0XC1, 0X29, 0X2A,
        0X42, 0X04, 0XCF, 0X93, 0X2A, 0XA0, 0X53, 0X89, 0X7F, 0X71, 0X29, 0XA3, 0XD2, 0X2B, 0XB5, 0X04, 0X79, 0X35, 0X1A, 0X5D, 0X4B, 0X1D,
        0X7C, 0X02, 0X9F, 0XF2, 0XD4, 0X66, 0X88, 0XE9, 0XE4, 0X1E, 0X2A, 0XB5, 0X6E, 0X52, 0XF6, 0XB0, 0XE5, 0XEB, 0X1E, 0X8B, 0XD0, 0X90,
        0XC8, 0XEE, 0X7A, 0X61, 0XCB, 0X2A, 0X85, 0X8A, 0XB1, 0XB1, 0X5A, 0X25, 0X9E, 0XCB, 0X8D, 0X37, 0X3F, 0X28, 0XF9, 0X9E, 0X50, 0XB0,
        0XB3, 0XD3, 0X50, 0X6D, 0X23, 0X5D, 0XB2, 0X40, 0XC8, 0X83, 0X04, 0X9E, 0X1C, 0X01, 0XEC, 0X7D, 0XCF, 0X1B, 0X40, 0XB4, 0X06, 0XB2,
        0XB9, 0XC2, 0XF4, 0XA4, 0X1C, 0XAB, 0XE4, 0XB6, 0X91, 0XEF, 0X01, 0X57, 0X6F, 0X21, 0XAC, 0X0A, 0X96, 0XFD, 0XAD, 0X65, 0XA8, 0X2A,
        0XAB, 0XC1, 0X04, 0XBD, 0X76, 0X6C, 0X29, 0X28, 0X22, 0X28, 0X43, 0X35, 0X40, 0X72, 0X4D, 0XD1, 0X9D, 0X85, 0X53, 0XD6, 0X5F, 0X0E,
        0XF3, 0X3B, 0X31, 0XC9, 0XEE, 0X18, 0X9F, 0XB9, 0XC8, 0X67, 0XFE, 0X40, 0X8F, 0X54, 0X83, 0X83, 0XFE, 0X7B, 0X7A, 0X85, 0X2E, 0X66,
        0X00, 0X48, 0X69, 0XD7, 0X00, 0X9D, 0X8C, 0XFA, 0XFE, 0XDA, 0X3E, 0X74, 0X88, 0X5C, 0X2B, 0X04, 0XF3, 0X92, 0X90, 0XD7, 0XE0, 0XEC,
        0X05, 0XBE, 0X64, 0X1F, 0XED, 0XC1, 0XFE, 0X39, 0X86, 0X48, 0X52, 0X07, 0X84, 0XB6, 0XC4, 0XFF, 0X56, 0XA4, 0X75, 0XE7, 0X11, 0X79,
        0X8A, 0XC9, 0XC2, 0XEF, 0X88, 0X1C, 0X7D, 0XF2, 0XAB, 0XA1, 0XDD, 0X3E, 0X03, 0XE6, 0X00, 0X5B, 0XB6, 0X79, 0X34, 0XBD, 0XF8, 0X00,
        0X50, 0X4B, 0X03, 0X04, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0XA7, 0X64, 0XEF, 0X50, 0X59, 0XAF, 0XF9, 0X51, 0XDC, 0X00, 0X00, 0X00,
        0XA8, 0X02, 0X00, 0X00, 0X1A, 0X00, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X5F, 0X72, 0X65, 0X6C, 0X73, 0X2F, 0X77, 0X6F, 0X72, 0X6B, 0X62,
        0X6F, 0X6F, 0X6B, 0X2E, 0X78, 0X6D, 0X6C, 0X2E, 0X72, 0X65, 0X6C, 0X73, 0XAD, 0X92, 0XCD, 0X6A, 0XC3, 0X30, 0X10, 0X84, 0XEF, 0X7D,
        0X0A, 0XB1, 0XF7, 0X5A, 0X76, 0X5A, 0X4A, 0X29, 0X51, 0X72, 0X29, 0X85, 0X5C, 0XDB, 0XF4, 0X01, 0X84, 0XBC, 0XB6, 0X4C, 0X6C, 0X49,
        0XEC, 0X6E, 0X7F, 0XF2, 0XF6, 0X11, 0X0E, 0X24, 0X31, 0X84, 0X90, 0X83, 0X4F, 0X62, 0X46, 0XDA, 0X99, 0X4F, 0XB0, 0XCB, 0XF5, 0XFF,
        0XD0, 0XAB, 0X5F, 0X24, 0XEE, 0X62, 0X30, 0X50, 0X15, 0X25, 0X28, 0X0C, 0X2E, 0XD6, 0X5D, 0X68, 0X0D, 0X7C, 0X6F, 0X3F, 0X1E, 0X5F,
        0X61, 0XBD, 0X5A, 0X7E, 0X62, 0X6F, 0X25, 0XBF, 0X60, 0XDF, 0X25, 0X56, 0X79, 0X24, 0XB0, 0X01, 0X2F, 0X92, 0XDE, 0XB4, 0X66, 0XE7,
        0X71, 0XB0, 0X5C, 0XC4, 0X84, 0X21, 0XDF, 0X34, 0X91, 0X06, 0X2B, 0X59, 0X52, 0XAB, 0X93, 0X75, 0X3B, 0XDB, 0XA2, 0X5E, 0X94, 0XE5,
        0X8B, 0XA6, 0XCB, 0X0C, 0X98, 0X66, 0XAA, 0X4D, 0X6D, 0X80, 0X36, 0XF5, 0X33, 0XA8, 0XED, 0X3E, 0XE1, 0X3D, 0XD9, 0XB1, 0X69, 0X3A,
        0X87, 0XEF, 0XD1, 0XFD, 0X0C, 0X18, 0XE4, 0X4A, 0X85, 0X66, 0X6F, 0X09, 0XEB, 0X2F, 0XA1, 0XFC, 0X17, 0XCE, 0XC1, 0X96, 0X5A, 0X14,
        0X03, 0X13, 0XBB, 0XC8, 0XA9, 0XA0, 0XAF, 0XC3, 0X3C, 0XCD, 0X0A, 0X23, 0XFB, 0X1E, 0X2F, 0X28, 0X46, 0X7D, 0XB3, 0X7E, 0X31, 0X67,
        0XBD, 0XE4, 0X59, 0X3C, 0XB7, 0X8F, 0XF2, 0X68, 0X56, 0XB7, 0X18, 0XAA, 0X39, 0X19, 0XFE, 0X22, 0XED, 0XD8, 0X23, 0XCA, 0X99, 0XE3,
        0X64, 0XB1, 0X1E, 0X8F, 0X13, 0X8C, 0X9E, 0X6C, 0XDC, 0XEA, 0XE1, 0X00, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06, 0X00,
        0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XB5, 0X55, 0X30, 0X23, 0XF4, 0X00, 0X00, 0X00, 0X4C, 0X02, 0X00, 0X00, 0X0B, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X5F, 0X72, 0X65, 0X6C, 0X73, 0X2F, 0X2E, 0X72,
        0X65, 0X6C, 0X73, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0X47, 0X88, 0XBC,
        0XE2, 0X5D, 0X03, 0X00, 0X00, 0X35, 0X08, 0X00, 0X00, 0X0F, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X25, 0X03, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X77, 0X6F, 0X72, 0X6B, 0X62, 0X6F, 0X6F, 0X6B, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B,
        0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XF0, 0X08, 0X58, 0XF4, 0XA5, 0X02, 0X00, 0X00,
        0X52, 0X06, 0X00, 0X00, 0X0D, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XAF, 0X06, 0X00, 0X00,
        0X78, 0X6C, 0X2F, 0X73, 0X74, 0X79, 0X6C, 0X65, 0X73, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06,
        0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XC1, 0X17, 0X10, 0XBE, 0X4E, 0X07, 0X00, 0X00, 0XC6, 0X20, 0X00, 0X00, 0X13, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X7F, 0X09, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X74, 0X68, 0X65, 0X6D,
        0X65, 0X2F, 0X74, 0X68, 0X65, 0X6D, 0X65, 0X31, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06, 0X00,
        0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XFF, 0X6B, 0X0C, 0XE9, 0XCD, 0X01, 0X00, 0X00, 0XB5, 0X03, 0X00, 0X00, 0X18, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XFE, 0X10, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X77, 0X6F, 0X72, 0X6B, 0X73,
        0X68, 0X65, 0X65, 0X74, 0X73, 0X2F, 0X73, 0X68, 0X65, 0X65, 0X74, 0X31, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00,
        0X14, 0X00, 0X06, 0X00, 0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XC2, 0X5E, 0X59, 0X08, 0X90, 0X01, 0X00, 0X00, 0X1B, 0X03, 0X00, 0X00,
        0X10, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X01, 0X13, 0X00, 0X00, 0X64, 0X6F, 0X63, 0X50,
        0X72, 0X6F, 0X70, 0X73, 0X2F, 0X61, 0X70, 0X70, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X2D, 0X00, 0X14, 0X00, 0X06, 0X00,
        0X08, 0X00, 0X00, 0X00, 0X21, 0X00, 0XBD, 0XDE, 0XAC, 0XB8, 0X45, 0X01, 0X00, 0X00, 0X6F, 0X02, 0X00, 0X00, 0X11, 0X00, 0X00, 0X00,
        0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XC7, 0X15, 0X00, 0X00, 0X64, 0X6F, 0X63, 0X50, 0X72, 0X6F, 0X70, 0X73,
        0X2F, 0X63, 0X6F, 0X72, 0X65, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X14, 0X03, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0X9A,
        0XAB, 0X0F, 0X4F, 0X5E, 0XFF, 0XEC, 0XAA, 0X93, 0X00, 0X00, 0X00, 0XB2, 0X00, 0X00, 0X00, 0X14, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X01, 0X00, 0X00, 0X00, 0XB6, 0X81, 0X43, 0X18, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X73, 0X68, 0X61, 0X72, 0X65, 0X64, 0X53, 0X74,
        0X72, 0X69, 0X6E, 0X67, 0X73, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X14, 0X03, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0X99,
        0X64, 0XEF, 0X50, 0XD9, 0X19, 0XD7, 0X73, 0X3F, 0X01, 0X00, 0X00, 0X7E, 0X04, 0X00, 0X00, 0X13, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X00, 0X01, 0X00, 0X00, 0X00, 0XB6, 0X81, 0X08, 0X19, 0X00, 0X00, 0X5B, 0X43, 0X6F, 0X6E, 0X74, 0X65, 0X6E, 0X74, 0X5F, 0X54, 0X79,
        0X70, 0X65, 0X73, 0X5D, 0X2E, 0X78, 0X6D, 0X6C, 0X50, 0X4B, 0X01, 0X02, 0X14, 0X03, 0X14, 0X00, 0X02, 0X00, 0X08, 0X00, 0XA7, 0X64,
        0XEF, 0X50, 0X59, 0XAF, 0XF9, 0X51, 0XDC, 0X00, 0X00, 0X00, 0XA8, 0X02, 0X00, 0X00, 0X1A, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00,
        0X01, 0X00, 0X00, 0X00, 0XB6, 0X81, 0X78, 0X1A, 0X00, 0X00, 0X78, 0X6C, 0X2F, 0X5F, 0X72, 0X65, 0X6C, 0X73, 0X2F, 0X77, 0X6F, 0X72,
        0X6B, 0X62, 0X6F, 0X6F, 0X6B, 0X2E, 0X78, 0X6D, 0X6C, 0X2E, 0X72, 0X65, 0X6C, 0X73, 0X50, 0X4B, 0X05, 0X06, 0X00, 0X00, 0X00, 0X00,
        0X0A, 0X00, 0X0A, 0X00, 0X80, 0X02, 0X00, 0X00, 0X8C, 0X1B, 0X00, 0X00, 0X00, 0X00
    };
}

CoreTools::SimpleCSV::DocumentImpl::DocumentImpl(const string& docPath)
    : m_Document{},
      filePath{ docPath },
      data{},
      docRelationships{},
      wbkRelationships{},
      contentTypes{},
      appProperties{},
      coreProperties{},
      sharedStrings{},
      workbook{},
      archive{ DisableNotThrow::Disable }
{
    CORE_TOOLS_SELF_CLASS_IS_VALID_9;
}

CoreTools::SimpleCSV::DocumentImpl::DocumentImpl(DocumentImpl&& rhs) noexcept
    : m_Document{ std::move(rhs.m_Document) },
      filePath{ std::move(rhs.filePath) },
      data{ std::move(rhs.data) },
      docRelationships{ std::move(rhs.docRelationships) },
      wbkRelationships{ std::move(rhs.wbkRelationships) },
      contentTypes{ std::move(rhs.contentTypes) },
      appProperties{ std::move(rhs.appProperties) },
      coreProperties{ std::move(rhs.coreProperties) },
      sharedStrings{ std::move(rhs.sharedStrings) },
      workbook{ std::move(rhs.workbook) },
      archive{ std::move(rhs.archive) }
{
    CORE_TOOLS_SELF_CLASS_IS_VALID_9;
}

CoreTools::SimpleCSV::DocumentImpl& CoreTools::SimpleCSV::DocumentImpl::operator=(DocumentImpl&& rhs) noexcept
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    m_Document = std::move(rhs.m_Document);
    filePath = std::move(rhs.filePath);
    data = std::move(rhs.data);
    docRelationships = std::move(rhs.docRelationships);
    wbkRelationships = std::move(rhs.wbkRelationships);
    contentTypes = std::move(rhs.contentTypes);
    appProperties = std::move(rhs.appProperties);
    coreProperties = std::move(rhs.coreProperties);
    sharedStrings = std::move(rhs.sharedStrings);
    workbook = std::move(rhs.workbook);
    archive = std::move(rhs.archive);

    return *this;
}

CLASS_INVARIANT_STUB_DEFINE(CoreTools::SimpleCSV, DocumentImpl)

void CoreTools::SimpleCSV::DocumentImpl::Create(const DocumentSharedPtr& document)
{
    DoCreate();
    Open(document);
}

void CoreTools::SimpleCSV::DocumentImpl::DoCreate()
{
    const auto outfile = StringConversion::MultiByteConversionStandard(filePath);

    WriteFileManager manager{ outfile };

    manager.Write(sizeof(char), templateSize, templateData.data());
}

void CoreTools::SimpleCSV::DocumentImpl::Open(const DocumentSharedPtr& document)
{
    SimpleZip::ZipArchive zipArchive{ filePath };
    archive = std::move(zipArchive);
    m_Document = document;

    data.emplace_back(std::make_shared<XmlData>(document, "[Content_Types].xml"));
    data.emplace_back(std::make_shared<XmlData>(document, "_rels/.rels"));
    data.emplace_back(std::make_shared<XmlData>(document, "xl/_rels/workbook.xml.rels"));

    contentTypes = std::make_shared<ContentTypes>(GetXmlData("[Content_Types].xml"));
    docRelationships = std::make_shared<Relationships>(GetXmlData("_rels/.rels"));
    wbkRelationships = std::make_shared<Relationships>(GetXmlData("xl/_rels/workbook.xml.rels"));

    if (!archive.HasEntry("xl/sharedStrings.xml"))
    {
        ExecuteCommand(CommandAddSharedStrings{});
    }

    for (const auto& item : contentTypes->GetContentItems())
    {
        if (item.GetPath().substr(0, 4) == "/xl/" && !(item.GetPath() == "/xl/workbook.xml"))
        {
            data.emplace_back(std::make_shared<XmlData>(document,
                                                        item.GetPath().substr(1),
                                                        wbkRelationships->GetRelationshipByTarget(item.GetPath().substr(4)).GetID(),
                                                        item.GetType()));
        }
        else
        {
            data.emplace_back(std::make_shared<XmlData>(document,
                                                        item.GetPath().substr(1),
                                                        docRelationships->GetRelationshipByTarget(item.GetPath().substr(1)).GetID(),
                                                        item.GetType()));
        }
    }

    coreProperties = std::make_shared<Properties>(GetXmlData("docProps/core.xml"));
    appProperties = std::make_shared<AppProperties>(GetXmlData("docProps/app.xml"));
    sharedStrings = std::make_shared<SharedStrings>(GetXmlData("xl/sharedStrings.xml"));
    workbook = std::make_shared<Workbook>(GetXmlData("xl/workbook.xml"));
}

void CoreTools::SimpleCSV::DocumentImpl::Save()
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    SaveAs(filePath);
}

void CoreTools::SimpleCSV::DocumentImpl::SaveAs(const string& fileName)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    filePath = fileName;

    for (const auto& item : data)
    {
        archive.AddEntry(item->GetXmlPath(), item->GetRawData());
    }
    archive.Save(filePath);
}

string CoreTools::SimpleCSV::DocumentImpl::GetName() const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return filePath;
}

CoreTools::SimpleCSV::Workbook CoreTools::SimpleCSV::DocumentImpl::GetWorkbook() const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return *workbook;
}

void CoreTools::SimpleCSV::DocumentImpl::ResetCalcChain()
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    ExecuteCommand(CommandResetCalcChain{});
}

string CoreTools::SimpleCSV::DocumentImpl::GetProperty(Property prop) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    switch (prop)
    {
        case Property::Application:
            return appProperties->GetProperty("Application"s);
        case Property::AppVersion:
            return appProperties->GetProperty("AppVersion"s);
        case Property::Category:
            return coreProperties->GetProperty("cp:category"s);
        case Property::Company:
            return appProperties->GetProperty("Company"s);
        case Property::CreationDate:
            return coreProperties->GetProperty("dcterms:created"s);
        case Property::Creator:
            return coreProperties->GetProperty("dc:creator"s);
        case Property::Description:
            return coreProperties->GetProperty("dc:description"s);
        case Property::DocSecurity:
            return appProperties->GetProperty("DocSecurity"s);
        case Property::HyperlinkBase:
            return appProperties->GetProperty("HyperlinkBase"s);
        case Property::HyperlinksChanged:
            return appProperties->GetProperty("HyperlinksChanged"s);
        case Property::Keywords:
            return coreProperties->GetProperty("cp:keywords"s);
        case Property::LastModifiedBy:
            return coreProperties->GetProperty("cp:lastModifiedBy"s);
        case Property::LastPrinted:
            return coreProperties->GetProperty("cp:lastPrinted"s);
        case Property::LinksUpToDate:
            return appProperties->GetProperty("LinksUpToDate"s);
        case Property::Manager:
            return appProperties->GetProperty("Manager"s);
        case Property::ModificationDate:
            return coreProperties->GetProperty("dcterms:modified"s);
        case Property::ScaleCrop:
            return appProperties->GetProperty("ScaleCrop"s);
        case Property::SharedDoc:
            return appProperties->GetProperty("SharedDoc"s);
        case Property::Subject:
            return coreProperties->GetProperty("dc:subject"s);
        case Property::Title:
            return coreProperties->GetProperty("dc:title"s);
        default:
            return ""s;
    }
}

void CoreTools::SimpleCSV::DocumentImpl::SetProperty(Property prop, const string& value)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    switch (prop)
    {
        case Property::Application:
        {
            appProperties->SetProperty("Application", value);
        }
        break;
        case Property::AppVersion:
        {
            try
            {
                std::stof(value);
            }
            catch (...)
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }

            if (value.find('.') != std::string::npos)
            {
                if (!value.substr(value.find('.') + 1).empty() && value.substr(value.find('.') + 1).size() <= 5)
                {
                    if (!value.substr(0, value.find('.')).empty() && value.substr(0, value.find('.')).size() <= 2)
                    {
                        appProperties->SetProperty("AppVersion", value);
                    }
                    else
                    {
                        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
                    }
                }
                else
                {
                    THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
                }
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::Category:
        {
            coreProperties->SetProperty("cp:category", value);
        }
        break;
        case Property::Company:
        {
            appProperties->SetProperty("Company", value);
        }
        break;
        case Property::CreationDate:
        {
            coreProperties->SetProperty("dcterms:created", value);
        }
        break;
        case Property::Creator:
        {
            coreProperties->SetProperty("dc:creator", value);
        }
        break;
        case Property::Description:
        {
            coreProperties->SetProperty("dc:description", value);
        }
        break;
        case Property::DocSecurity:
        {
            if (value == "0" || value == "1" || value == "2" || value == "4" || value == "8")
            {
                appProperties->SetProperty("DocSecurity", value);
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::HyperlinkBase:
        {
            appProperties->SetProperty("HyperlinkBase", value);
        }
        break;
        case Property::HyperlinksChanged:
        {
            if (value == "true" || value == "false")
            {
                appProperties->SetProperty("HyperlinksChanged", value);
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::Keywords:
        {
            coreProperties->SetProperty("cp:keywords", value);
        }
        break;
        case Property::LastModifiedBy:
        {
            coreProperties->SetProperty("cp:lastModifiedBy", value);
        }
        break;
        case Property::LastPrinted:
        {
            coreProperties->SetProperty("cp:lastPrinted", value);
        }
        break;
        case Property::LinksUpToDate:
        {
            if (value == "true" || value == "false")
            {
                appProperties->SetProperty("LinksUpToDate", value);
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::Manager:
        {
            appProperties->SetProperty("Manager", value);
        }
        break;
        case Property::ModificationDate:
        {
            coreProperties->SetProperty("dcterms:modified", value);
        }
        break;
        case Property::ScaleCrop:
        {
            if (value == "true" || value == "false")
            {
                appProperties->SetProperty("ScaleCrop", value);
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::SharedDoc:
        {
            if (value == "true" || value == "false")
            {
                appProperties->SetProperty("SharedDoc", value);
            }
            else
            {
                THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Property, "无效的属性值。"s);
            }
        }
        break;
        case Property::Subject:
        {
            coreProperties->SetProperty("dc:subject", value);
        }
        break;
        case Property::Title:
        {
            coreProperties->SetProperty("dc:title", value);
        }
        break;
        default:
            break;
    }
}

void CoreTools::SimpleCSV::DocumentImpl::DeleteProperty(Property theProperty)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    SetProperty(theProperty, "");
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(const CommandSetSheetName& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    appProperties->SetSheetName(command.GetSheetName(), command.GetNewName());
    workbook->SetSheetName(command.GetSheetID(), command.GetNewName());
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(MAYBE_UNUSED const CommandSetSheetVisibility& command) noexcept
{
    CORE_TOOLS_CLASS_IS_VALID_9;
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(MAYBE_UNUSED const CommandSetSheetColor& command) noexcept
{
    CORE_TOOLS_CLASS_IS_VALID_9;
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(const CommandSetSheetIndex& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    auto sheetName = ExecuteQuery(QuerySheetName{ command.GetSheetID() }).GetSheetName();
    workbook->SetSheetIndex(sheetName, command.GetSheetIndex());
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(MAYBE_UNUSED const CommandResetCalcChain& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    archive.DeleteEntry("xl/calcChain.xml");
    auto item = std::find_if(data.begin(), data.end(), [](const auto& item) {
        return item->GetXmlPath() == "xl/calcChain.xml";
    });

    if (item != data.end())
    {
        data.erase(item);
    }
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(MAYBE_UNUSED const CommandAddSharedStrings& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    string entry{
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
        "<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"1\" uniqueCount=\"1\">\n"
        "  <si>\n"
        "    <t/>\n"
        "  </si>\n"
        "</sst>"
    };

    contentTypes->AddOverride("/xl/sharedStrings.xml", ContentType::SharedStrings);
    wbkRelationships->AddRelationship(RelationshipType::SharedStrings, "sharedStrings.xml");
    archive.AddEntry("xl/sharedStrings.xml", entry);
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(const CommandAddWorksheet& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    auto documentSharedPtr = m_Document.lock();

    if (!documentSharedPtr)
    {
        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Internal, SYSTEM_TEXT("document已被释放。"s));
    }

    string emptyWorksheet{
        "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
        "<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\""
        " xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\""
        " xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\""
        " xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">"
        "<dimension ref=\"A1\"/>"
        "<sheetViews>"
        "<sheetView workbookViewId=\"0\"/>"
        "</sheetViews>"
        "<sheetFormatPr baseColWidth=\"10\" defaultRowHeight=\"16\" x14ac:dyDescent=\"0.2\"/>"
        "<sheetData/>"
        "<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>"
        "</worksheet>"
    };

    contentTypes->AddOverride(command.GetSheetPath(), ContentType::Worksheet);
    wbkRelationships->AddRelationship(RelationshipType::Worksheet, command.GetSheetPath().substr(4));
    appProperties->AppendSheetName(command.GetSheetName());
    archive.AddEntry(command.GetSheetPath().substr(1), emptyWorksheet);
    data.emplace_back(std::make_shared<XmlData>(documentSharedPtr,
                                                command.GetSheetPath().substr(1),
                                                wbkRelationships->GetRelationshipByTarget(command.GetSheetPath().substr(4)).GetID(),
                                                ContentType::Worksheet));
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(MAYBE_UNUSED const CommandAddChartsheet& command) noexcept
{
    CORE_TOOLS_CLASS_IS_VALID_9;
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(const CommandDeleteSheet& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    appProperties->DeleteSheetName(command.GetSheetName());
    auto sheetPath = "/xl/" + wbkRelationships->GetRelationshipByID(command.GetSheetID()).GetTarget();
    archive.DeleteEntry(sheetPath.substr(1));
    contentTypes->DeleteOverride(sheetPath);
    wbkRelationships->DeleteRelationship(command.GetSheetID());
    auto iter = std::find_if(data.begin(), data.end(), [sheetPath = std::move(sheetPath)](const auto& item) {
        return item->GetXmlPath() == sheetPath.substr(1);
    });

    if (iter != data.end())
    {
        data.erase(iter);
    }
}

void CoreTools::SimpleCSV::DocumentImpl::ExecuteCommand(const CommandCloneSheet& command)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    auto documentSharedPtr = m_Document.lock();

    if (!documentSharedPtr)
    {
        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Internal, SYSTEM_TEXT("document已被释放。"s));
    }

    const auto internalID = workbook->CreateInternalSheetID();
    auto sheetPath = "/xl/worksheets/sheet"s + std::to_string(internalID) + ".xml"s;
    if (workbook->IsSheetExists(command.GetCloneName()))
    {
        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Internal, "Sheet named \""s + command.GetCloneName() + "\" already exists."s);
    }

    if (wbkRelationships->GetRelationshipByID(command.GetSheetID()).GetType() == RelationshipType::Worksheet)
    {
        contentTypes->AddOverride(sheetPath, ContentType::Worksheet);
        wbkRelationships->AddRelationship(RelationshipType::Worksheet, sheetPath.substr(4));
        appProperties->AppendSheetName(command.GetCloneName());
        auto iter = std::find_if(data.begin(), data.end(), [&](const auto& data) {
            return data->GetXmlPath().substr(3) == wbkRelationships->GetRelationshipByID(command.GetSheetID()).GetTarget();
        });
        if (iter != data.end())
        {
            archive.AddEntry(sheetPath.substr(1), (*iter)->GetRawData());
            data.emplace_back(std::make_shared<XmlData>(documentSharedPtr,
                                                        sheetPath.substr(1),
                                                        wbkRelationships->GetRelationshipByTarget(sheetPath.substr(4)).GetID(),
                                                        ContentType::Worksheet));
        }
    }
    else
    {
        contentTypes->AddOverride(sheetPath, ContentType::Chartsheet);
        wbkRelationships->AddRelationship(RelationshipType::Chartsheet, sheetPath.substr(4));
        appProperties->AppendSheetName(command.GetCloneName());
        auto iter = std::find_if(data.begin(), data.end(), [&](const auto& data) {
            return data->GetXmlPath().substr(3) == wbkRelationships->GetRelationshipByID(command.GetSheetID()).GetTarget();
        });
        if (iter != data.end())
        {
            archive.AddEntry(sheetPath.substr(1), (*iter)->GetRawData());
            data.emplace_back(std::make_shared<XmlData>(documentSharedPtr,
                                                        sheetPath.substr(1),
                                                        wbkRelationships->GetRelationshipByTarget(sheetPath.substr(4)).GetID(),
                                                        ContentType::Chartsheet));
        }
    }

    workbook->PrepareSheetMetadata(command.GetCloneName(), internalID);
}

CoreTools::SimpleCSV::QuerySheetName CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetName& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySheetName{ query.GetSheetID(), workbook->GetSheetName(query.GetSheetID()) };
}

CoreTools::SimpleCSV::QuerySheetIndex CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetIndex& query) const noexcept
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return query;
}

CoreTools::SimpleCSV::QuerySheetVisibility CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetVisibility& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySheetVisibility{ query.GetSheetID(), workbook->GetSheetVisibility(query.GetSheetID()) };
}

CoreTools::SimpleCSV::QuerySheetType CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetType& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    if (wbkRelationships->GetRelationshipByID(query.GetSheetID()).GetType() == RelationshipType::Worksheet)
    {
        return QuerySheetType{ query.GetSheetID(), ContentType::Worksheet };
    }
    else
    {
        return QuerySheetType{ query.GetSheetID(), ContentType::Chartsheet };
    }
}

CoreTools::SimpleCSV::QuerySheetID CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetID& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySheetID{ query.GetSheetName(), workbook->GetSheetID(query.GetSheetName()) };
}

CoreTools::SimpleCSV::QuerySheetRelsID CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetRelsID& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySheetRelsID{ query.GetSheetPath(), wbkRelationships->GetRelationshipByTarget(query.GetSheetPath().substr(4)).GetID() };
}

CoreTools::SimpleCSV::QuerySheetRelsTarget CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QuerySheetRelsTarget& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySheetRelsTarget{ query.GetSheetID(), wbkRelationships->GetRelationshipByID(query.GetSheetID()).GetTarget() };
}

CoreTools::SimpleCSV::QuerySharedStrings CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(MAYBE_UNUSED const QuerySharedStrings& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    return QuerySharedStrings{ sharedStrings };
}

CoreTools::SimpleCSV::QueryXmlData CoreTools::SimpleCSV::DocumentImpl::ExecuteQuery(const QueryXmlData& query) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    auto result = std::find_if(data.begin(), data.end(), [&](const auto& item) {
        return item->GetXmlPath() == query.GetXmlPath();
    });

    if (result == data.end())
    {
        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Internal, "zip 存档中不存在路径。"s);
    }

    return QueryXmlData{ query.GetXmlPath(), *result };
}

string CoreTools::SimpleCSV::DocumentImpl::ExtractXmlFromArchive(const string& path)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

    return archive.HasEntry(path) ? archive.GetEntry(path) : ""s;
}

CoreTools::SimpleCSV::DocumentImpl::XmlDataSharedPtr CoreTools::SimpleCSV::DocumentImpl::GetXmlData(const string& path)
{
    CORE_TOOLS_CLASS_IS_VALID_9;

#include STSTEM_WARNING_PUSH
#include SYSTEM_WARNING_DISABLE(26473)

    return std::const_pointer_cast<XmlData>(static_cast<const ClassType*>(this)->GetXmlData(path));

#include STSTEM_WARNING_POP
}

CoreTools::SimpleCSV::DocumentImpl::ConstXmlDataSharedPtr CoreTools::SimpleCSV::DocumentImpl::GetXmlData(const string& path) const
{
    CORE_TOOLS_CLASS_IS_VALID_CONST_9;

    auto result = std::find_if(data.begin(), data.end(), [&](const auto& item) {
        return item->GetXmlPath() == path;
    });

    if (result == data.end())
    {
        THROW_SIMPLE_CSV_EXCEPTION(CSVExceptionType::Internal, "zip 存档中不存在路径。"s);
    }

    return *result;
}
