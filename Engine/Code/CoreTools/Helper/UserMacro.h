// Copyright (c) 2011-2020
// Threading Core Render Engine
// 作者：彭武阳，彭晔恩，彭晔泽
// 
// 引擎版本：0.0.2.1 (2020/01/18 15:03)

#ifndef CORE_TOOLS_HELPER_USER_MACRO_H
#define CORE_TOOLS_HELPER_USER_MACRO_H

#include "System/Helper/ConfigMacro.h"

#define CLOSE_USE_MEMORY_MANAGER (0x01)
#define CLOSE_ASSERT (0x01 << 1)
#define CLOSE_CLASS_INVARIANT (0x01 << 2)
#define CLOSE_USE_IMPORTANT_EXCPTION_ASSERT (0x01 << 3)
#define CLOSE_CORE_TOOLS_MAX (((CLOSE_USE_IMPORTANT_EXCPTION_ASSERT) << 1) - 1)

// 编译测试（默认为0，最大值为0x0F）
#define COMPILE_CORE_TOOLS_CLOSE 0x00

static_assert(0 <= COMPILE_CORE_TOOLS_CLOSE, "COMPILE_CORE_TOOLS_CLOSE Must be greater than or equal 0.");
static_assert(COMPILE_CORE_TOOLS_CLOSE <= CLOSE_CORE_TOOLS_MAX, "COMPILE_CORE_TOOLS_CLOSE Must be less than or equal CLOSE_CORE_TOOLS_MAX.");

// 是否编译为静态库
#ifdef BUILDING_STATIC
	#define  BUILDING_CORE_TOOLS_STATIC
#endif // BUILDING_STATIC

#ifdef _DEBUG

	#if defined(SYSTEM_PLATFORM_WIN32)		

		// 是否使用断言，默认WIN32 DEBUG版本使用。
		#if !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_ASSERT) != CLOSE_ASSERT
			#define OPEN_ASSERT
		#endif // !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_ASSERT) != CLOSE_ASSERT

		// 是否使用类不变式，默认WIN32 DEBUG版本使用。
		#if !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_CLASS_INVARIANT) != CLOSE_CLASS_INVARIANT
			#define OPEN_CLASS_INVARIANT
		#endif // !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_CLASS_INVARIANT) != CLOSE_CLASS_INVARIANT

	#endif // SYSTEM_PLATFORM_WIN32

	// 是否使用内存管理，默认DEBUG版本使用。
	#if !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_USE_MEMORY_MANAGER) != CLOSE_USE_MEMORY_MANAGER
		#define OPEN_USE_MEMORY
	#endif // !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_USE_MEMORY_MANAGER) != CLOSE_USE_MEMORY_MANAGER

	// 内存管理单例DEBUG版本默认创建。
	#define CORE_TOOLS_MEMORY_ALWAYS_CREATE

#else // !_DEBUG

	// 开启Release版本最高级别的断言，并用抛出异常代替选择对话框。
	#if !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_USE_IMPORTANT_EXCPTION_ASSERT) != CLOSE_USE_IMPORTANT_EXCPTION_ASSERT
		#define OPEN_IMPORTANT_EXCPTION_ASSERT
	#endif // !defined(COMPILE_CORE_TOOLS_CLOSE) || (COMPILE_CORE_TOOLS_CLOSE & CLOSE_USE_IMPORTANT_EXCPTION_ASSERT) != CLOSE_USE_IMPORTANT_EXCPTION_ASSERT

#endif // _DEBUG

#if defined(OPEN_CLASS_INVARIANT) || defined(OPEN_ASSERT) || defined(OPEN_IMPORTANT_EXCPTION_ASSERT)

	#if defined(SYSTEM_PLATFORM_WIN32) && defined(TCRE_USE_MSVC)

		#define CORE_TOOLS_USE_ASSERT_WRITE_TO_OUTPUT_WINDOW
		#define CORE_TOOLS_USE_ASSERT_WRITE_TO_MESSAGE_BOX

	#endif // defined(SYSTEM_PLATFORM_WIN32) && defined(TCRE_USE_MSVC)

#endif // defined(OPEN_CLASS_INVARIANT) || defined(OPEN_ASSERT) || defined(OPEN_IMPORTANT_EXCPTION_ASSERT)

#ifdef OPEN_CLASS_INVARIANT

	// 无继承
	#define CLASS_INVARIANT_DECLARE bool IsValid() const noexcept
	// 基类
	#define CLASS_INVARIANT_VIRTUAL_DECLARE virtual bool IsValid() const noexcept
	// 子类
	#define CLASS_INVARIANT_VIRTUAL_OVERRIDE_DECLARE virtual bool IsValid() const noexcept override 

#else // !OPEN_CLASS_INVARIANT

	#define CLASS_INVARIANT_DECLARE 
	#define CLASS_INVARIANT_VIRTUAL_DECLARE
	#define CLASS_INVARIANT_VIRTUAL_OVERRIDE_DECLARE

#endif // OPEN_CLASS_INVARIANT

#define BOOST_LIB_DIAGNOSTIC

#include "System/Helper/PragmaWarning/Disable26444.h"

#endif // CORE_TOOLS_HELPER_USER_MACRO_H
