///	Copyright (c) 2010-2023
///	Threading Core Render Engine
///
///	◊˜’ﬂ£∫≈ÌŒ‰—Ù£¨≈ÌÍ ∂˜£¨≈ÌÍ ‘Û
///	¡™œµ◊˜’ﬂ£∫94458936@qq.com
///
///	±Í◊º£∫std:c++20
///	“˝«Ê≤‚ ‘∞Ê±æ£∫0.9.0.2 (2023/02/19 20:07)

#include "ModuleCustomAssertMacroTesting.h"
#include "CoreTools/Helper/AssertMacro.h"
#include "CoreTools/Helper/ClassInvariant/CoreToolsClassInvariantMacro.h"
#include "CoreTools/Helper/ModuleCustomAssertMacro.h"
#include "CoreTools/UnitTestSuite/UnitTestDetail.h"

CoreTools::ModuleCustomAssertMacroTesting::ModuleCustomAssertMacroTesting(const OStreamShared& stream)
    : ParentType{ stream }
{
    CORE_TOOLS_SELF_CLASS_IS_VALID_1;
}

CLASS_INVARIANT_PARENT_IS_VALID_DEFINE(CoreTools, ModuleCustomAssertMacroTesting)

void CoreTools::ModuleCustomAssertMacroTesting::DoRunUnitTest()
{
    ASSERT_NOT_THROW_EXCEPTION_0(MainTest);
}

void CoreTools::ModuleCustomAssertMacroTesting::MainTest()
{
    ASSERT_NOT_THROW_EXCEPTION_0(AssertMacroTest);
    ASSERT_NOT_THROW_EXCEPTION_0(LevelTest);
    ASSERT_NOT_THROW_EXCEPTION_0(ConstexprTest);
}

void CoreTools::ModuleCustomAssertMacroTesting::AssertMacroTest()
{
    ASSERT_NOT_THROW_EXCEPTION_0(SystemTest);
    ASSERT_NOT_THROW_EXCEPTION_0(CoreToolsTest);
    ASSERT_NOT_THROW_EXCEPTION_0(NetworkTest);
    ASSERT_NOT_THROW_EXCEPTION_0(DatabaseTest);
    ASSERT_NOT_THROW_EXCEPTION_0(ScriptTest);
    ASSERT_NOT_THROW_EXCEPTION_0(MathematicsTest);
    ASSERT_NOT_THROW_EXCEPTION_0(SoundEffectTest);
    ASSERT_NOT_THROW_EXCEPTION_0(InputOutputTest);
    ASSERT_NOT_THROW_EXCEPTION_0(ResourceManagerTest);
    ASSERT_NOT_THROW_EXCEPTION_0(RenderingTest);
    ASSERT_NOT_THROW_EXCEPTION_0(PhysicsTest);
    ASSERT_NOT_THROW_EXCEPTION_0(ImagicsTest);
    ASSERT_NOT_THROW_EXCEPTION_0(AnimationTest);
    ASSERT_NOT_THROW_EXCEPTION_0(ArtificialIntelligenceTest);
    ASSERT_NOT_THROW_EXCEPTION_0(UserInterfaceTest);
    ASSERT_NOT_THROW_EXCEPTION_0(AssistToolsTest);
    ASSERT_NOT_THROW_EXCEPTION_0(FrameworkTest);
    ASSERT_NOT_THROW_EXCEPTION_0(UserTest);
}

void CoreTools::ModuleCustomAssertMacroTesting::LevelTest()
{
    ASSERT_RANGE(SYSTEM_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(CORE_TOOLS_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(NETWORK_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(DATABASE_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(SCRIPT_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(MATHEMATICS_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(SOUND_EFFECT_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(INPUT_OUTPUT_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(RESOURCE_MANAGER_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(RENDERING_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(PHYSICS_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(IMAGICS_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(ANIMATION_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(ARTIFICIAL_INTELLIGENCE_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(USER_INTERFACE_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(ASSIST_TOOLS_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(FRAMEWORK_ASSERT_LEVEL, 0, 5);
    ASSERT_RANGE(USER_ASSERT_LEVEL, 0, 5);
}

void CoreTools::ModuleCustomAssertMacroTesting::ConstexprTest() noexcept
{
    static_assert(SYSTEM_ASSERT_LEVEL == gSystemAssert);
    static_assert(CORE_TOOLS_ASSERT_LEVEL == gCoreToolsAssert);
    static_assert(NETWORK_ASSERT_LEVEL == gNetworkAssert);
    static_assert(DATABASE_ASSERT_LEVEL == gDatabaseAssert);
    static_assert(SCRIPT_ASSERT_LEVEL == gScriptAssert);
    static_assert(MATHEMATICS_ASSERT_LEVEL == gMathematicsAssert);
    static_assert(SOUND_EFFECT_ASSERT_LEVEL == gSoundEffectAssert);
    static_assert(INPUT_OUTPUT_ASSERT_LEVEL == gInputOutputAssert);
    static_assert(RESOURCE_MANAGER_ASSERT_LEVEL == gResourceManagerAssert);
    static_assert(RENDERING_ASSERT_LEVEL == gRenderingAssert);
    static_assert(PHYSICS_ASSERT_LEVEL == gPhysicsAssert);
    static_assert(IMAGICS_ASSERT_LEVEL == gImagicsAssert);
    static_assert(ANIMATION_ASSERT_LEVEL == gAnimationAssert);
    static_assert(ARTIFICIAL_INTELLIGENCE_ASSERT_LEVEL == gArtificialIntellegenceAssert);
    static_assert(USER_INTERFACE_ASSERT_LEVEL == gUserInterfaceAssert);
    static_assert(ASSIST_TOOLS_ASSERT_LEVEL == gAssistToolsAssert);
    static_assert(FRAMEWORK_ASSERT_LEVEL == gFrameworkAssert);
    static_assert(USER_ASSERT_LEVEL == gUserAssert);
}

void CoreTools::ModuleCustomAssertMacroTesting::SystemTest()
{
    SYSTEM_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SYSTEM_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SYSTEM_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SYSTEM_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SYSTEM_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SYSTEM_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    SYSTEM_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::CoreToolsTest()
{
    CORE_TOOLS_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    CORE_TOOLS_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    CORE_TOOLS_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    CORE_TOOLS_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    CORE_TOOLS_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    CORE_TOOLS_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    CORE_TOOLS_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::NetworkTest()
{
    NETWORK_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    NETWORK_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    NETWORK_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    NETWORK_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    NETWORK_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    NETWORK_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    NETWORK_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::DatabaseTest()
{
    DATABASE_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    DATABASE_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    DATABASE_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    DATABASE_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    DATABASE_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    DATABASE_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    DATABASE_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::ScriptTest()
{
    SCRIPT_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SCRIPT_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SCRIPT_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SCRIPT_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SCRIPT_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SCRIPT_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    SCRIPT_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::MathematicsTest()
{
    MATHEMATICS_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    MATHEMATICS_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    MATHEMATICS_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    MATHEMATICS_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    MATHEMATICS_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    MATHEMATICS_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    MATHEMATICS_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::SoundEffectTest()
{
    SOUND_EFFECT_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SOUND_EFFECT_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SOUND_EFFECT_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SOUND_EFFECT_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SOUND_EFFECT_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    SOUND_EFFECT_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    SOUND_EFFECT_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::InputOutputTest()
{
    INPUT_OUTPUT_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    INPUT_OUTPUT_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    INPUT_OUTPUT_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    INPUT_OUTPUT_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    INPUT_OUTPUT_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    INPUT_OUTPUT_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    INPUT_OUTPUT_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::ResourceManagerTest()
{
    RESOURCE_MANAGER_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RESOURCE_MANAGER_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RESOURCE_MANAGER_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RESOURCE_MANAGER_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RESOURCE_MANAGER_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RESOURCE_MANAGER_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    RESOURCE_MANAGER_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::RenderingTest()
{
    RENDERING_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RENDERING_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RENDERING_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RENDERING_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RENDERING_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    RENDERING_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    RENDERING_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::PhysicsTest()
{
    PHYSICS_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    PHYSICS_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    PHYSICS_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    PHYSICS_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    PHYSICS_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    PHYSICS_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    PHYSICS_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::ImagicsTest()
{
    IMAGICS_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    IMAGICS_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    IMAGICS_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    IMAGICS_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    IMAGICS_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    IMAGICS_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    IMAGICS_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::AnimationTest()
{
    ANIMATION_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ANIMATION_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ANIMATION_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ANIMATION_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ANIMATION_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ANIMATION_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    ANIMATION_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::ArtificialIntelligenceTest()
{
    ARTIFICIAL_INTELLIGENCE_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ARTIFICIAL_INTELLIGENCE_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ARTIFICIAL_INTELLIGENCE_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ARTIFICIAL_INTELLIGENCE_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ARTIFICIAL_INTELLIGENCE_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ARTIFICIAL_INTELLIGENCE_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    ARTIFICIAL_INTELLIGENCE_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::UserInterfaceTest()
{
    USER_INTERFACE_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_INTERFACE_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_INTERFACE_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_INTERFACE_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_INTERFACE_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_INTERFACE_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    USER_INTERFACE_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::AssistToolsTest()
{
    ASSIST_TOOLS_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ASSIST_TOOLS_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ASSIST_TOOLS_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ASSIST_TOOLS_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ASSIST_TOOLS_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    ASSIST_TOOLS_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    ASSIST_TOOLS_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::FrameworkTest()
{
    FRAMEWORK_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    FRAMEWORK_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    FRAMEWORK_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    FRAMEWORK_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    FRAMEWORK_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    FRAMEWORK_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    FRAMEWORK_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}

void CoreTools::ModuleCustomAssertMacroTesting::UserTest()
{
    USER_ASSERTION_0(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_USE_FUNCTION_DESCRIBED_0(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_ASSERTION_1(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_USE_FUNCTION_DESCRIBED_1(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_ASSERTION_2(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_USE_FUNCTION_DESCRIBED_2(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_ASSERTION_3(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_USE_FUNCTION_DESCRIBED_3(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_ASSERTION_4(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_USE_FUNCTION_DESCRIBED_4(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");

    USER_ASSERTION_DEBUG(true, "∂œ—‘≤‚ ‘£°");
    USER_ASSERTION_DEBUG_USE_FUNCTION_DESCRIBED(true, CORE_TOOLS_FUNCTION_DESCRIBED, "∂œ—‘≤‚ ‘£°");
}
