Accelerated C++

官方网站 
http://www.acceleratedcpp.com。

●
作者：Andrew Koenig、Barbara E.Moo
其他书籍：《C++ 沉思录》，Barbara E.Moo《C++ Primer》。

知识点 
1.	C++基础知识。 
2.	C++基础知识练习。

代码 
1.  书籍代码。

前言	
	教授C++编程的一种新方法
	我们的方法对初学者及熟练的程序员同样适用
	抽象
		★	我们把抽象定义为可供选择的忽略，我们认为这是现代程序设计中最重要的方法。
	覆盖范围
	给熟练的C和C++程序员的一点提醒 
	本书的结构
	让本书物尽其用
	致谢
第0章 开始学习C++
	0.1 注释
	0.2 #include指令
	0.3 主函数main
	0.4 花括号
	0.5 使用标准库进行输出
	0.6 返回语句
	0.7 一些较为深入的观察
	0.8 小结
	习题
第1章 使用字符串
	1.1 输入
	1.2 为姓名装框
	1.3 小结
	习题
第2章 循环和计数
	2.1 问题
	2.2 程序的整体结构
	2.3 输出数目未知的行
	2.4 输出一行
		2.4.1 输出边界字符
			2.4.1.1 if语句
			2.4.1.2 逻辑运算符
		2.4.2 输出非边界字符
	2.5 完整的框架程序
		2.5.1 略去重复使用的std::
		2.5.2 使用for语句来缩短程序
		2.5.3 压缩检测
		2.5.4 完整的框架程序
	2.6 计数
	2.7 小结
	习题
第3章 使用批量数据
	3.1 计算学生成绩
		3.1.1 检测输入
		3.1.2 循环不变式
	3.2 用中值代替平均值
		3.2.1 把数据集合存储在向量中
		3.2.2 产生输出
		3.2.3 一些更为深入的观察
	3.3 小结
	习题
第4章 组织程序和数据
	4.1 组织计算
		4.1.1 查找中值
		4.1.2 重新制定计算成绩的策略
		4.1.3 读家庭作业成绩
		4.1.4 三种函数参数
		4.1.5 使用函数来计算学生的成绩
	4.2 组织数据
		4.2.1 把一个学生的所有数据设置在一起
		4.2.2 处理学生记录
		4.2.3 生成报表
	4.3 把各部分代码连接到一起
	4.4 把计算成绩的程序分块
	4.5 修正后的计算成绩的程序
	4.6 小结
	习题
第5章 使用顺序容器并分析字符串
	5.1 按类别来区分学生
		5.1.1 就地删除元素
		5.1.2 顺序存取与随机存取
	5.2 迭代器
		5.2.1 迭代器类型
		5.2.2 迭代器操作
		5.2.3 一点语法知识
	5.3 用迭代器来代替索引
	5.4 重新思考数据结构以实现更好的性能
	5.5 list类型
		5.5.1 一些重要的差别
		5.5.2 一个烦人的话题
	5.6 分割字符串
	5.7 测试split函数
	5.8 连接字符串
		5.8.1 为图表装框
		5.8.2 纵向连接
		5.8.3 横向连接
	5.9 小结
	习题
第6章 使用库算法
	6.1 分析字符串
		6.1.1 另一个实现split的方法
		6.1.2 回文
		6.1.3 查找URL
	6.2 对计算成绩的方案进行比较
		6.2.1 处理学生记录
		6.2.2 分析成绩
		6.2.3 计算基于家庭作业平均成绩的总成绩
		6.2.4 上交的家庭作业的中值
	6.3 对学生进行分类并回顾一下我们的问题
		6.3.1 一种两次传递的解决方案
		6.3.2 一种一次传递的解决方案
	6.4 算法、容器以及迭代器
	6.5 小结
	习题
第7章 使用关联容器
	7.1 支持高效查找的容器
	7.2 计算单词数
	7.3 产生一个交叉引用表
	7.4 生成句子
		7.4.1 表示规则
		7.4.2 读入文法
		7.4.3 生成句子
		7.4.4 选择一个随机元素
	7.5 关于性能的一点说明 
	7.6 小结
	习题
第8章 编写泛型函数
	8.1 泛型函数是什么？
		8.1.1 未知类型的中值
		8.1.2 模板实例化
		8.1.3 泛型函数和类型
	8.2 数据结构独立性
		8.2.1 算法与迭代器
		8.2.2 顺序只读访问
		8.2.3 顺序只写访问 
		8.2.4 顺序读——写访问
		8.2.5 可逆访问 
		8.2.6 随机访问
		8.2.7 迭代器区间和越界值
	8.3 输入输出迭代器
	8.4 用迭代器来提高适应性
	8.5 小结
	习题
第9章 定义新类型
	9.1 回顾一下Student_info
	9.2 自定义类型
		9.2.1 成员函数
		9.2.2 非成员函数
	9.3 保护
		9.3.1 存取器函数
		9.3.2 检查对象是否为空
	9.4 Student_info类
	9.5 构造函数
		9.5.1 缺省构造函数
		9.5.2 带参数的构造函数
	9.6 使用Student_info类
	9.7 小结
	习题
第10章 管理内存和低级数据结构
	10.1 指针与数组
		10.1.1 指针
		10.1.2 指向函数的指针
		10.1.3 数组
		10.1.4 指针算法
		10.1.5 索引
		10.1.6 数组初始化
	10.2 再看字符串常量 
	10.3 初始化字符串指针数组
	10.4 main函数的参数
	10.5 文件读写
		10.5.1 标准错误流
		10.5.2 处理多个输入输出文件
	10.6 三种内存分配文法
		10.6.1 为一个对象分配/释放内存
		10.6.2 为一个数组分配/释放内存
	10.7 小结
	习题
第11章 定义抽象数据类型
	11.1 Vec类
	11.2 实现Vec类
		11.2.1 内存分配
		11.2.2 构造函数
		11.2.3 类型定义
		11.2.4 索引与大小
		11.2.5 返回迭代器的操作
	11.3 复制控制
		11.3.1 复制构造函数
		11.3.2 赋值运算符
		11.3.3 赋值不是初始化
		11.3.4 析构函数
		11.3.5 默认操作
		11.3.6 “三位一体”规则
	11.4 动态的Vec类型对象
	11.5 灵活的内存管理 
		11.5.1 最后的Vec类
	11.6 小结
	习题
第12章 使类对象像一个数值一样工作
	12.1 一个简单的string类
	12.2 自动转换
	12.3 Str操作
		12.3.1 输入——输出运算符
		12.3.2 友员函数
		12.3.3 其他二元运算符
		12.3.4 混合类型表达式
		12.3.5 设计二元运算符
	12.4 有些转换是危险的
	12.5 类型转换操作函数
	12.6 类型转换与内存管理 
	12.7 小结
	习题
第13章 使用继承与动态绑定
	13.1 一个简单的string类
		13.1.1 回顾保护类型
		13.1.2 操作函数
		13.1.3 继承与构造函数
	13.2 多态和虚拟函数
		13.2.1 在不知道对象类型的情况下获得对象的值
		13.2.2 动态绑定
		13.2.3 简单回顾
	13.3 用继承来解决我们的问题
		13.3.1 容纳（实际上）未知类型的容器
		13.3.2 虚拟析构函数
	13.4 一个简单的句柄类
		13.4.1 读取句柄
		13.4.2 复制句柄对象
	13.5 使用句柄类
	13.6 微妙之处	
		13.6.1 继承与容器
		13.6.2 需要哪一个函数？
	13.7 小结
	习题
第14章 近乎自动地管理内存
	14.1 用来复制对象的句柄
		14.1.1 一个通用句柄类
		14.1.2 使用一个通用句柄
	14.2 引用计数句柄
	14.3 可以让你决定什么时候共享数据的句柄
	14.4 可控句柄的一个改进
		14.4.1 复制我们不能控制的类型
		14.4.2 复制在什么时候是必要的？
	14.5 小结
	习题
第15章 再探字符图形
	15.1 设计
		15.1.1 使用继承来模拟结构
		15.1.2 Pic_base类
		15.1.3 派生类
		15.1.4 复制控制
	15.2 实现
		15.2.1 实现用户接口
		15.2.2 String_Pic类
		15.2.3 补齐输出结果
		15.2.4 VCat_Pic类
		15.2.5 HCat_Pic类
		15.2.6 Frame_Pic类
		15.2.7 不要忘了友元类声明 
	15.3 小结
	习题
第16章 今后如何学习C++
	16.1 好好地复用你已经掌握的知识
	16.2 学习更多的东西
	习题
附录
	附录A C++语法细节
		A.1 声明
			A.1.1 指定说明
			A.1.2 声明符
		A.2 类型
			A.2.1 整数类型
				A.2.1.1 整型
				A.2.1.2 布尔类型
				A.2.1.3 字符类型
				A.2.1.4 字符表示法
			A.2.2 浮点类型
			A.2.3 常量表达式
			A.2.4 类型转换
			A.2.5 枚举类型
			A.2.6 重载
		A.3 表达式
			A.3.1 运算符
		A.4 语句
	附录B 标准库一览
		B.1 输入——输出
		B.2 容器和迭代器	
			B.2.1 共有的容器操作
			B.2.2 顺序容器的操作
			B.2.3 其他的顺序容器操作
			B.2.4 关联容器的操作
			B.2.5 迭代器
			B.2.6 向量
			B.2.7 链表
			B.2.8 字符串
			B.2.9 对
			B.2.10 图
		B.3 算法