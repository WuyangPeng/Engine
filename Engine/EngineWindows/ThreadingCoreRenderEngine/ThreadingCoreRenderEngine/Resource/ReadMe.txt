编码规范

1.	命名空间，类名和函数名以大写字母开头，驼峰式大小写。
2.	变量名以小写字母开头，驼峰式大小写。
3.	宏必须全大写，且以下划线隔开。
4.	成员变量使用m_开头，静态变量使用s_开头，类静态变量使用sm_开头，全局变量使用g_开头。
5.	使用enum class的方式定义枚举。枚举名以大写字母开头，驼峰式大小写。
6.	头文件使用.h的扩展名，源文件使用.cpp的扩展名，内联文件使用.inl的扩展名，json配置文件使用.json的扩展名，
    日志文件使用.log的扩展名，模板实现文件使用.h的扩展名，并以Detail结尾。
7.	导出类前加XXX_DEFAULT_DECLARE，XXX为所在库名的全大写。
8.	内部类（不导出类）前加XXX_HIDDEN_DECLARE，XXX为所在库名的全大写。
9.	尽量不直接使用除0和1之外的整数值，避免使用文字量，应使用具名常量或具有适当作用域的变量代替。
10. 不同平台或项目配置命名规则： Static + $(Platform) + $(Configuration) ，如StaticX64Debug。

设计规范

1.	使用C++11标准。
2.	所有在各个操作系统实现不同的函数，全转移到System库。
3.	除System库外，尽量不使用参数返回值。与性能相关，需要使用参数返回时，转移到各个库的底层调用模块中，如Mathematics库增加MathematicsSystem模块。
4.	除Sysetm库外，所有类必须使用类不变式，并定义ClassType和必要的ParentType，且尽量使用ASSETRTION。
    由于调试性能原因，不直接调用内部类的类不变式，即调用m_Impl->IsValid();。
5.	所有单例必须使用锁。
6.	将警告设置为Level4，并将警告视为错误。
7.	只包含必须包含的头文件。
8.	禁止浮点数直接比较相等或不相等。
9.  在没有明显的理由需要指定数据类型时，一般使用auto。
10. 使用初始化器列表的形式初始化，只在必要时使用括号形式（如vector）和等号形式（如auto）初始化。
11.	除特殊需求外，禁止返回空指针、传递空指针和使用裸指针。
12. 使用using代替typedef。
13. 头文件的包含顺序：从最特殊到最一般。本地目录中的任何头文件首先被包含，
    然后是我们自己的所有工具头文件，随后是第三方库头文件，接着是标准C++库头文件和C库头文件。
14. 除System库外，整型转换使用boost::numeric_cast，而不是static_cast。
15. 使用make_shared和make_unique来创建智能指针，而不是new。
16. 使用必要的noexcept、final和override。
17. 对直接抛出异常的函数使用[[noreturn]] 。
18. 除非你确实需要共享所有权，否则别轻易使用shared_ptr，请使用unique_ptr。
19. 同时存在标准库和boost库实现时，使用标准库的实现。
20. 对于内置类型，优先使用bool、char、int和double。需要使用其它类型时，尽量使用固定大小的整型。网络或系统相关必须使用固定大小的整型。
21.	使用Impl模式封装类，通过定义ClassShareType来标识类是属于：
   （1）当类必须共享资源时，复制只是复制类的指针成员，需要在类前注释（共享类），构造函数和赋值运算符简单的复制指针。共享类必须以Share结尾。
   （2）类没有修改自身的成员函数，为了提高性能，复制只是复制类的指针成员，构造函数和赋值运算符简单的复制指针。
   （3）类有修改自身的成员函数，此时定义复制构造函数和赋值运算符对类进行深复制。
   （4）类有修改自身的成员函数，构造函数和赋值运算符简单的复制指针，只在调用非常量成员函数时对类进行深复制，即写时复制机制（Copy on Write，COW）。
        以下情况禁止使用延迟复制：
		导出类有虚函数的情况下。
        导出类内部某个成员析构函数有特殊调用的情况下。
		导出类有返回内部成员的引用或指针的情况下。
   （5）类禁止复制。
22.	所有类必须有单元测试，并通过测试。单元测试包括完整测试、固定值测试、随机值测试和迭代测试，每个测试一个概念。
    单元测试一般不测试类不变式和断言已测试的契约。测试使用构造――操作――检验模式，必须满足五个条件：快速、独立、可重复、自足验证和及时。测试最重要的要素是可读性。

建议规范

1.	函数要短，命名清晰。
2.	减少if、for的使用，使用子类或for_each。
3.  对于p是指针，使用if(p != nullptr)，而不是更简洁的if(p)或if(nullptr != p)。
4.  避免使用do语句。
5.  使用弱指针保存对象，而不使用保存对象id，然后通过单例去索引。
6.  任何编写类模板或函数模板的程序员都应该将概念检查作为他们所编写的代码的正常部分。
7.  定义宏为空时，使用(void)0，可防止宏被用作右值。
8.  声明一个类或函数时，使用包含头文件的方法。如果一个库很大，应该提供一个头文件的简写形式。