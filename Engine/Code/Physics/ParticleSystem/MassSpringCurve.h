// Copyright (c) 2011-2019
// Threading Core Render Engine
// ◊˜’ﬂ£∫≈ÌŒ‰—Ù£¨≈ÌÍ ∂˜£¨≈ÌÍ ‘Û
// 
// “˝«Ê∞Ê±æ£∫0.0.0.3 (2019/07/29 18:12)

#ifndef PHYSICS_PARTICLE_SYSTEM_MASS_SPRING_CURVE_H
#define PHYSICS_PARTICLE_SYSTEM_MASS_SPRING_CURVE_H

#include "Physics/PhysicsDll.h"

#include "ParticleSystemManager.h"

namespace Physics
{
	template <typename Real, typename TVector>
	class   MassSpringCurve : public ParticleSystemManager<Real,TVector>
	{
	public:
		// Construction and destruction.  This class represents a set of N-1
		// springs connecting N masses that lie on a curve.  Spring i connects
		// masses i-1 and i for 1 <= i <= N-1.
		MassSpringCurve (int numParticles, Real step);
		virtual ~MassSpringCurve ();

		int GetNumSprings () const;
		Real& Constant (int i);  // spring constant
		Real& Length (int i);  // spring resting length

		// Callback for acceleration (ODE solver uses x" = F/m) applied to
		// particle i.  The positions and velocities are not necessarily
		// m_akPosition and m_akVelocity since the ODE solver evaluates the
		// impulse function at intermediate positions.
		virtual TVector Acceleration (int i, Real time,
			const TVector* positions, const TVector* velocities);

		// The default external force is zero.  Derive a class from this one to
		// provide nonzero external forces such as gravity, wind, friction,
		// and so on.  This function is called by Acceleration(...) to append the
		// acceleration F/m generated by the external force F.
		virtual TVector ExternalAcceleration (int i, Real time, const TVector* positions, const TVector* velocities);

	protected:
		using ParticleSystemManager<Real,TVector>::mNumParticles;
		using ParticleSystemManager<Real,TVector>::mInvMasses;

		int mNumSprings;
		Real* mConstants;
		Real* mLengths;
	};

	using MassSpringCurve2f = MassSpringCurve<float,Mathematics::Vector2F>;
	using MassSpringCurve2d = MassSpringCurve<double,Mathematics::Vector2D>;
	using MassSpringCurve3f = MassSpringCurve<float,Mathematics::Vector3F>;
	using MassSpringCurve3d = MassSpringCurve<double,Mathematics::Vector3D>;
}

#endif // PHYSICS_PARTICLE_SYSTEM_MASS_SPRING_CURVE_H
