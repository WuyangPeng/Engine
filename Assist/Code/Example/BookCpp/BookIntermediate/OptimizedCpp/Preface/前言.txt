前言
读者朋友，你好！我的名字叫Kurt，是一名狂热的编程爱好者。
我编写软件已经超过35 年了。我从未就职于微软、谷歌、Facebook、苹果或者其他知名公司。但是在这些年里，除了几个短暂的假期外，我每天都在写代码。最近20年里，我几乎只编写C++程序，并与其他睿智的开发人员讨论C++。所以我有资格写一本关于优化C++代码的书。我还发表过许多文章，包括规范、评论、手册、学习笔记以及博客文章
（http://oldhandsblog.blogspot.com）等。有时令我吃惊的是，我共事过的睿智能干的程序员中，只有半数能将两个符合英文语法的句子合并在一起。
我最喜欢的名言之一出自艾萨克・牛顿爵士的一封信。他在信中写道：“我之所以看得更远，是因为我站在巨人的肩上。”现在，我也站在巨人的肩上了，特别是阅读过他们的著作：有优雅的小书，如Brian Kernighan和Dennis Ritchie 合著的《C 程序设计语言》；有充满智慧且走在技术前沿的书籍，如Scott Meyers的Effective C++系列；有充满挑战又能
扩展思维的书籍，如Andrei Alexandrescu的《C++ 设计新思维》；有科学严谨且讲解准确的书籍，如Bjarne Stroustrup和Margaret Ellis合著的The Annotated C++ Reference Manual。在我职业生涯的大部分时间，我都从没想过有一天可以自己写一本书。但是突然有一天，我发现我需要写这本书。
那么为什么我要写一本关于C++性能优化的书呢？
在21世纪初期，C++曾一度受到诟病。C语言的支持者指出C++程序的性能不如以C语言编写的相同代码。拥有巨额营销预算的著名企业吹嘘它们自己的面向对象语言，宣称C++语言难以使用，而它们的工具才是未来。各大高校也决定教授Java语言，因为它有一套免费的工具链。由于以上种种原因，大公司投资大笔金钱使用Java、C# 或是PHP来编
写网站和操作系统。C++看起来正在逐渐衰落。对于任何相信C++语言是强大且有用的工具的人而言，那是一段困难的时期。
就在这时，一件有趣的事情发生了。处理器核心的处理速度停止增长，但是工作负荷在持续加大。于是，那些大公司又开始重新雇用C++程序员去解决它们的扩容问题。用C++从头开始重新编写代码的成本变得比在数据中心消耗的电费要便宜。突然之间，C++再度流行起来了。
C++与2016年年初那些高市场份额的编程语言（注1）相比非常突出的一点是，它为开发人员提供了一连串的可选实现方式，从全自动、自动支持到精准手动控制。C++赋予了开发人员掌控性能权衡的力量，这种掌控让性能优化成为可能。
市面上介绍如何优化C++代码的书并不多。其中之一是由Dov Bulka与David Mayhew精心研究所著，不过现在看来有些过时的《提高C++性能的编程技术》。这两位作者似乎与我有相似的职业经历，也发现了很多相同的优化原则。若想看看其他人怎么看待本书中提
出的问题，推荐从《提高C++性能的编程技术》开始。另外，Scott Meyers 等人也广泛地讨论过如何避免使用复制构造函数。
需要掌握的关于代码优化的知识太多了，足够写出10本书。在本书中，我精选出了自己在工作中频繁使用的技术和能够带来最大性能提升效果的技术进行讲解。奋战在性能优化前线的读者可能会有疑问，为什么本书中没有介绍任何有助于他们解决问题的对策。对于
这些疑问，我只能说：“对不起，内容太多，篇幅有限。”
欢迎大家将勘误、评论和最喜欢的优化策略发送至antelope_book@guntheroth.com。
我热爱软件开发。我享受永不停歇地练习每一种新的循环方式和接口。 编写代码是一门科学，也是一门写诗艺术；它是一项冷僻的技术，一种内在的艺术形式，以至于除了少数同行外几乎没有人懂得欣赏它。优雅的函数中蕴藏着美感，被广泛使用的强大的惯用法中蕴
藏着智慧。但令人遗憾的是，每一部史诗般的软件诗篇（如Stepanov的标准模板库），都对应着10 000 行单调、庞大、枯燥的代码。
本书的根本目标是帮助读者思考优化软件之美。请记住这一点并践行之。请看得更远一些！

注1：可以从http://www.tiobe.com/tiobe-index/ 查询各编程语言的市场份额。――译者注