///	Copyright (c) 2010-2021
///	Threading Core Render Engine
///
///	作者：彭武阳，彭晔恩，彭晔泽
///	联系作者：94458936@qq.com
///
///	标准：std:c++17
///	引擎版本：0.8.0.0 (2021/12/19 13:38)

#ifndef CORE_TOOLS_TEXT_PARSING_TEXT_PARSING_CONSTANT_H
#define CORE_TOOLS_TEXT_PARSING_TEXT_PARSING_CONSTANT_H

#include "System/Helper/UnicodeUsing.h"

namespace CoreTools
{
    namespace TextParsing
    {
        constexpr auto g_Dot = SYSTEM_TEXT('.');
        constexpr auto g_Space = SYSTEM_TEXT(' ');
        constexpr auto g_Colon = SYSTEM_TEXT(':');
        constexpr auto g_BackSlash = SYSTEM_TEXT('\\');
        constexpr auto g_ForwardSlash = SYSTEM_TEXT('/');
        constexpr auto g_LeftBrackets = SYSTEM_TEXT('(');
        constexpr auto g_RightBrackets = SYSTEM_TEXT(')');
        constexpr auto g_equalSignChar = SYSTEM_TEXT('=');
        constexpr auto g_LeftAngleBracket = SYSTEM_TEXT('<');
        constexpr auto g_RightAngleBracket = SYSTEM_TEXT('>');
        constexpr auto g_NewlineCharacter = SYSTEM_TEXT('\n');
        constexpr auto g_LeftSquareBrackets = SYSTEM_TEXT('[');
        constexpr auto g_LeftBigParantheses = SYSTEM_TEXT('{');
        constexpr auto g_RightBigParantheses = SYSTEM_TEXT('}');
        constexpr auto g_RightSquareBrackets = SYSTEM_TEXT(']');

        constexpr System::StringView g_CsvExtension{ SYSTEM_TEXT(".csv") };
        constexpr System::StringView g_XlsxExtension{ SYSTEM_TEXT(".xlsx") };

        constexpr System::StringView g_Is{ SYSTEM_TEXT("Is") };
        constexpr System::StringView g_IDCapital{ SYSTEM_TEXT("ID") };
        constexpr System::StringView g_EnumIDDescribe{ SYSTEM_TEXT("id") };
        constexpr System::StringView g_IOStream{ SYSTEM_TEXT("iostream") };
        constexpr System::StringView g_EnumNameDescribe{ SYSTEM_TEXT("name") };
        constexpr System::StringView g_EnumDescribe{ SYSTEM_TEXT("describe") };

        constexpr System::StringView g_Or{ SYSTEM_TEXT("|") };
        constexpr System::StringView g_And{ SYSTEM_TEXT("&") };
        constexpr System::StringView g_Comma{ SYSTEM_TEXT(",") };
        constexpr System::StringView g_Init{ SYSTEM_TEXT("{}") };
        constexpr System::StringView g_Less{ SYSTEM_TEXT(" < ") };
        constexpr System::StringView g_Left{ SYSTEM_TEXT("<< ") };
        constexpr System::StringView g_Greater{ SYSTEM_TEXT(" > ") };
        constexpr System::StringView g_equalSign{ SYSTEM_TEXT("=") };
        constexpr System::StringView g_Brackets{ SYSTEM_TEXT("() ") };
        constexpr System::StringView g_Newline{ SYSTEM_TEXT("\r\n") };
        constexpr System::StringView g_FileSplit{ SYSTEM_TEXT("/\\") };
        constexpr System::StringView g_DoubleColon{ SYSTEM_TEXT("::") };
        constexpr System::StringView g_LessEqual{ SYSTEM_TEXT(" <= ") };
        constexpr System::StringView g_Annotation{ SYSTEM_TEXT("///") };
        constexpr System::StringView g_StringComma{ SYSTEM_TEXT("\\,") };
        constexpr System::StringView g_LambdaEnd{ SYSTEM_TEXT("});\n") };
        constexpr System::StringView g_AndNewline{ SYSTEM_TEXT(" &&\n") };
        constexpr System::StringView g_GreaterEqual{ SYSTEM_TEXT(" > ") };
        constexpr System::StringView g_RightBracket{ SYSTEM_TEXT(")\n") };
        constexpr System::StringView g_Indentation{ SYSTEM_TEXT("    ") };
        constexpr System::StringView g_QuotationMarks{ SYSTEM_TEXT("\"") };
        constexpr System::StringView g_ExpressionAnd{ SYSTEM_TEXT(") && (") };
        constexpr System::StringView g_KeySplit{ SYSTEM_TEXT("+-*/&|^=<> ") };
        constexpr System::StringView g_SemicolonNewline{ SYSTEM_TEXT(";\n") };
        constexpr System::StringView g_DoubleForwardSlash{ SYSTEM_TEXT("//") };
        constexpr System::StringView g_ClassEndBrackets{ SYSTEM_TEXT("};\n") };
        constexpr System::StringView g_FunctionEndBrackets{ SYSTEM_TEXT("}\n") };
        constexpr System::StringView g_InitSystemTextEnd{ SYSTEM_TEXT("\"s), ") };
        constexpr System::StringView g_MemberIndentation{ SYSTEM_TEXT("      ") };
        constexpr System::StringView g_FunctionBeginBrackets{ SYSTEM_TEXT("{\n") };
        constexpr System::StringView g_SemicolonAnnotation{ SYSTEM_TEXT(";  // ") };
        constexpr System::StringView g_ScopeExpressionSplit{ SYSTEM_TEXT("()[]<>=-  ") };
        constexpr System::StringView g_RightAngleBracketSemicolonNewline{ SYSTEM_TEXT(">;\n") };

        constexpr System::StringView g_HeadFileExtensionName{ SYSTEM_TEXT(".h") };
        constexpr System::StringView g_SourceFileExtensionName{ SYSTEM_TEXT(".cpp") };
        constexpr System::StringView g_FwdHeadFileExtensionName{ SYSTEM_TEXT("Fwd.h") };
        constexpr System::StringView g_DetailHeadFileExtensionName{ SYSTEM_TEXT("Detail.h") };
        constexpr System::StringView g_ContainerHeadFileExtensionName{ SYSTEM_TEXT("Container.h") };
        constexpr System::StringView g_ContainerSourceFileExtensionName{ SYSTEM_TEXT("Container.cpp") };

        constexpr System::StringView g_Map{ SYSTEM_TEXT("#include <map>\n") };
        constexpr System::StringView g_Deque{ SYSTEM_TEXT("#include <deque>\n") };
        constexpr System::StringView g_Memory{ SYSTEM_TEXT("#include <memory>\n") };
        constexpr System::StringView g_Vector{ SYSTEM_TEXT("#include <vector>\n") };
        constexpr System::StringView g_Algorithm{ SYSTEM_TEXT("#include <algorithm>\n") };
        constexpr System::StringView g_Filesystem{ SYSTEM_TEXT("#include <filesystem>\n") };
        constexpr System::StringView g_IOStreamInclude{ SYSTEM_TEXT("#include <iostream>\n") };
        constexpr System::StringView g_UnorderedMap{ SYSTEM_TEXT("#include <unordered_map>\n") };

        constexpr System::StringView g_EnumMacro{ SYSTEM_TEXT("#include \"System/Helper/EnumOperator.h\"\n") };
        constexpr System::StringView g_UnicodeUsing{ SYSTEM_TEXT("#include \"System/Helper/UnicodeUsing.h\"\n") };
        constexpr System::StringView g_LogMacroMacro{ SYSTEM_TEXT("#include \"CoreTools/Helper/LogMacro.h\"\n") };
        constexpr System::StringView g_CoreToolsHeadFile{ SYSTEM_TEXT("#include \"CoreTools/CoreToolsDll.h\"\n") };
        constexpr System::StringView g_ExceptionMacro{ SYSTEM_TEXT("#include \"CoreTools/Helper/ExceptionMacro.h\"\n") };
        constexpr System::StringView g_IncludeCSVRow{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/CSV/CSVRow.h\"\n") };
        constexpr System::StringView g_IncludeCSVHead{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/CSV/CSVHead.h\"\n") };
        constexpr System::StringView g_IncludeVector2{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/Vector2.h\"\n") };
        constexpr System::StringView g_IncludeVector3{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/Vector3.h\"\n") };
        constexpr System::StringView g_IncludeVector4{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/Vector4.h\"\n") };
        constexpr System::StringView g_TextParsingFwd{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/TextParsingFwd.h\"\n") };
        constexpr System::StringView g_NumericCast{ SYSTEM_TEXT("#include \"System/Helper/PragmaWarning/NumericCast.h\"\n") };
        constexpr System::StringView g_CSVRowDetail{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/CSV/CSVRowDetail.h\"\n") };
        constexpr System::StringView g_IncludeCSVContent{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/CSV/CSVContent.h\"\n") };
        constexpr System::StringView g_IncludeIntVector2{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/IntVector2.h\"\n") };
        constexpr System::StringView g_IncludeIntVector3{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/IntVector3.h\"\n") };
        constexpr System::StringView g_IncludeIntVector4{ SYSTEM_TEXT("#include \"CoreTools/TextParsing/Data/IntVector4.h\"\n") };
        constexpr System::StringView g_UserClassInvariantMacro{ SYSTEM_TEXT("#include \"CoreTools/Helper/ClassInvariant/UserClassInvariantMacro.h\"\n") };
        constexpr System::StringView g_CoreToolsClassInvariantMacro{ SYSTEM_TEXT("#include \"CoreTools/Helper/ClassInvariant/CoreToolsClassInvariantMacro.h\"\n") };

        constexpr System::StringView g_Fwd{ SYSTEM_TEXT("Fwd") };
        constexpr System::StringView g_Get{ SYSTEM_TEXT("Get") };
        constexpr System::StringView g_Base{ SYSTEM_TEXT("Base") };
        constexpr System::StringView g_Type{ SYSTEM_TEXT("type") };
        constexpr System::StringView g_True{ SYSTEM_TEXT("true") };
        constexpr System::StringView g_Flags{ SYSTEM_TEXT("Flags") };
        constexpr System::StringView g_False{ SYSTEM_TEXT("false") };
        constexpr System::StringView g_OriginalMap{ SYSTEM_TEXT("map") };
        constexpr System::StringView g_Parsing{ SYSTEM_TEXT("Parsing") };
        constexpr System::StringView g_CapitalConst{ SYSTEM_TEXT("Const") };
        constexpr System::StringView g_Container{ SYSTEM_TEXT("Container") };
        constexpr System::StringView g_SharedPtr{ SYSTEM_TEXT("SharedPtr") };
        constexpr System::StringView g_StringCast{ SYSTEM_TEXT("StringCast") };
        constexpr System::StringView g_MappingContainer{ SYSTEM_TEXT("MappingContainer") };
        constexpr System::StringView g_OriginalUnorderedMap{ SYSTEM_TEXT("unordered_map") };

        constexpr System::StringView g_If{ SYSTEM_TEXT("if (") };
        constexpr System::StringView g_Int{ SYSTEM_TEXT("int ") };
        constexpr System::StringView g_Auto{ SYSTEM_TEXT("auto ") };
        constexpr System::StringView g_IfNot{ SYSTEM_TEXT("if (!") };
        constexpr System::StringView g_Void{ SYSTEM_TEXT("void ") };
        constexpr System::StringView g_Bool{ SYSTEM_TEXT("bool ") };
        constexpr System::StringView g_Else{ SYSTEM_TEXT("else\n") };
        constexpr System::StringView g_Const{ SYSTEM_TEXT("const ") };
        constexpr System::StringView g_Class{ SYSTEM_TEXT("class ") };
        constexpr System::StringView g_Final{ SYSTEM_TEXT(" final") };
        constexpr System::StringView g_Return{ SYSTEM_TEXT("return ") };
        constexpr System::StringView g_TypeEnd{ SYSTEM_TEXT(" type)") };
        constexpr System::StringView g_End{ SYSTEM_TEXT(".end());\n") };
        constexpr System::StringView g_CEnd{ SYSTEM_TEXT(".cend())\n") };
        constexpr System::StringView g_RhsCopy{ SYSTEM_TEXT("& rhs) ") };
        constexpr System::StringView g_Ifndef{ SYSTEM_TEXT("#ifndef ") };
        constexpr System::StringView g_Define{ SYSTEM_TEXT("#define ") };
        constexpr System::StringView g_Begin{ SYSTEM_TEXT(".begin(), ") };
        constexpr System::StringView g_RhsMove{ SYSTEM_TEXT("&& rhs) ") };
        constexpr System::StringView g_Public{ SYSTEM_TEXT("public:\n") };
        constexpr System::StringView g_Empty{ SYSTEM_TEXT(".empty())\n") };
        constexpr System::StringView g_Emplace{ SYSTEM_TEXT(".emplace(") };
        constexpr System::StringView g_Endif{ SYSTEM_TEXT("#endif  // ") };
        constexpr System::StringView g_CBegin{ SYSTEM_TEXT(".cbegin(), ") };
        constexpr System::StringView g_Noexcept{ SYSTEM_TEXT(" noexcept") };
        constexpr System::StringView g_Private{ SYSTEM_TEXT("private:\n") };
        constexpr System::StringView g_Explicit{ SYSTEM_TEXT("explicit ") };
        constexpr System::StringView g_FindCEnd{ SYSTEM_TEXT(".cend();\n") };
        constexpr System::StringView g_Checking{ SYSTEM_TEXT("Checking()") };
        constexpr System::StringView g_Namespace{ SYSTEM_TEXT("namespace ") };
        constexpr System::StringView g_SystemTextEnd{ SYSTEM_TEXT("\"s)) ") };
        constexpr System::StringView g_HeadFileSuffix{ SYSTEM_TEXT(".h\"\n") };
        constexpr System::StringView g_Override{ SYSTEM_TEXT(" override;\n") };
        constexpr System::StringView g_FunctionConst{ SYSTEM_TEXT("() const") };
        constexpr System::StringView g_EnumFilePrefix{ SYSTEM_TEXT("/Flags/") };
        constexpr System::StringView g_ConstNewline{ SYSTEM_TEXT(") const\n") };
        constexpr System::StringView g_FindCBegin{ SYSTEM_TEXT(".cbegin();\n") };
        constexpr System::StringView g_CsvRowVariable{ SYSTEM_TEXT("{ csvRow.") };
        constexpr System::StringView g_CSVRowCall{ SYSTEM_TEXT(">(csvRow));\n") };
        constexpr System::StringView g_DoubleColonConst{ SYSTEM_TEXT("::Const") };
        constexpr System::StringView g_SystemTextInitEnd{ SYSTEM_TEXT("\"s) }") };
        constexpr System::StringView g_IncludePrefix{ SYSTEM_TEXT("#include \"") };
        constexpr System::StringView g_VirtualDestructor{ SYSTEM_TEXT("virtual ~") };
        constexpr System::StringView g_CSVRowParameter{ SYSTEM_TEXT(">(csvRow);\n") };
        constexpr System::StringView g_ConstSemicolonNewline{ SYSTEM_TEXT(") const;\n") };
        constexpr System::StringView g_ParentTypeMember{ SYSTEM_TEXT(": ParentType{},\n") };
        constexpr System::StringView g_TemplateSpecialization{ SYSTEM_TEXT("template <>\n") };

        constexpr System::StringView g_Nodiscard{ SYSTEM_TEXT("NODISCARD ") };
        constexpr System::StringView g_SystemTextBegin{ SYSTEM_TEXT("(SYSTEM_TEXT(\"") };
        constexpr System::StringView g_SystemTextValue{ SYSTEM_TEXT(", SYSTEM_TEXT(\"") };
        constexpr System::StringView g_LogSystemTextBegin{ SYSTEM_TEXT("<< SYSTEM_TEXT(\"") };
        constexpr System::StringView g_InitSystemTextBegin{ SYSTEM_TEXT("{ SYSTEM_TEXT(\"") };
        constexpr System::StringView g_LogAssert{ SYSTEM_TEXT("<< LOG_SINGLETON_TRIGGER_ASSERT;\n") };
        constexpr System::StringView g_ThrowException{ SYSTEM_TEXT("THROW_EXCEPTION(SYSTEM_TEXT(\"") };
        constexpr System::StringView g_ClassInvariantDeclare{ SYSTEM_TEXT("CLASS_INVARIANT_DECLARE;\n") };
        constexpr System::StringView g_OpenClassInvariant{ SYSTEM_TEXT("#ifdef OPEN_CLASS_INVARIANT\n") };
        constexpr System::StringView g_WarnLog{ SYSTEM_TEXT("LOG_SINGLETON_ENGINE_APPENDER(Warn, User)\n") };
        constexpr System::StringView g_UserSelfClassIsValid9{ SYSTEM_TEXT("USER_SELF_CLASS_IS_VALID_9;\n") };
        constexpr System::StringView g_UserSelfClassIsValid1{ SYSTEM_TEXT("USER_SELF_CLASS_IS_VALID_1;\n") };
        constexpr System::StringView g_UserClassIsValidConst9{ SYSTEM_TEXT("USER_CLASS_IS_VALID_CONST_9;\n") };
        constexpr System::StringView g_UserClassIsValidConst1{ SYSTEM_TEXT("USER_CLASS_IS_VALID_CONST_1;\n") };
        constexpr System::StringView g_ClassInvariantStubDefine{ SYSTEM_TEXT("CLASS_INVARIANT_STUB_DEFINE(") };
        constexpr System::StringView g_OpenClassInvariantEndif{ SYSTEM_TEXT("#endif  // OPEN_CLASS_INVARIANT\n") };
        constexpr System::StringView g_ClassInvariantFinalDeclare{ SYSTEM_TEXT("CLASS_INVARIANT_FINAL_DECLARE;\n") };
        constexpr System::StringView g_ClassInvariantVirtualDeclare{ SYSTEM_TEXT("CLASS_INVARIANT_VIRTUAL_DECLARE;\n") };
        constexpr System::StringView g_CoreToolsClassIsValidConst9{ SYSTEM_TEXT("CORE_TOOLS_CLASS_IS_VALID_CONST_9;\n") };

        constexpr System::StringView g_NotUnique{ SYSTEM_TEXT("表不是唯一的\")\n") };
        constexpr System::StringView g_ContainerZero{ SYSTEM_TEXT("表为空。\"s));\n") };
        constexpr System::StringView g_RepeatKey{ SYSTEM_TEXT("表存在重复主键。\")\n") };
        constexpr System::StringView g_RepeatKeyHint{ SYSTEM_TEXT("表存在重复主键：\")\n") };
        constexpr System::StringView g_TypeDescribeNotFind{ SYSTEM_TEXT("未找到对应的类型。\"s));\n") };
        constexpr System::StringView g_BaseNotGetArray{ SYSTEM_TEXT("表基类不允许获取数组。\"s));\n") };
        constexpr System::StringView g_BaseNotGetString{ SYSTEM_TEXT("表基类不允许获取字符串。\"s));\n") };
        constexpr System::StringView g_BaseNotGetMapping{ SYSTEM_TEXT("表基类不允许获取映射值。\"s));\n") };
        constexpr System::StringView g_ConditionNotFind{ SYSTEM_TEXT("表未找到满足条件的配置信息。\"s));\n") };
        constexpr System::StringView g_KeyNotFind{ SYSTEM_TEXT("表未找到key = \"s) + System::ToString(key) + SYSTEM_TEXT(\"的配置信息。\"s));\n") };

        constexpr System::StringView g_Sort{ SYSTEM_TEXT("std::sort(") };
        constexpr System::StringView g_GetEnum{ SYSTEM_TEXT("GetEnum") };
        constexpr System::StringView g_AtZero{ SYSTEM_TEXT(".at(0);\n") };
        constexpr System::StringView g_IntKey{ SYSTEM_TEXT("int key{};\n") };
        constexpr System::StringView g_GetFirst{ SYSTEM_TEXT("::GetFirst") };
        constexpr System::StringView g_IfIter{ SYSTEM_TEXT("if (iter != ") };
        constexpr System::StringView g_FindKey{ SYSTEM_TEXT(".find(key);\n") };
        constexpr System::StringView g_AtIndex{ SYSTEM_TEXT(".at(index);\n") };
        constexpr System::StringView g_EnumClass{ SYSTEM_TEXT("enum class ") };
        constexpr System::StringView g_ArraySize{ SYSTEM_TEXT(".size());\n") };
        constexpr System::StringView g_Key{ SYSTEM_TEXT("(int key) noexcept") };
        constexpr System::StringView g_KeyConst{ SYSTEM_TEXT(" key) const;\n") };
        constexpr System::StringView g_EraseIter{ SYSTEM_TEXT(".erase(iter, ") };
        constexpr System::StringView g_ReturnKey{ SYSTEM_TEXT("return key;\n") };
        constexpr System::StringView g_KeyMember{ SYSTEM_TEXT(": key{ key }\n") };
        constexpr System::StringView g_CSVNameSpace{ SYSTEM_TEXT("CSVConfigure") };
        constexpr System::StringView g_GenerateKey{ SYSTEM_TEXT(" GenerateKey(") };
        constexpr System::StringView g_SizeZero{ SYSTEM_TEXT("if (size == 0)\n") };
        constexpr System::StringView g_BaseGetKey{ SYSTEM_TEXT("Base->GetKey()") };
        constexpr System::StringView g_ReturnTrue{ SYSTEM_TEXT("return true;\n") };
        constexpr System::StringView g_UsingMap{ SYSTEM_TEXT("using std::map;\n") };
        constexpr System::StringView g_ReturnIter{ SYSTEM_TEXT("return *iter;\n") };
        constexpr System::StringView g_CountConst{ SYSTEM_TEXT("Count() const\n") };
        constexpr System::StringView g_GetSharedPtr{ SYSTEM_TEXT("SharedPtr Get") };
        constexpr System::StringView g_EndFunction{ SYSTEM_TEXT("End() const;\n") };
        constexpr System::StringView g_Unique{ SYSTEM_TEXT("auto iter = unique(") };
        constexpr System::StringView g_BaseSecond{ SYSTEM_TEXT("Base).second)\n") };
        constexpr System::StringView g_MakeShared{ SYSTEM_TEXT(" = make_shared<") };
        constexpr System::StringView g_StaticMapBegin{ SYSTEM_TEXT("static map<") };
        constexpr System::StringView g_ReturnFalse{ SYSTEM_TEXT("return false;\n") };
        constexpr System::StringView g_CopyAssignment{ SYSTEM_TEXT("& operator=(") };
        constexpr System::StringView g_SystemString{ SYSTEM_TEXT("System::String") };
        constexpr System::StringView g_ClassType{ SYSTEM_TEXT("using ClassType = ") };
        constexpr System::StringView g_ReturnResult{ SYSTEM_TEXT("return result;\n") };
        constexpr System::StringView g_ContainerGet{ SYSTEM_TEXT("Container()->Get") };
        constexpr System::StringView g_TypeDescribe{ SYSTEM_TEXT("> typeDescribe{ ") };
        constexpr System::StringView g_FinalInherit{ SYSTEM_TEXT(" final : public ") };
        constexpr System::StringView g_NodiscardConst{ SYSTEM_TEXT("NODISCARD Const") };
        constexpr System::StringView g_SizeGreaterOne{ SYSTEM_TEXT("if (1 < size)\n") };
        constexpr System::StringView g_ParentType{ SYSTEM_TEXT("using ParentType = ") };
        constexpr System::StringView g_EnumCastString{ SYSTEM_TEXT("EnumCastString(") };
        constexpr System::StringView g_CountFunction{ SYSTEM_TEXT("Count() const;\n") };
        constexpr System::StringView g_BeginFunction{ SYSTEM_TEXT("Begin() const;\n") };
        constexpr System::StringView g_EndFunctionConst{ SYSTEM_TEXT("End() const\n") };
        constexpr System::StringView g_KeyConstFunction{ SYSTEM_TEXT(" key) const\n") };
        constexpr System::StringView g_RangeFirst{ SYSTEM_TEXT("if (range.first != ") };
        constexpr System::StringView g_BeginSecond{ SYSTEM_TEXT(".begin()->second;\n") };
        constexpr System::StringView g_ConstIterator{ SYSTEM_TEXT("::const_iterator ") };
        constexpr System::StringView g_GetEnumDescribe{ SYSTEM_TEXT("GetEnumDescribe(") };
        constexpr System::StringView g_ConstAutoIter{ SYSTEM_TEXT("const auto iter = ") };
        constexpr System::StringView g_HeadDetailFileSuffix{ SYSTEM_TEXT("Detail.h\"\n") };
        constexpr System::StringView g_IfFunction{ SYSTEM_TEXT("if (function(value))\n") };
        constexpr System::StringView g_ForLoop{ SYSTEM_TEXT("for (const auto& value : ") };
        constexpr System::StringView g_ConstexprStatic{ SYSTEM_TEXT("constexpr static ") };
        constexpr System::StringView g_CEndFunction{ SYSTEM_TEXT(".cend(), function);\n") };
        constexpr System::StringView g_EndMakeShared{ SYSTEM_TEXT(".end(), make_shared<") };
        constexpr System::StringView g_ConstNoexcept{ SYSTEM_TEXT("() const noexcept;\n") };
        constexpr System::StringView g_IsValid{ SYSTEM_TEXT("IsValid() const noexcept\n") };
        constexpr System::StringView g_BeginFunctionConst{ SYSTEM_TEXT("Begin() const\n") };
        constexpr System::StringView g_NodiscardVirtual{ SYSTEM_TEXT("NODISCARD virtual ") };
        constexpr System::StringView g_IndexParameter{ SYSTEM_TEXT("(int index) const;\n") };
        constexpr System::StringView g_GetKeyConst{ SYSTEM_TEXT("GetKey() const noexcept") };
        constexpr System::StringView g_GetContainer{ SYSTEM_TEXT("NODISCARD Container Get") };
        constexpr System::StringView g_GetFirstSharedPtr{ SYSTEM_TEXT("SharedPtr GetFirst") };
        constexpr System::StringView g_DoubleColonGenerateKey{ SYSTEM_TEXT("::GenerateKey") };
        constexpr System::StringView g_ContainerResult{ SYSTEM_TEXT("Container result{};\n") };
        constexpr System::StringView g_MaybeUnusedConst{ SYSTEM_TEXT("(MAYBE_UNUSED const ") };
        constexpr System::StringView g_SharedPtrConst{ SYSTEM_TEXT("std::shared_ptr<const ") };
        constexpr System::StringView g_ParsingContent{ SYSTEM_TEXT("Parsing(csvContent);\n") };
        constexpr System::StringView g_NoexceptDefault{ SYSTEM_TEXT("noexcept = default;\n") };
        constexpr System::StringView g_Loop{ SYSTEM_TEXT("for (auto i = 0; i < size; ++i)\n") };
        constexpr System::StringView g_EmplaceBack{ SYSTEM_TEXT(".emplace_back(make_shared<") };
        constexpr System::StringView g_ReturnIterSecond{ SYSTEM_TEXT("return iter->second;\n") };
        constexpr System::StringView g_ReturnRangeFirst{ SYSTEM_TEXT("return *range.first;\n") };
        constexpr System::StringView g_IndexParameterConst{ SYSTEM_TEXT("(int index) const\n") };
        constexpr System::StringView g_UsingSharedPtr{ SYSTEM_TEXT("using std::shared_ptr;\n") };
        constexpr System::StringView g_BaseKeyFunction{ SYSTEM_TEXT("Base>(key), function);\n") };
        constexpr System::StringView g_StringKeyMap{ SYSTEM_TEXT("static map<System::String, ") };
        constexpr System::StringView g_CSVRow{ SYSTEM_TEXT("(const CoreTools::CSVRow& csvRow)") };
        constexpr System::StringView g_ReturnValueSecond{ SYSTEM_TEXT("return value.second;\n") };
        constexpr System::StringView g_Describe{ SYSTEM_TEXT("(const System::String& describe)") };
        constexpr System::StringView g_LowerBound{ SYSTEM_TEXT("const auto iter = lower_bound(") };
        constexpr System::StringView g_UsingMakeShared{ SYSTEM_TEXT("using std::make_shared;\n") };
        constexpr System::StringView g_EqualRange{ SYSTEM_TEXT("const auto range = equal_range(") };
        constexpr System::StringView g_IterFindIf{ SYSTEM_TEXT("const auto iter = std::find_if(") };
        constexpr System::StringView g_EndNoexceptFunction{ SYSTEM_TEXT("End() const noexcept;\n") };
        constexpr System::StringView g_GetContainerConstEnd{ SYSTEM_TEXT("::GetContainer() const\n") };
        constexpr System::StringView g_ReturnCsvContainerGet{ SYSTEM_TEXT("return csvContainer.Get") };
        constexpr System::StringView g_FunctionParameter{ SYSTEM_TEXT("(Function function) const;\n") };
        constexpr System::StringView g_EndFunctionConstNoexcept{ SYSTEM_TEXT("End() const noexcept\n") };
        constexpr System::StringView g_KeyJudge{ SYSTEM_TEXT(".cend() && (*iter)->GetKey() == key)\n") };
        constexpr System::StringView g_CountOverrideFunction{ SYSTEM_TEXT("Count() const override;\n") };
        constexpr System::StringView g_ResultEmplaceBack{ SYSTEM_TEXT("result.emplace_back(value);\n") };
        constexpr System::StringView g_DescribeConst{ SYSTEM_TEXT(">(const String& describe) const\n") };
        constexpr System::StringView g_BeginNoexceptFunction{ SYSTEM_TEXT("Begin() const noexcept;\n") };
        constexpr System::StringView g_FunctionTemplate{ SYSTEM_TEXT("template <typename Function>\n") };
        constexpr System::StringView g_ParentTypeIsValid{ SYSTEM_TEXT("if (ParentType::IsValid() &&\n") };
        constexpr System::StringView g_ContainerParameter{ SYSTEM_TEXT("Container& csvContainer) const") };
        constexpr System::StringView g_ReturnNumericCast{ SYSTEM_TEXT("return boost::numeric_cast<int>(") };
        constexpr System::StringView g_FunctionParameterConst{ SYSTEM_TEXT("(Function function) const\n") };
        constexpr System::StringView g_IfFunctionValueSecond{ SYSTEM_TEXT("if (function(value.second))\n") };
        constexpr System::StringView g_BeginFunctionConstNoexcept{ SYSTEM_TEXT("Begin() const noexcept\n") };
        constexpr System::StringView g_IterTypeDescribe{ SYSTEM_TEXT("if (iter != typeDescribe.cend())\n") };
        constexpr System::StringView g_IndexParameterOverride{ SYSTEM_TEXT("(int index) const override;\n") };
        constexpr System::StringView g_CSVContent{ SYSTEM_TEXT("(const CoreTools::CSVContent& csvContent)") };
        constexpr System::StringView g_EndOverrideFunction{ SYSTEM_TEXT("End() const noexcept override;\n") };
        constexpr System::StringView g_FindTypeDescribe{ SYSTEM_TEXT("const auto iter = typeDescribe.find(") };
        constexpr System::StringView g_ContentSize{ SYSTEM_TEXT("const auto size = csvContent.GetCount();\n") };
        constexpr System::StringView g_UsingNamespaceLiterals{ SYSTEM_TEXT("using namespace std::literals;\n") };
        constexpr System::StringView g_BeginOverrideFunction{ SYSTEM_TEXT("Begin() const noexcept override;\n") };
        constexpr System::StringView g_GetKeyConstOverride{ SYSTEM_TEXT(" GetKey() const noexcept override;\n") };
        constexpr System::StringView g_CSVRowStringCastEnum{ SYSTEM_TEXT(" CoreTools::CSVRow::StringCastEnum<") };
        constexpr System::StringView g_ReturnKeyLess{ SYSTEM_TEXT("return (*lhs).GetKey() < (*rhs).GetKey();\n") };
        constexpr System::StringView g_ReturnKeyEqual{ SYSTEM_TEXT("return (*lhs).GetKey() == (*rhs).GetKey();\n") };
        constexpr System::StringView g_MaybeUnusedIndexParameter{ SYSTEM_TEXT("(MAYBE_UNUSED int index) const;\n") };
        constexpr System::StringView g_GetContainerConst{ SYSTEM_TEXT("NODISCARD Container GetContainer() const;\n") };
        constexpr System::StringView g_MaybeUnusedIndexParameterConst{ SYSTEM_TEXT("(MAYBE_UNUSED int index) const\n") };
        constexpr System::StringView g_ResultEmplaceBackValueSecond{ SYSTEM_TEXT("result.emplace_back(value.second);\n") };
        constexpr System::StringView g_Function{ SYSTEM_TEXT(".end(), [](const auto& lhs, const auto& rhs) noexcept {\n") };
        constexpr System::StringView g_ReturnContainerRange{ SYSTEM_TEXT("return Container{ range.first, range.second };\n") };
        constexpr System::StringView g_ParsingFunction{ SYSTEM_TEXT("void Parsing(const CoreTools::CSVContent& csvContent);\n") };
        constexpr System::StringView g_GetMappingContainerConst{ SYSTEM_TEXT("NODISCARD MappingContainer GetContainer() const;\n") };
        constexpr System::StringView g_LambdaFunctionInit{ SYSTEM_TEXT("const auto function = [](const auto& lhs, const auto& rhs) noexcept {\n") };
        constexpr System::StringView g_CSVRowInit{ SYSTEM_TEXT("CoreTools::CSVRow csvRow{ csvContent.GetCSVHead(), csvContent.GetContent(i) };\n") };
        constexpr System::StringView g_CSVRowZeroInit{ SYSTEM_TEXT("CoreTools::CSVRow csvRow{ csvContent.GetCSVHead(), csvContent.GetContent(0) };\n") };

        constexpr std::string_view g_ID{ "Id" };
        constexpr std::string_view g_X1{ "xl/" };
        constexpr std::string_view g_Ref{ "ref" };
        constexpr std::string_view g_RGB{ "rgb" };
        constexpr std::string_view g_Min{ "min" };
        constexpr std::string_view g_Max{ "max" };
        constexpr std::string_view g_XML{ ".xml" };
        constexpr std::string_view g_RID{ "r:id" };
        constexpr std::string_view g_ChildC{ "c" };
        constexpr std::string_view g_Name{ "name" };
        constexpr std::string_view g_Column{ "col" };
        constexpr std::string_view g_Sheet{ "sheet" };
        constexpr std::string_view g_State{ "state" };
        constexpr std::string_view g_Width{ "width" };
        constexpr std::string_view g_AttributeR{ "r" };
        constexpr std::string_view g_Columns{ "cols" };
        constexpr std::string_view g_Sheets{ "sheets" };
        constexpr std::string_view g_Target{ "Target" };
        constexpr std::string_view g_SheetPr{ "sheetPr" };
        constexpr std::string_view g_SheetID{ "sheetId" };
        constexpr std::string_view g_TabColor{ "tabColor" };
        constexpr std::string_view g_SheetData{ "sheetData" };
        constexpr std::string_view g_Dimension{ "dimension" };
        constexpr std::string_view g_DefaultCellAddress{ "A1" };
        constexpr std::string_view g_SheetViews{ "sheetViews" };
        constexpr std::string_view g_TabSelected{ "tabSelected" };
        constexpr std::string_view g_CustomWidth{ "customWidth" };
        constexpr std::string_view g_DefinedNames{ "definedNames" };
        constexpr std::string_view g_LocalSheetID{ "localSheetId" };
        constexpr std::string_view g_Worksheets{ "/xl/worksheets/sheet" };
    }
}

#endif  // CORE_TOOLS_TEXT_PARSING_TEXT_PARSING_CONSTANT_H