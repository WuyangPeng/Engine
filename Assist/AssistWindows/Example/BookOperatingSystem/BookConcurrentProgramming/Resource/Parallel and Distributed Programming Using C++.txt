C++ 并行与分布式编程 （Parallel and Distributed Programming Using C++）

★
作者：Cameron Hughes 、Tracey Hughes

其他书籍：《C++ 多核高级编程》、《C++ 面向对象多线程编程》

知识点 
1.	并发编程基础知识。 

序言
	并行和分布式编程的挑战
	并行和分布式编程的方法
	为什么选用C++
	并行和分布式编程的库
	新的单一UNIX规范标准
	本书面向的读者
	支持的开发环境
	补充
	致谢
第1章 并发编程的乐趣
	1.1 什么是并发？
	1.2 并行编程的优点
	1.3 分布式编程的优点
	1.4 最少的工作需求
	1.5 软件并发的基本层次
	1.6 C++中没有支持并行性的关键字
	1.7 并行和分布式编程的编程环境
	小结——关于并发
第2章 并行和分布式编程的挑战
	2.1 范例转移
	2.2 协调问题
	2.3 间或的硬件失效与软件退出
	2.4 过多的并行化或分布式可能产生负面后果
	2.5 选择一种好的体系结构需要进行研究
	2.6 对不同测试和调试技术的需求
	2.7 在并行或分布式设计中必须进行交流
	小结
第3章 将C++程序分成多个任务
	3.1 进程的定义
	3.2 进程剖析
	3.3 进程状态
	3.4 进程调度
	3.5 上下文切换
	3.6 创建进程
	3.7 终止进程
	3.8 进程资源
	3.9 什么是异步进程和同步进程
	3.10 将程序分成多个任务
	小结
第4章 将C++程序分成多个线程
	4.1 线程的定义
	4.2 线程剖析
	4.3 线程调度
	4.4 线程资源
	4.5 线程模型
	4.6 Pthread库介绍
	4.7 简单多线程程序剖析
	4.8 创建线程
	4.9 管理线程
	4.10 线程安全和线程库
	4.11 将程序分解成多个线程
	小结
第5章 任务间并发的同步
	5.1 执行顺序的协调
	5.2 同步数据访问
	5.3 什么是信号量？
	5.4 面向对象的同步方法
	小结
第6章 通过PVM为C++增加并行编程能力
	6.1 PVM支持的经典并行模型
	6.2 为C++语言提供的PVM库
	6.3 PVM的基本机制
	6.4 在PVM任务中访问标准输入（stdin）和标准输出（stdout）
	小结
第7章 错误处理、异常和软件可靠性
	7.1 什么是软件可靠性？
	7.2 软件层和硬件组件中的失效
	7.3 依赖于软件规范的缺陷定义
	7.4 考虑在哪里处理缺陷与在哪里处理异常
	7.5 软件可靠性：一个简单方案
	7.6 在错误处理中使用Map对象
	7.7 C++的异常处理机制
	7.8 事件图、逻辑表达式和逻辑图
	小结
第8章 C++分布式面向对象编程
	8.1 工作的分解与封装
	8.2 访问其他地址空间中对象
	8.3 基本CORBA消费者剖析
	8.4 CORBA生产者剖析
	8.5 CORBA应用程序的基本设计蓝图
	8.6 名字服务
	8.7 深入了解对象适配器
	8.8 实现池与接口池
	8.9 使用CORBA的简单分布式Web服务
	8.10 交易服务
	8.11 客户/服务器范例
	小结
第9章 MPI与使用模板的SPMD和MPMD模型
	9.1	MPI的工作分解结构
	9.2 使用模板函数表示MPI任务
	9.3 简化MPI通信
	小结
第10章 可视化并发和分布式系统设计
	10.1 可视化结构 
	10.2 可视化并发行为
	10.3 可视化整个系统
	小结
第11章 设计支持并发的组件
	11.1 使用接口类
	11.2 深入了解面向对象的互斥和接口类
	11.3 保持流隐喻
	11.4 与PVM流协同工作的自定义类的设计 
	11.5 把面向对象的管道和fifo作为低级建块
	11.6 支持并发的框架类组件
	小结
第12章 实现面向agent的体系结构
	12.1 什么是agent？
	12.2 什么是面向agent编程？
	12.3 基本agent组件
	12.4 用C++实现agent
	12.5 多agent系统
	小结
第13章 使用PVM、线程和C++组件的黑板体系结构
	13.1 黑板模型
	13.2 构造黑板的方法
	13.3 知识库剖析
	13.4 黑板的控制策略
	13.5 使用CORBA对象实现黑板
	13.6 使用全局对象实现黑板
	13.7 使用Pthread激活知识库
	小结
附录A 类与对象图解
附录B 系统接口