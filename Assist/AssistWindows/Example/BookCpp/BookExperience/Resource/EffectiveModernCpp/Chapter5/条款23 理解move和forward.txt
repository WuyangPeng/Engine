条款23 理解std::move和std::forward
	★	std::move并不进行任何移动，std::forward也不进行任何转发。这两者在运行期都无所作为。
	★	std::move和std::forward都是仅仅执行强制型别转换的函数。
		std::move无条件地将实参强制转换成右值，而std::forward则仅在某个特定条件满足时才执行同一个强制转换。
	★	std::move将实参强制转换成右值。
	★	std::move做的是强制型别转换，不做的是移动。
	★	如果想取得对某个对象执行移动操作的能力，则不要将其声明为常量 ，
		因为针对常量对象执行的移动操作将一声不响地变换成复制操作。
	★	std::forward仅在特定条件下才实施这样的强制型别转换。std::forward是一个有条件强制型别转换。
	★	仅当其实参是使用右值完成初始化时，std::forward才会执行向右值型别的强制类型转换。
	★	std::move的诱人之处在于：一是方便，二是减少错误可能，三是更加清晰。
	★	std::move所要传达的意思是无条件地向右值型别的强制型别转换，
		而std::forward则想说明仅仅对绑定到右值的引用实施向右值型别的强制型别转换。
	★	std::move实施的是无条件的向右值型别的强制型别转换。就其本身而言，它不会执行移动操作。
	★	仅当传入的实参被绑定到右值时，std::forward才针对该实参实施向右值型别的强制型别转换。
	★	在运行期，std::move和std::forward都不会做任何操作。