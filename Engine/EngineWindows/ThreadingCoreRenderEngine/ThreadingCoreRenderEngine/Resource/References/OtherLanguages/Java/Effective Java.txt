Effective Java 
 （第3版）

官方网站：
http://joshbloch.com/effectivejava、 https://github.com/jbloch/effective-java-3e-source-code。

★★
作者：Joshua Bloch
其他书籍：《Java 并发编程实战》、《Java 解惑》。

知识点 
1.	Java 基础知识。

代码
1.	chapter2（第2章 创建和销毁对象）

要点

第1章 引言
	★	基本的原则：
		1.	清晰性和简洁性最为重要：组件的用户永远也不应该被其行为所迷惑。
		2.	组件要尽可能小，但又不能太小。
		3.	代码应该被重用，而不是被拷贝。
		4.	组件之间的依赖性应该尽可能地降到最小。
		5.	错误应该尽早被检测出来，最好是在编译时就发现并解决。
第2章 创建和销毁对象
	第1条	用静态工厂方法代替构造器
		★	类可以提供一个公有的静态工厂方法，它只是一个返回类的实例的静态方法。
		★	静态工厂方法与构造器不同的优势在于：
			1.	它们有名称。
			2.	不必在每次调用它们的时候都创建一个新对象。
			3.	它们可以返回原返回类型的任何子类型的对象。
			4.	所返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。
			5.	方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不存在。
		★	这使得不可变类可以使用预先构建好的实例，或者将构建好的实例缓存起来，进行重复利用，从而避免创建不必要的重复对象。
		★	当类需要多个带有相同签名的构造器时，就用静态工厂方法代替构造器，并且仔细地选择名称以便突出静态工厂方法之间的区别。
		★	服务提供者框架是指这样一个系统：多个服务提供者实现一个服务，系统为服务提供者的客户端提供多个实现，并把它们从多个实现中解耦出来。
		★	静态工厂方法的主要缺点在：
			1.	子类如果不含公有的或者受保护的构造器，就不能被子类化。
			2.	程序员很难发现它们。
		★	静态工厂方法和公有构造器都各有用处，我们需要理解它们各自的长处。
			静态工厂经常更合适，切忌第一反应就是提供公有的构造器，不先考虑静态工厂。
	第2条	遇到多个构造器参数时要考虑使用构建器
		★	重叠构造器模式可行，但是当有许多参数的时候，客户端代码会很难缩写，并且仍然较难以阅读。
		★	如果类的构造器或者静态工厂中具有多个参数，设计这种类时，
			Builde模式就是一种不错的选择，特别是当大多数参数都是可选或者类型相同的时候。
			与使用重叠构造器模式相比，使用Builder模式的客户端代码将更易于阅读和编写，构建器也比JavaBeans更加安全。
		★	使类成为Singleton会使它的害户端测试变得十分困难，因为不可能给Singleton替换模拟实现，除非实现一个充当其类型的接口。
		★	享有特权的客户端可以借助Access bleObject.setAccessible方法，通过反射机制调用私有构造器。
			如果需要抵御这种攻击，可以修改构造器，让它在被要求创建第二个实例的时候抛出异常。
		★	单元素枚举类型经常成为实现Singleton的最佳方法。
		★	由于只有当类不包含显式的构造器时，编译器才会生成缺省的构造器，因此只要让这个类包含一个私有构造器，它就不能被实例化。