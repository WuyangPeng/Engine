代码整洁之道 （Clean Code）

★★★☆
作者：Robert C.Martin 
其他书籍：《程序设计的模式语言·卷三》、《敏捷软件开发：原则、模式与实践》、《代码整洁之道：程序员的职业素养》、
《敏捷整洁之道：回归本源》、《架构整洁之道》

实用程序员网站：
https://pragprog.com/

开源测试工具：
http://www.fitnesse.org/ 、https://junit.org/junit5/。

知识点 
1.	整洁代码操作实践。

要点
1.	细节之中自有天地，整洁成就卓越代码。（封面）
2.	代码质量与其整洁度成正比。（内容提要）
3.	稍后等于永不。（1.2 糟糕的代码）
4.	让营地比你来时更干净。（1.6 童子军军规）
5.	废话都是冗余。Variable一词永远不就当出现在变量名中。
	Table一词永远不应当出现在表名中。（2.4 做有意义的区分）
6.	if语句、else语句、while语句等，其中的代码块应该只有一行。
	该行大抵应该是一个函数调用语句。（3.1 短小）
7.	别给糟糕的代码加注释——重新写吧。（第4章 注释）
8.	过程式代码难以添加新数据结构，因为必须修改所有函数。
	面向对象代码难以添加新函数，因为必须修改所有类。（6.2 数据、对象的反对称性）
9.	整洁测试有三个要素：可读性，可读性和可读性。（9.3 整洁的测试）
10. 测试呈现了构造——操作——检验模式。（9.3 整洁的测试）
11.	每个测试一个概念。（9.4 每个测试一个断言）

第1章 整洁代码
	★	将需求明确到机器可以执行的程度，就是编程要做的事。而这种规约正是代码。
	★	归置良好的需求就像代码一样正式，也能作为代码的可执行测试来使用。
	★	花点时间保持代码整洁不但有关效率，还有关生存。
	★	制造混乱无助于赶上期限。
	★	整洁的代码只做好一件事。
	★	整洁的代码便于其他人加以增补。
	★	简单代码，依其重要顺序：
		1.	能通过所有测试。
		2.	没有重复代码。
		3.	体现系统中的全部设计理念。
		4.	包括尽量少的实体，比如类、方法、函数等。
	★	如果每个例程都让你感到深合已意，那就是整洁代码。
	★	漂亮的代码让编程语言像是专为解决那个问题而存在。
第2章 有意义的命名
	★	取个好名字的几条简单规则：
		1.	名副其实。
		2.	避免误导。
		3.	做有意义的区分。
		4.	使用读得出来的名称。
		5.	使用可搜索的名称。
		6.	避免使用编码。
		7.	避免思维映射。
		8.	别扮可爱。
		9.	每个概念对应一个词。
		10.	别用双关语。
		11.	使用解决方案领域名称。
		12.	使用源自所涉问题领域的名称。
		13.	添加有意义的语境。
		14.	不要添加没用的语境。
	★	Info和Data就像a、an和the个样，是意义含混的废话。
	★	名称长短应与其作用域大小相对应。
	★	专业程序员了解，明确是王道。
	★	言到意到。意到言到。
第3章 函数
	★	函数的第一规则是要短小。第二条规则是还要更短小。
	★	函数应该做一件事。做好这件事。只做一件事。
	★	长而具有描述性的名称，要比短而令人费解的名称好。
		长而具有描述性的名称，要比描述性的长注释好。
	★	标识参数丑陋不堪。向函数传入布尔值简直就是骇人听闻的作法。
	★	普遍而言，应避免使用输出参数。如果函数必须要修改某种状态，就修改所属对象的状态吧。
	★	分隔指令与询问。
	★	最好把try和catch代码块的主体部分抽离出来，另外形成函数。
第4章 注释
	★	注释的恰当用法是弥补我们在用代码表达意图时遭遇的失败。
	★	注释不能美化糟糕的代码。
	★	好注释：
		1.	法律信息
		2.	提供信息的注释
		3.	对意图的注释
		4.	阐释
		5.	警示
		6.	TODO注释
		7.	放大
		8.	公共API中的Javadoc
	★	坏注释：
		1.	喃喃自语
		2.	多余的注释
		3.	误导性注释
		4.	循规式注释
		5.	日志式注释
		6.	废话注释
		7.	可怕的废话
		8.	通用函数或变量时就别用注释
		9.	位置标记
		10.	括号后面的注释
		11.	归属和署名
		12.	注释掉的代码
		13.	HTML注释
		14.	非本地信息
		15.	信息过多 
		16.	不明显的联系
		17.	函数头
		18.	非公共代码中的Javadoc 
第5章 格式
	★	代码格式关乎沟通，而沟通是专业开发者的头等大事。
	★	关系密切的概念应该互相靠近。
	★	除非有很好的理由，否则就不要把关系密切的概念放到不同的文件中。
	★	变量声明：
		变量声明应尽可能靠近其使用的位置。因为函数很短，本地变量应该在函数顶部出现。
	★	循环中的控制变量应该总是在循环语句中声明。
	★	相关函数：
		若某个函数调用了别外一个，就应该把它们放到一起，而且调用者应该尽可能放在被调用者上面。
	★	概念相关：
		概念相关的代码应该放到一起。相关性越强，彼此之间的距离就该越短。
	★	应该尽力保持代码行短小。
	★	如果有较长的列表需要做对齐处理，那问题就是在列表的长度上而不是对齐上。
第6章 对象和数据结构
	★	隐藏实现并非只是在变量之间放上一个函数层那么简单。而是曝露抽象接口，以便用户无需了解数据结构的实现就能操作数据本体。
	★	对象把数据隐藏于抽象之后，曝露操作数据的函数。数据结构曝露其数据，没有提供有意义的函数。
	★	过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数。
		面向对象代码便于在不改动既有函数的前提下添加新类。	
	★	模块不应了解它所操作对象的内部情形。
	★	类C的方法f只应该调用以下对象的方法：
		1.	C
		2.	由f创建的对象。
		3.	作为参数传递给f的对象。
		4.	由C的实体变量持有的对象。
	★	方法不应调用由任何函数返回的对象的方法。
第7章 错误处理
	★	错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法。
	★	使用异常而非返回码。
	★	使用不可控异常。
	★	可控异常的代码就是违反开放/闭合原则。
		如果你在方法中抛出可控异常，而catch语句在三个层级之上，
		你就得在catch语句和抛出异常处之间的每个方法签名中声明该异常。
	★	特例模式，创建一个类或配置一个对象，用来处理特例。
	★	别返回null值。如果你打算在方法返回null值，不如抛出异常，或是返回特例对象。
	★	Java有Collections.emptyList()方法，该方法返回一个预定义不可变列表。
	★	别传递null值。
第8章 边界
	★	学习性测试：编写测试来遍览第三方代码。
	★	边界上的代码需要清晰的分割和定义了期望的测试。
第9章 单元测试
	★	TDD三定律：
		1.	在编写不能通过的单元测试前，不可编写生产代码。
		2.	只可编写刚好地乐趣通过的单元测试，不能编译也算不通过。
		3.	只可编写刚好足以通过当前失败测试的生产代码。
	★	脏测试等同于————如果不是坏于的话————没测试。
	★	测试代码和生产代码一样重要。
	★	整洁测试的5条规则：
		1.	快速。
		2.	独立。
		3.	可重复。
		4. 	自足验证。
		5.	及时
第10章 类
	★	类应该短小。
	★	类的名称应当描述其权责。
	★	单一权责原则认为，类或模块应有且只有一条加以修改的理由。
	★	系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个权责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为。
	★	内聚性高，意味着类中的方法和变量互相依赖、互相结合成一个逻辑整体。
	★	开放——闭合原则：类应当对扩展开放，对修改封闭。
第11章 系统
	★	复杂要人命，它在消磨开发者的生命，让产品难以规划、构建和测试。
	★	软件系统应将启始过程和启始过程之后的运行时逻辑分离开，在启始过程中构建应用对象，也会存在互相缠结的依赖关系。
	★	有一种强大的机制可以实现分离构造与使用，那就是依赖注入，控制反转在依赖管理中的一种应用手段。
	★	我们应该只去实现今天的用户故事，然后重构，明天再扩展系统，实现新的用户故事。
	★	软件系统与物理系统可以类比，它们的架构都可以递增式增长，只要我们持续将关注面恰当地切分。
	★	最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java对象实现。不同的领域之间用最不具有侵害性的方面或类方面工具整合起来。
		这种架构能测试驱动，就像代码一样。
	★	拥有模块化关注面的POJO系统提供的敏捷能力，允许我们基于最新的知识做出优化时、时机刚好的决策。决策的复杂性也降低了。
	★	有了标准，就更易复用想法和组件、雇用拥有相关经验的人才、封装好点子，以及将组件连接起来。
		不过，创立标准的过程有时却漫长到行业等不及的程度，有些标准没有与它要服务的采用者的真实需求相结合。
	★	领域特定语言允许所有抽象层级和应用程序中的所有领域，从高级策略到底层细节，使用POJO来表达。
	★	无论是设计系统或单独的模块，别忘了使用大概可工作的最简单方案。
第12章 迭进