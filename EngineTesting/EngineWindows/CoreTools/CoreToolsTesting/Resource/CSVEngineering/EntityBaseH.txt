$Copyright$

#ifndef $NamespaceUppercaseSeparator$_$ClassNameUppercase$_BASE_H
#define $NamespaceUppercaseSeparator$_$ClassNameUppercase$_BASE_H

#include "CoreTools/CoreToolsDll.h"

#include "$Namespace$Fwd.h"
#include "System/Helper/UnicodeUsing.h"
$DataInclude$
$StdInclude$namespace $Namespace$
{
    class $ClassName$Base
    {
    public:
        using ClassType = $ClassName$Base;

$BaseClassUsing$    public:
        $ClassName$Base() noexcept = default;
        explicit $ClassName$Base($KeyType$ key) noexcept;

        virtual ~$ClassName$Base() noexcept = default;
        $ClassName$Base(const $ClassName$Base& rhs) noexcept = default;
        $ClassName$Base& operator=(const $ClassName$Base& rhs) noexcept = default;
        $ClassName$Base($ClassName$Base&& rhs) noexcept = default;
        $ClassName$Base& operator=($ClassName$Base&& rhs) noexcept = default;

        CLASS_INVARIANT_VIRTUAL_DECLARE;

        NODISCARD virtual $KeyType$ GetKey() const noexcept;

$BaseGetFunction$    private:
        $KeyType$ key{};
    };
}

#endif  // $NamespaceUppercaseSeparator$_$ClassNameUppercase$_BASE_H
