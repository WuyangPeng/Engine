游戏编程模式（Game Programming Patterns）

官方网站：
http://gameprogrammingpatterns.com/ 、http://journal.stuffwithstuff.com/ 、
https://www.ptpress.com.cn/shopping/buy?bookId=bbf95882-dea0-43ad-b798-efd6546f9748

★★★
作者：Robert Nystrom

知识点 
1.	游戏编程模式基础知识。

代码
1.	command.h（第2章 命令模式）
2.	flyweight.h（第3章 享元模式）

要点
1.	一味追求可扩展性让无数开发者在一个“引擎”上花费数年却没有搞清楚引擎空间是用来做什么的。（1.2 有什么代价）

第1篇 概述
	第1章 架构、性能和游戏
		★	第一个关键部分是，架构意味变化。衡量一个设计好坏的方法就是看它应对变化的灵活性。
		★	将一款有趣的游戏做得高效要比将一款高性能的游戏做的有趣更简单些。
		★	保持代码的灵活性，直到设计稳定下来，然后去除一些抽象，以提高游戏的性能。
		★	一个有趣的地方是这些都是关于某种速度：
			1.	我们的长期开发速度。
			2.	游戏的执行速度。
			3.	我们短期内的开发速度。
		★	寻求平衡：
			1.	我们想获得一个良好的架构，这样在项目的生命周期中便会更容易理解代码。
			2.	我们希望获得快速的运行时性能。
			3.	我们希望快速完成今天的功能。
		★	要点：
			1.	抽象和解耦能够使得你的程序开发变得更快和更简单。
				但不要浪费时间来做这件事，除非你确信存在问题的代码需要这种灵活性。
			2.	在你的开发周期中要对性能进行思考和设计，但是要推迟那些降低灵活性的、底层的、详尽的优化，能晚则晚。
			3.	忙地探索你的游戏的设计空间，但是不要走得太快留下一个烂摊子给自己。毕竟你将不得不面对它。
			4.	如果你将要删除代码，那么不要浪费时间将它整理得很整洁。
第2篇 再探设计模式
	第2章 命令模式
		★	将一个请求封装成一个对象，从而允许你使用不同的请求、队列或日志将客户端参数化，同时支持请求操作的撤销与恢复。
		★	命令就是一个对象化的方法调用。
		★	将某种概念转化为一块数据、一个对象，或者你可以认为是传入函数的变量等。
		★	命令就是面向对象化的回调。
	第3章 享元模式
		★	类型对象通过把“类型”对象化，可以尽可能减少定义新类型的数量。
			而享元模式中产生的内存共享只是额外的奖励。而享元模式却更注重效率。
		★	享元模式通过将对象数据切分成两种类型来解决问题：
			1.	不属于单一实例对象并且能够被所有对象共享的数据。
			2.	其他数据便是外部状态，对于每一个实例它们都是唯一的。
		★	享元模式不仅具有面向对象的优点，而且不会因数量巨大而产生开销。
	第4章 观察者模式