游戏引擎架构（Game Engine Architecture）

官方网站：
http://gameenginebook.com

雷神之锤：
https://github.com/id-software
https://github.com/id-software/quake-2

虚幻引擎：
https://docs.unrealengine.com/udk/Main/WebHome.html
https://www.beyondunreal.com/
https://docs.unrealengine.com/en-US/index.html

C4引擎：
http://terathon.com/index.html

Ogre：
http://www.ogre3d.org/

Open Dynamic Engine：
http://www.ode.org/

第1版
★★★
作者： Jason Gregory

第2版
★★★
作者： Jason Gregory

第3版
★★★
作者： Jason Gregory

知识点 
1.	游戏引擎基础知识。

要点

第Ⅰ部分 基础
	第1章 导论
		★	大部分二维或三维的电子游戏，会被计算机科学家称为软实时互动基于代理的计算模拟的例子。
		★	基于代理的模拟是指，模拟中多个独立的实体一起互动。
		★	游戏引擎也是以软件层构建。通常上层依赖下层，下层不依赖上层。
			当下层依赖上层时，称为循环依赖。在任何软件系统中，都要极力避免循环依赖，不然会导致系统间复杂的耦合，也会使软件难以测试，并妨碍代码重用。
		★	渲染引擎的设计通常采用分层架构。
		★	通常要编写消息泵去处理等待中的Windows消息，其余时间则尽快不断地执行渲染循环。
		★	渲染器利用矩阵表转换顶点，每个顶点用一个或多个矩阵生成最终混合顶点位置。此过程称为蒙皮。
		★	笔刷几何图形：
			优点：
			1.	制作方法迅速简单。
			2.	便于游戏设计师用来建立粗略关卡，制作原型。
			3.	既可以用作碰撞体，又可用作可渲染几何图形。
			缺点：
			1.	分辨率低，难以制作复杂图形。
			2.	不能支持有关节的物体或运动的角色。
	第2章 专业工具