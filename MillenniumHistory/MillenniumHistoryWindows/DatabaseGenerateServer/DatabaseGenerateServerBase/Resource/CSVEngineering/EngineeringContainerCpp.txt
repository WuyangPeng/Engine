$Copyright$

#include "$Namespace$Container.h"

$ContainerInclude$#include "CoreTools/CharacterString/StringConversion.h"
#include "CoreTools/Helper/ClassInvariant/UserClassInvariantMacro.h"
#include "CoreTools/Helper/ExceptionMacro.h"
#include "CoreTools/TextParsing/CSV/CSVContent.h"

using namespace std::literals;

$Namespace$::$Namespace$Container::$Namespace$Container(const String& directory)
    : $ContainerMember${
    Parsing(directory);
    Verify();

    USER_SELF_CLASS_IS_VALID_1;
}

void $Namespace$::$Namespace$Container::Parsing(const String& directory)
{
    const std::filesystem::path path{ directory };

    for (const auto& inputPath : std::filesystem::directory_iterator(path))
    {
        Parsing(inputPath);
    }
}

void $Namespace$::$Namespace$Container::Parsing(const std::filesystem::directory_entry& inputPath)
{
    const auto fileName = inputPath.path().native();

    if (fileName.find(L".csv"s) != (fileName.size() - 4))
    {
        return;
    }

    const CoreTools::CSVContent csvContent{ CoreTools::StringConversion::WideCharConversionStandard(fileName) };

    const auto csvClassName = csvContent.GetCSVClassName();

$SetContainer$}

void $Namespace$::$Namespace$Container::Verify() const
{
$VerifyContainer$    LOG_SINGLETON_ENGINE_APPENDER(Info, User, SYSTEM_TEXT("$Namespace$Ω· ¯‘ÿ»Î°≠°≠"));
}

#ifdef OPEN_CLASS_INVARIANT

bool $Namespace$::$Namespace$Container::IsValid() const noexcept
{
    if ($ContainerNotEqualNullptr$)
    {
        return true;
    }
    else
    {
        return false;
    }
}

#endif  // OPEN_CLASS_INVARIANT

$GetContainerDefine$