/// Copyright (c) 2010-2024
/// Threading Core Render Engine
///
/// 作者：彭武阳，彭晔恩，彭晔泽
/// 联系作者：94458936@qq.com
///
/// 标准：std:c++20
/// 版本：1.0.0.11 (2024/06/04 20:29)

#ifndef NETWORK_HELPER_USER_MACRO_H
#define NETWORK_HELPER_USER_MACRO_H

#include "CoreTools/Helper/UserMacro.h"

#define NETWORK_ClOSE_BEGIN (0x01)

#define CLOSE_USE_ACE (NETWORK_ClOSE_BEGIN)
#define CLOSE_USE_OPENSSL (NETWORK_ClOSE_BEGIN << 1)
#define CLOSE_USE_ACE_WCHAR (NETWORK_ClOSE_BEGIN << 2)  // 默认关闭
#define CLOSE_USE_PROTO_BUF (NETWORK_ClOSE_BEGIN << 3)
#define CLOSE_USE_ACTIVE_MQ (NETWORK_ClOSE_BEGIN << 4)
#define CLOSE_USE_NATS (NETWORK_ClOSE_BEGIN << 5)
#define CLOSE_USE_KAFKA (NETWORK_ClOSE_BEGIN << 6)

#define NETWORK_ClOSE_END CLOSE_USE_KAFKA

#define CLOSE_NETWORK_MAX (((NETWORK_ClOSE_END) << 1) - 1)

// 编译测试（默认为0B0000'0100，最大值为0B0111'1111）
#define COMPILE_NETWORK_CLOSE 0B0000'0100

static_assert(0 <= COMPILE_NETWORK_CLOSE, "COMPILE_NETWORK_CLOSE Must be greater than or equal 0.");
static_assert(COMPILE_NETWORK_CLOSE <= CLOSE_NETWORK_MAX, "COMPILE_NETWORK_CLOSE Must be less than or equal CLOSE_NETWORK_MAX.");

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACE) != CLOSE_USE_ACE

    #define NETWORK_USE_ACE static_cast<void>(0)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACE) != CLOSE_USE_ACE

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACE_WCHAR) != CLOSE_USE_ACE_WCHAR

    #if defined(NETWORK_USE_ACE)

        #define NETWORK_USES_ACE_WCHAR static_cast<void>(0)

    #endif  // defined(NETWORK_USE_ACE)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACE_WCHAR) != CLOSE_USE_ACE_WCHAR

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_OPENSSL) != CLOSE_USE_OPENSSL

    #define NETWORK_USE_OPENSSL static_cast<void>(0)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_OPENSSL) != CLOSE_USE_OPENSSL

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_PROTO_BUF) != CLOSE_USE_PROTO_BUF

    #define NETWORK_USE_PROTO_BUF static_cast<void>(0)
    #define PROTOBUF_USE_DLLS static_cast<void>(0)

    #ifndef PROTO_BUF_PRAGMA_WARNING

        #define PROTO_BUF_PRAGMA_WARNING static_cast<void>(0)

    #endif  // PROTO_BUF_PRAGMA_WARNING

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_PROTO_BUF) != CLOSE_USE_PROTO_BUF

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACTIVE_MQ) != CLOSE_USE_ACTIVE_MQ

    #define NETWORK_USE_ACTIVE_MQ static_cast<void>(0)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_ACTIVE_MQ) != CLOSE_USE_ACTIVE_MQ

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_NATS) != CLOSE_USE_NATS

    #define NETWORK_USE_NATS static_cast<void>(0)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_NATS) != CLOSE_USE_NATS

#if !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_KAFKA) != CLOSE_USE_KAFKA

    #define NETWORK_USE_KAFKA static_cast<void>(0)

#endif  // !defined(COMPILE_NETWORK_CLOSE) || (COMPILE_NETWORK_CLOSE & CLOSE_USE_KAFKA) != CLOSE_USE_KAFKA

#define BOOST_ASIO_NO_DEPRECATED static_cast<void>(0)

#ifdef BUILDING_STATIC

    #define BUILDING_NETWORK_STATIC static_cast<void>(0)

#endif  // BUILDING_STATIC

#endif  // NETWORK_HELPER_USER_MACRO_H
