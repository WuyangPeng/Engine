{
  "Copyright": "/// Copyright (c) 2010-\n/// Threading Core Render Engine\n///\n/// 作者：彭武阳，彭晔恩，彭晔泽\n/// 联系作者：94458936@qq.com\n///\n/// 标准：std:c++20\n/// 自动生成",
  "IncludeEnum": "#include \"Flags/$EnumName$.h\"",
  "IncludeClass": "$IncludeChildClass$$IncludeBaseClass$$IncludeContainerClass$",
  "IncludeChildClass": "#include \"$ClassName$.h\"\n",
  "IncludeBaseClass": "#include \"$ClassName$Base.h\"\n",
  "IncludeContainerDetailClass": "#include \"$ClassName$ContainerDetail.h\"\n",
  "IncludeContainerClass": "#include \"$ClassName$Container.h\"\n",
  "EnumDeclaration": "    enum class $EnumName$;",
  "ClassDeclaration": "$ChildClassDeclaration$$BaseClassDeclaration$$ContainerClassDeclaration$$MappingTypeUsing$",
  "ChildClassDeclaration": "    class $ClassName$;\n",
  "BaseClassDeclaration": "    class $ClassName$Base;\n",
  "ContainerClassDeclaration": "    class $ClassName$Container;\n",
  "MappingTypeUsing": "    using $ClassName$MappingType = $ClassName$;\n",
  "MappingTypeBaseUsing": "    using $ClassName$MappingType = $ClassName$Base;\n",
  "ContainerSharedPtrUsing": "        using Const$ClassName$ContainerSharedPtr = std::shared_ptr<const $ClassName$Container>;",
  "GetContainerSharedPtrUsing": "        NODISCARD Const$ClassName$ContainerSharedPtr Get$ClassName$Container() const noexcept;",
  "ContainerSharedPtr": "        Const$ClassName$ContainerSharedPtr $SmallClassName$Container;",
  "ContainerInclude": "#include \"$ClassName$Container.h\"",
  "BeginContainerMember": "$SmallClassName$Container{},",
  "ContainerMember": "      $SmallClassName$Container{},",
  "EndContainerMember": "      $SmallClassName$Container{}",
  "SetContainer": "    if (csvClassName == SYSTEM_TEXT(\"$ClassName$\"s))\n    {\n        $SmallClassName$Container = std::make_shared<$ClassName$Container>(csvContent);\n    }",
  "ElseSetContainer": "    else if (csvClassName == SYSTEM_TEXT(\"$ClassName$\"s))\n    {\n        $SmallClassName$Container = std::make_shared<$ClassName$Container>(csvContent);\n    }",
  "VerifyContainer": "    if ($SmallClassName$Container == nullptr)\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表不存在。\"s))\n    }\n",
  "BeginContainerNotEqualNullptr": "$SmallClassName$Container != nullptr &&",
  "ContainerNotEqualNullptr": "        $SmallClassName$Container != nullptr &&",
  "EndContainerNotEqualNullptr": "        $SmallClassName$Container != nullptr",
  "GetContainerDefine": "$NameSpaceName$::$NameSpaceName$Container::Const$ClassName$ContainerSharedPtr $NameSpaceName$::$NameSpaceName$Container::Get$ClassName$Container() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_1;\n\n    return $SmallClassName$Container;\n}\n",
  "ClassNameMember": "        $EnumName$ = $EnumValue$,  // $EnumNameNote$",
  "ClassMemberType": "{ SYSTEM_TEXT(\"$EnumName$\"s), $ClassName$::$EnumName$ },\n",
  "EndClassMemberType": "{ SYSTEM_TEXT(\"$EnumName$\"s), $ClassName$::$EnumName$ }",
  "ClassMemberName": "{ $ClassName$::$EnumName$, SYSTEM_TEXT(\"$EnumName$\"s) },",
  "EndClassMemberName": "{ $ClassName$::$EnumName$, SYSTEM_TEXT(\"$EnumName$\"s) }",
  "ClassMemberNote": "{ $ClassName$::$EnumName$, SYSTEM_TEXT(\"$EnumNameNote$\"s) },",
  "EndClassMemberNote": "{ $ClassName$::$EnumName$, SYSTEM_TEXT(\"$EnumNameNote$\"s) }",
  "TypeDescribe": "    static std::map<System::String, $ClassName$> typeDescribe{ ",
  "DataInclude": "#include \"CoreTools/TextParsing/Data/$VectorName$.h\"",
  "StdInclude": "#include <$StdName$>",
  "BaseClassStringUsing": "        using String = System::String;",
  "BaseClassCharUsing": "        using Char = System::TChar;",
  "BaseClassContainerUsing": "        using $ElementType$Container = std::$StdType$<$SmallElementType$>;\n        using $ElementType$ContainerConstIter = $ElementType$Container::const_iterator;",
  "BaseClassMappingUsing": "        using Const$MappingType$SharedPtr = std::shared_ptr<const $MappingType$MappingType>;",
  "BaseClassMappingContainerUsing": "        using $MappingType$Container = std::vector<Const$MappingType$SharedPtr>;",
  "BaseGetFunction": "        NODISCARD virtual $ElementType$ $ElementName$() const$ElementIsNoexcept$;",
  "BaseGetCountArrayFunction": "        NODISCARD virtual int Get$ElementName$Count() const;",
  "BaseGetValueArrayFunction": "        NODISCARD virtual $SmallElementType$ Get$ElementName$(int index) const;",
  "BaseGetBeginIterArrayFunction": "        NODISCARD virtual $ElementType$ConstIter Get$ElementName$Begin() const;",
  "BaseGetEndIterArrayFunction": "        NODISCARD virtual $ElementType$ConstIter Get$ElementName$End() const;",
  "BaseGetMappingFunction": "        NODISCARD virtual Const$MappingType$SharedPtr Get$ElementName$(const $Namespace$Container& csvContainer) const;",
  "BaseGetMappingArrayFunction": "        NODISCARD virtual $MappingType$Container Get$ElementName$(const $Namespace$Container& csvContainer) const;",
  "SubclassGetFunction": "        NODISCARD $ElementType$ $ElementName$() const$ElementIsNoexcept$ override;",
  "SubclassGetCountArrayFunction": "        NODISCARD int Get$ElementName$Count() const override;",
  "SubclassGetValueArrayFunction": "        NODISCARD $SmallElementType$ Get$ElementName$(int index) const override;",
  "SubclassGetBeginIterArrayFunction": "        NODISCARD $ElementType$ConstIter Get$ElementName$Begin() const noexcept override;",
  "SubclassGetEndIterArrayFunction": "        NODISCARD $ElementType$ConstIter Get$ElementName$End() const noexcept override;",
  "SubclassGetMappingFunction": "        NODISCARD Const$MappingType$SharedPtr Get$ElementName$(const $Namespace$Container& csvContainer) const override;",
  "SubclassGetMappingArrayFunction": "        NODISCARD $MappingType$Container Get$ElementName$(const $Namespace$Container& csvContainer) const override;",
  "GenerateKeyFunction": "        NODISCARD constexpr static $KeyType$ GenerateKey($KeyParameter$) noexcept\n        {\n            return $KeyReturn$;\n        }\n",
  "SubclassCheckingFunction": "    private:\n        void Checking() const;\n",
  "SubclassMember": "        $MemberType$ $MemberName$;  // $MemberNote$",
  "DataGetFunction": "        NODISCARD $ElementType$ $ElementName$() const$ElementIsNoexcept$;",
  "DataGetCountArrayFunction": "        NODISCARD int Get$ElementName$Count() const;",
  "DataGetValueArrayFunction": "        NODISCARD $SmallElementType$ Get$ElementName$(int index) const;",
  "DataGetBeginIterArrayFunction": "        NODISCARD $ElementType$ConstIter Get$ElementName$Begin() const noexcept;",
  "DataGetEndIterArrayFunction": "        NODISCARD $ElementType$ConstIter Get$ElementName$End() const noexcept;",
  "DataGetMappingFunction": "        NODISCARD Const$MappingType$SharedPtr Get$ElementName$(const $Namespace$Container& csvContainer) const;",
  "DataGetMappingArrayFunction": "        NODISCARD $MappingType$Container Get$ElementName$(const $Namespace$Container& csvContainer) const;",
  "DataCheckingFunction": "    private:\n        void Checking() const;\n",
  "DataMember": "        $MemberType$ $MemberName$;  // $MemberNote$",
  "BaseGetFunctionDefine": "$ElementType$ $Namespace$::$ClassName$Base::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    $ElementDefaultValue$}\n",
  "BaseStringGetFunctionDefine": "$ElementType$ $Namespace$::$ClassName$Base::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取字符串。\"s))\n}\n",
  "BaseArrayGetFunctionDefine": "$ElementType$ $Namespace$::$ClassName$Base::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取数组。\"s))\n}\n",
  "BaseEnumGetFunctionDefine": "$Namespace$::$ElementType$ $Namespace$::$ClassName$Base::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    return $ElementType${};\n}\n",
  "BaseGetCountArrayFunctionDefine": "int $Namespace$::$ClassName$Base::Get$ElementName$Count() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取数组。\"s))\n}\n",
  "BaseGetValueArrayFunctionDefine": "$SmallElementType$ $Namespace$::$ClassName$Base::Get$ElementName$(int index) const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    System::UnusedFunction(index);\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取数组。\"s))\n}\n",
  "BaseGetBeginIterArrayFunctionDefine": "$Namespace$::$ClassName$Base::$ElementType$ConstIter $Namespace$::$ClassName$Base::Get$ElementName$Begin() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取数组。\"s))\n}\n",
  "BaseGetEndIterArrayFunctionDefine": "$Namespace$::$ClassName$Base::$ElementType$ConstIter $Namespace$::$ClassName$Base::Get$ElementName$End() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取数组。\"s))\n}\n",
  "BaseGetMappingFunctionDefine": "$Namespace$::$ClassName$Base::Const$MappingType$SharedPtr $Namespace$::$ClassName$Base::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    System::UnusedFunction(csvContainer);\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取映射值。\"s))\n}\n",
  "BaseGetMappingArrayFunctionDefine": "$Namespace$::$ClassName$Base::$MappingType$Container $Namespace$::$ClassName$Base::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    System::UnusedFunction(csvContainer);\n\n    THROW_EXCEPTION(SYSTEM_TEXT(\"$SmallClassName$表基类不允许获取映射值。\"s))\n}\n",
  "IncludeUserClassInvariantMacro": "#include \"CoreTools/Helper/ClassInvariant/UserClassInvariantMacro.h\"\n",
  "IncludeNamespaceContainer": "#include \"$Namespace$Container.h\"\n",
  "IncludeMappingContainer": "#include \"$MappingType$Container.h\"\n",
  "SubclassClassMember": "      $ElementName${ csvRow.$ElementType$(SYSTEM_TEXT(\"$ElementName$\"s)) },",
  "EndSubclassClassMember": "      $ElementName${ csvRow.$ElementType$(SYSTEM_TEXT(\"$ElementName$\"s)) }",
  "SubclassCheckingCall": "    Checking();\n\n",
  "SubclassCheckingDefine": "void $Namespace$::$ClassName$::Checking() const\n{\n$CheckingCondition$}\n\n",
  "SubclassIsValidDefine": "#ifdef OPEN_CLASS_INVARIANT\n\nbool $Namespace$::$ClassName$::IsValid() const noexcept\n{\n    if (ParentType::IsValid() &&\n$CheckingIsValidCondition$)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\n#endif  // OPEN_CLASS_INVARIANT\n",
  "SubclassIsValidStubDefine": "CLASS_INVARIANT_STUB_DEFINE($Namespace$, $ClassName$)\n",
  "CheckingCondition": "    if (!($CheckingTypeCondition$))\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ElementType$ 数据校验失败。\"s))\n    }\n",
  "SubclassGetFunctionDefine": "$ElementType$ $Namespace$::$ClassName$::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$;\n}\n",
  "SubclassGetCountArrayFunctionDefine": "int $Namespace$::$ClassName$::Get$ElementName$Count() const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return boost::numeric_cast<int>($SmallElementName$.size());\n}\n",
  "SubclassGetValueArrayFunctionDefine": "$SmallElementType$ $Namespace$::$ClassName$::Get$ElementName$(int index) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.at(index);\n}\n",
  "SubclassGetBeginIterArrayFunctionDefine": "$Namespace$::$ClassName$::$ElementType$ConstIter $Namespace$::$ClassName$::Get$ElementName$Begin() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.cbegin();\n}\n",
  "SubclassGetEndIterArrayFunctionDefine": "$Namespace$::$ClassName$::$ElementType$ConstIter $Namespace$::$ClassName$::Get$ElementName$End() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.cend();\n}\n",
  "SubclassGetMappingFunctionDefine": "$Namespace$::$ClassName$::Const$MappingType$SharedPtr $Namespace$::$ClassName$::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return csvContainer.Get$MappingType$Container()->Get$MappingType$($SmallElementName$);\n}\n",
  "SubclassGetMappingArrayFunctionDefine": "$Namespace$::$ClassName$::$MappingType$Container $Namespace$::$ClassName$::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    $MappingType$Container result{};\n\n    const auto container = csvContainer.Get$MappingType$Container();\n\n    for (const auto& element : $SmallElementName$)\n    {\n        result.emplace_back(container->Get$MappingType$(element));\n    }\n\n    return result;\n}\n",
  "BeginDataClassMember": "$ElementName${ csvRow.$ElementType$(SYSTEM_TEXT(\"$ElementName$\"s)) },",
  "DataClassMember": "      $ElementName${ csvRow.$ElementType$(SYSTEM_TEXT(\"$ElementName$\"s)) },",
  "EndDataClassMember": "      $ElementName${ csvRow.$ElementType$(SYSTEM_TEXT(\"$ElementName$\"s)) }",
  "DataCheckingCall": "    Checking();\n\n",
  "DataCheckingDefine": "void $Namespace$::$ClassName$::Checking() const\n{\n$DataCheckingCondition$}\n\n",
  "DataIsValidDefine": "#ifdef OPEN_CLASS_INVARIANT\n\nbool $Namespace$::$ClassName$::IsValid() const noexcept\n{\n    if (ParentType::IsValid() &&\n$CheckingIsValidCondition$)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\n#endif  // OPEN_CLASS_INVARIANT\n",
  "DataIsValidStubDefine": "CLASS_INVARIANT_STUB_DEFINE($Namespace$, $ClassName$)\n",
  "DataCheckingCondition": "    if (!($CheckingTypeCondition$))\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ElementType$ 数据校验失败。\"s))\n    }\n",
  "DataGetFunctionDefine": "$ElementType$ $Namespace$::$ClassName$::$ElementName$() const$ElementIsNoexcept$\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$;\n}\n",
  "DataGetCountArrayFunctionDefine": "int $Namespace$::$ClassName$::Get$ElementName$Count() const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return boost::numeric_cast<int>($SmallElementName$.size());\n}\n",
  "DataGetValueArrayFunctionDefine": "$SmallElementType$ $Namespace$::$ClassName$::Get$ElementName$(int index) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.at(index);\n}\n",
  "DataGetBeginIterArrayFunctionDefine": "$Namespace$::$ClassName$::$ElementType$ConstIter $Namespace$::$ClassName$::Get$ElementName$Begin() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.cbegin();\n}\n",
  "DataGetEndIterArrayFunctionDefine": "$Namespace$::$ClassName$::$ElementType$ConstIter $Namespace$::$ClassName$::Get$ElementName$End() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return $SmallElementName$.cend();\n}\n",
  "DataGetMappingFunctionDefine": "$Namespace$::$ClassName$::Const$MappingType$SharedPtr $Namespace$::$ClassName$::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    return csvContainer.Get$MappingType$Container()->Get$MappingType$($SmallElementName$);\n}\n",
  "DataGetMappingArrayFunctionDefine": "$Namespace$::$ClassName$::$MappingType$Container $Namespace$::$ClassName$::Get$ElementName$(const $Namespace$Container& csvContainer) const\n{\n    USER_CLASS_IS_VALID_CONST_$ClassIsValidLevel$;\n\n    $MappingType$Container result{};\n\n    const auto container = csvContainer.Get$MappingType$Container();\n\n    for (const auto& element : $SmallElementName$)\n    {\n        result.emplace_back(container->Get$MappingType$(element));\n    }\n\n    return result;\n}\n",
  "ContainerGetFunction": "        NODISCARD Const$ClassName$SharedPtr GetFirst$ClassName$($KeyParameter$) const;\n        NODISCARD Const$ClassName$SharedPtr Get$ClassName$($KeyType$ key) const;\n        NODISCARD $ContainerType$ GetContainer() const;\n\n        NODISCARD int GetContainerSize() const;\n\n        template <typename Function>\n        NODISCARD Const$ClassName$SharedPtr GetFirst$ClassName$(Function function) const;\n\n        template <typename Function>\n        NODISCARD Container Get$ClassName$(Function function) const;\n",
  "VectorContainerGetFunction": "        NODISCARD Const$ClassName$SharedPtr GetFirst$ClassName$($KeyParameter$) const;\n        NODISCARD $ContainerType$ Get$ClassName$($KeyType$ key) const;\n        NODISCARD $ContainerType$ GetContainer() const;\n\n        NODISCARD int GetContainerSize() const;\n\n        template <typename Function>\n        NODISCARD Const$ClassName$SharedPtr GetFirst$ClassName$(Function function) const;\n\n        template <typename Function>\n        NODISCARD Container Get$ClassName$(Function function) const;\n",
  "KeyParameter": "$KeyType$ key",
  "SingleContainerGetFunction": "        NODISCARD Const$ClassName$SharedPtr Get$ClassName$() const noexcept;\n",
  "UniqueFunction": "\n        void Unique();",
  "MappingContainerUsing": "\n        using MappingContainer = std::$MapName$<int, Const$ClassName$SharedPtr>;",
  "ContainerUsing": "\n        using Container = std::vector<Const$ClassName$SharedPtr>;",
  "GetEntityFirstDefine": "    if (const auto iter = std::ranges::find_if($ClassNameLetter$, function);\n        iter != $ClassNameLetter$.cend())\n    {\n        return *iter;\n    }\n",
  "GetEntityMapFirstDefine": "    for (const auto& element : $ClassNameLetter$)\n    {\n        if (function(element.second))\n        {\n            return element.second;\n        }\n    }\n",
  "EntityContainerInclude": "#include \"$ClassName$ContainerDetail.h\"",
  "SingleEntityContainerInclude": "#include \"$ClassName$Container.h\"\n#include \"CoreTools/Helper/ClassInvariant/UserClassInvariantMacro.h\"\n#include \"CoreTools/Helper/ExceptionMacro.h\"",
  "CallUnique": "\n    Unique();",
  "ShrinkToFitCall": "\n\n    $ClassNameLetter$.shrink_to_fit();\n",
  "UniqueFunctionDefine": "void $Namespace$::$ClassName$Container::Unique()\n{\n    const auto iter = std::ranges::unique($ClassNameLetter$, [](const auto& lhs, const auto& rhs) noexcept {\n        if((*lhs).GetKey() == (*rhs).GetKey())\n        {\n            LOG_SINGLETON_ENGINE_APPENDER(Warn, User, SYSTEM_TEXT(\"$ClassNameLetter$表存在重复主键，key = \"), (*lhs).GetKey(), SYSTEM_TEXT(\"。\\n\"), CoreTools::LogAppenderIOManageSign::TriggerAssert);\n\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    });\n\n    if (iter.begin() != iter.end())\n    {\n        $ClassNameLetter$.erase(iter.begin(), iter.end());\n    }\n\n    $ClassNameLetter$.shrink_to_fit();\n}",
  "GetFirstContainerDefine": "$Namespace$::$ClassName$Container::Const$ClassName$SharedPtr $Namespace$::$ClassName$Container::GetFirst$ClassName$() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n$GetFirstContainerReturn$\n}\n\n",
  "LoadFunctionDefine": "    for (auto index = 0; index < size; ++index)\n    {\n        CoreTools::CSVRow csvRow{ csvHead, csvContent.GetContent(index) };\n\n        $ClassNameLetter$.emplace_back(std::make_shared<$ClassName$>(csvRow));\n    }\n\n    std::ranges::sort($ClassNameLetter$, [](const auto& lhs, const auto& rhs) noexcept {\n        return (*lhs).GetKey() < (*rhs).GetKey();\n    });$ShrinkToFitCall$",
  "MapLoadFunctionDefine": "    for (auto index = 0; index < size; ++index)\n    {\n        CoreTools::CSVRow csvRow{ csvHead, csvContent.GetContent(index) };\n\n        auto $ClassNameLetter$Base = std::make_shared<$ClassName$>(csvRow);\n\n        if (!$ClassNameLetter$.emplace($ClassNameLetter$Base->GetKey(), $ClassNameLetter$Base).second)\n        {\n            LOG_SINGLETON_ENGINE_APPENDER(Warn, User, SYSTEM_TEXT(\"$ClassNameLetter$表存在重复主键：\"), $ClassNameLetter$Base->GetKey(), CoreTools::LogAppenderIOManageSign::TriggerAssert);\n        }\n    }\n",
  "UniqueLoadFunctionDefine": "    if (size == 0)\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ClassNameLetter$表为空。\"s))\n    }\n\n    if (1 < size)\n    {\n        LOG_SINGLETON_ENGINE_APPENDER(Warn, User, SYSTEM_TEXT(\"$ClassNameLetter$表不是唯一的\"), CoreTools::LogAppenderIOManageSign::TriggerAssert);\n    }\n\n    CoreTools::CSVRow csvRow{ csvContent.GetCSVHead(), csvContent.GetContent(0) };\n\n    $ClassNameLetter$ = std::make_shared<$ClassName$>(csvRow);\n",
  "GetFirstContainerReturn": "    return $ClassNameLetter$.at(0);",
  "MapGetFirstContainerReturn": "    if ($ClassNameLetter$.empty())\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ClassNameLetter$表为空。\"s))\n    }\n    else\n    {\n        return $ClassNameLetter$.begin()->second;\n    }",
  "GetSharedPtrDefine": "$Namespace$::$ClassName$Container::Const$ClassName$SharedPtr $Namespace$::$ClassName$Container::Get$IsVector$$ClassName$($KeyType$ key) const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n$GetSharedPtrDefineReturn$\n}\n\n",
  "GetContainerByKeyDefine": "$Namespace$::$ClassName$Container::Container $Namespace$::$ClassName$Container::Get$ClassName$($KeyType$ key) const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    const auto function = [](const auto& lhs, const auto& rhs) noexcept {\n        return (*lhs).GetKey() < (*rhs).GetKey();\n    };\n\n    const auto range = equal_range($ClassNameLetter$.begin(), $ClassNameLetter$.end(), std::make_shared<$ClassName$Base>(key), function);\n\n    return Container{ range.first, range.second };\n}\n\n",
  "GetOriginalContainerDefine": "$Namespace$::$ClassName$Container::$IsMap$Container $Namespace$::$ClassName$Container::GetContainer() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    return $ClassNameLetter$;\n}\n\n",
  "GetContainerSizeDefine": "int $Namespace$::$ClassName$Container::GetContainerSize() const\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    return boost::numeric_cast<int>($ClassNameLetter$.size());\n}\n\n",
  "GetUniqueDefine": "$Namespace$::$ClassName$Container::Const$ClassName$SharedPtr $Namespace$::$ClassName$Container::Get$ClassName$() const noexcept\n{\n    USER_CLASS_IS_VALID_CONST_9;\n\n    return $ClassNameLetter$;\n}\n",
  "GetSharedPtrDefineReturn": "    const auto function = [](const auto& lhs, const auto& rhs) noexcept {\n        return (*lhs).GetKey() < (*rhs).GetKey();\n    };\n\n    if (const auto iter = std::ranges::lower_bound($ClassNameLetter$, std::make_shared<$ClassName$Base>(key), function);\n        iter != $ClassNameLetter$.cend() && (*iter)->GetKey() == key)\n    {\n        return *iter;\n    }\n    else\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ClassNameLetter$表未找到key = \"s) + System::ToString(key) + SYSTEM_TEXT(\"的配置信息。\"s))\n    }",
  "VectorGetSharedPtrDefineReturn": "    const auto function = [](const auto& lhs, const auto& rhs) noexcept {\n        return (*lhs).GetKey() < (*rhs).GetKey();\n    };\n\n    const auto range = equal_range($ClassNameLetter$.begin(), $ClassNameLetter$.end(), std::make_shared<$ClassName$Base>(key), function);\n\n    if (range.first != $ClassNameLetter$.cend())\n    {\n        return *range.first;\n    }\n    else\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ClassNameLetter$表未找到key = \"s) + System::ToString(key) + SYSTEM_TEXT(\"的配置信息。\"s))\n    }",
  "MapGetSharedPtrDefineReturn": "    const auto iter = $ClassNameLetter$.find(key);\n\n    if (iter != $ClassNameLetter$.cend())\n    {\n        return iter->second;\n    }\n    else\n    {\n        THROW_EXCEPTION(SYSTEM_TEXT(\"$ClassNameLetter$表未找到key = \"s) + System::ToString(key) + SYSTEM_TEXT(\"的配置信息。\"s))\n    }",
  "ExceptionMacroInclude": "#include \"CoreTools/Helper/ExceptionMacro.h\"\n",
  "NumericCastInclude": "#include \"System/Helper/PragmaWarning/NumericCast.h\"\n"
}
