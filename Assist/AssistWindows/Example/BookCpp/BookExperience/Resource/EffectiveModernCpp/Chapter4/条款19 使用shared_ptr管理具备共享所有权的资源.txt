条款19 使用std::shared_ptr管理具备共享所有权的资源
	★	正如垃圾回收一样，用户无须操心如何管理被指涉到对象的生存期，但又如析构函数一样，该对象的析构函数的时序是确定的。
	★	引用计数的存在会带来一些性能影响：
		1.	std::shared_ptr的尺寸是裸指针的两倍。
		2.	引用计数的内存必须动态分配。
		3.	引用计数的递增和递减必须是原子操作。
	★	控制块的创建遵循以下规则：
		1.	std::make_shared总是创建一个控制块。
		2.	从具备专属所有权的指针出发构造一个std::shared_ptr时，会创建一个控制块。
		3.	当std::shared_ptr构造函数使用裸指针作为实参来调用时，它会创建一个控制块。
	★	一个控制块的尺寸通常只有几个字长，尽管自定义析构器和内存分配器可能会使其变得更大。
	★	std::shared_ptr提供方便的手段，实现了任意资源在共享所有权语义下进行生命周期管理的垃圾回收。
	★	与std::unique_ptr相比，std::shared_ptr的尺寸通常是裸指针尺寸的两倍，它还会带来控制块的开销，并要求原子化的引用计数操作。
	★	默认的资源析构通过delete运算符进行，但同时也支持定制删除器。删除器的型别对std::shared_ptr的型别没有影响。
	★	避免使用裸指针型别的变量来创建std::shared_ptr指针。